{"args": {"data_type": "bird", "split": "test", "k_shot": 0, "prompt_repr": "SQL", "example_type": "QA", "selector_type": null, "max_seq_len": 2048, "max_ans_len": 200, "tokenizer": "gpt-3.5-turbo", "scope_factor": 100, "pre_test_result": null}, "costs": {"prompt_tokens_per_prompt": 0.0, "gpt-4": 12.272, "gpt-3.5-turbo": 0.6136, "text-davinci-003": 6.136, "example_quality": 1, "pattern_similarity": 1}, "questions": [{"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.county ( text | values : Alameda , Alpine ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.eilcode ( text | comment : educational instruction level code | values : ELEMHIGH , HS ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.`percent (%) eligible free (k-12)` ( real | values : 0.519779208831647 , 0.470886075949367 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`percent (%) eligible frpm (k-12)` ( real | values : 0.657773689052438 , 0.470886075949367 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.gsoffered ( K-12 )\nschools.county ( Alameda )\nschools.gsserved ( K-12 )\nfrpm.`county name` ( Alameda )\nsatscores.cname ( Alameda )\nWhat is the highest eligible free rate for K-12 students in the schools in Alameda County?\n", "response": "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Alameda' AND schools.gsoffered = 'K-12' ORDER BY frpm.`percent (%) eligible free (k-12)` DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.eilname ( text | comment : educational instruction level name | values : High School ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.eilcode ( text | comment : educational instruction level code | values : ELEMHIGH , HS ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`percent (%) eligible free (ages 5-17)` ( real | values : 0.516822429906542 , 0.484042553191489 ) , frpm.`percent (%) eligible free (k-12)` ( real | values : 0.519779208831647 , 0.470886075949367 ) , frpm.`free meal count (ages 5-17)` ( real | values : 553.0 , 182.0 ) ]\ntable satscores , columns = [ satscores.rtype ( text | values : D , S ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.edopsname ( Continuation School )\nfrpm.`educational option type` ( Continuation School )\nPlease list the lowest three eligible free rates for students aged 5-17 in continuation schools.\n", "response": "SELECT frpm.`percent (%) eligible free (ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.`educational option type` = 'Continuation School' AND satscores.rtype = 'D' GROUP BY frpm.`percent (%) eligible free (ages 5-17)` ORDER BY sum(frpm.`percent (%) eligible free (ages 5-17)`) ASC LIMIT 3;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.charter ( integer | values : 1 , 0 ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.zip ( text | values : 94544-1136 , 94560-5359 ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`district name` ( text ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.rtype ( text | values : D , S ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nfrpm.`county name` ( Fresno )\nsatscores.cname ( Fresno )\nPlease list the zip code of all the charter schools in Fresno County Office of Education.\n", "response": "SELECT schools.zip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Fresno' AND frpm.`school type` = 'K-12 Schools (Public)';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.mailstrabr ( text | comment : mailing street address | values : 313 West Winton Ave. ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.school ( text | values : FAME Public Charter ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.`frpm count (k-12)` ( real | values : 715.0 , 186.0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`frpm count (ages 5-17)` ( real | values : 702.0 , 182.0 ) , frpm.`percent (%) eligible frpm (k-12)` ( real | values : 0.657773689052438 , 0.470886075949367 ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.gsserved ( K-12 )\nWhat is the unabbreviated mailing address of the school with the highest FRPM count for K-12 students?\n", "response": "SELECT schools.mailstrabr FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.gsserved = 'K-12' ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.phone ( text | values : (510) 887-0152 , (510) 596-8901 ) , schools.charter ( integer | values : 1 , 0 ) , schools.opendate ( date | values : 2005-08-29 , 2006-08-28 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.fundingtype ( text | values : Directly funded , Locally funded ) , schools.charternum ( text | values : 0728 , 0811 ) ]\ntable frpm , columns = [ frpm.`charter funding type` ( text | values : Directly funded , Locally funded ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`charter school number` ( text | values : 0728 , 0811 ) , frpm.`charter school (y/n)` ( integer | values : 1 , 0 ) , frpm.`school name` ( text | values : FAME Public Charter ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.rtype ( text | values : D , S ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nPlease list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.\n", "response": "SELECT schools.phone FROM schools WHERE schools.charter = 1 AND schools.opendate > '2000-01-01';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable satscores , columns = [ satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.rtype ( text | values : D , S ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) ]\ntable schools , columns = [ schools.virtual ( text | values : P , N ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) , schools.charternum ( text | values : 0728 , 0811 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.charter ( integer | values : 1 , 0 ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district type` ( text | values : State Special Schools ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nsatscores.avgscrmath ( 400 )\nsatscores.numtsttakr ( 400 )\nsatscores.avgscrread ( 400 )\nHow many schools with an average score in Math under 400 in the SAT test are exclusively virtual?\n", "response": "SELECT count(schools.virtual) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath < 400 AND satscores.rtype = 'S';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.magnet ( integer | values : 0 , 1 ) , schools.school ( text | values : FAME Public Charter ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable satscores , columns = [ satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.rtype ( text | values : D , S ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district name` ( text ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nsatscores.numge1500 ( 500 )\nAmong the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.\n", "response": "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numge1500 > 500 AND schools.magnet = 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.phone ( text | values : (510) 887-0152 , (510) 596-8901 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) ]\ntable satscores , columns = [ satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.rtype ( text | values : D , S ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`district name` ( text ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nsatscores.numtsttakr ( 1500 )\nWhat is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?\n", "response": "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.school = satscores.sname WHERE satscores.numge1500 = ( SELECT max(numge1500) FROM satscores );\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) ]\ntable satscores , columns = [ satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.rtype ( text | values : D , S ) ]\ntable frpm , columns = [ frpm.`frpm count (k-12)` ( real | values : 715.0 , 186.0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`enrollment (k-12)` ( real | values : 1087.0 , 395.0 ) , frpm.`percent (%) eligible frpm (k-12)` ( real | values : 0.657773689052438 , 0.470886075949367 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.gsserved ( K-12 )\nschools.gsoffered ( K-12 )\nWhat is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?\n", "response": "SELECT frpm.`frpm count (k-12)` FROM frpm INNER JOIN satscores ON frpm.`school code` = satscores.cds GROUP BY frpm.`school code` ORDER BY frpm.`frpm count (k-12)` DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.charter ( integer | values : 1 , 0 ) , schools.fundingtype ( text | values : Directly funded , Locally funded ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.charternum ( text | values : 0728 , 0811 ) ]\ntable satscores , columns = [ satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.rtype ( text | values : D , S ) ]\ntable frpm , columns = [ frpm.`charter funding type` ( text | values : Directly funded , Locally funded ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`charter school number` ( text | values : 0728 , 0811 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nsatscores.avgscrmath ( 560 )\nAmong the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?\n", "response": "SELECT count(frpm.`charter funding type`) FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrmath >= 560;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.school ( text | values : FAME Public Charter ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) ]\ntable satscores , columns = [ satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) ]\ntable frpm , columns = [ frpm.`frpm count (ages 5-17)` ( real | values : 702.0 , 182.0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`frpm count (k-12)` ( real | values : 715.0 , 186.0 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`enrollment (ages 5-17)` ( real | values : 1070.0 , 376.0 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nFor the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?\n", "response": "SELECT frpm.`frpm count (ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.avgscrread = ( SELECT max(avgscrread) FROM satscores );\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.eilcode ( text | comment : educational instruction level code | values : ELEMHIGH , HS ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`enrollment (k-12)` ( real | values : 1087.0 , 395.0 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school name` ( text | values : FAME Public Charter ) ]\ntable satscores , columns = [ satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nsatscores.enroll12 ( 500 )\nsatscores.numge1500 ( 500 )\nPlease list the codes of the schools with a total enrollment of over 500.\n", "response": "SELECT schools.cdscode FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.enroll12 > 500;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.school ( text | values : FAME Public Charter ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) ]\ntable satscores , columns = [ satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.rtype ( text | values : D , S ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\ntable frpm , columns = [ frpm.`percent (%) eligible free (ages 5-17)` ( real | values : 0.516822429906542 , 0.484042553191489 ) , frpm.`percent (%) eligible free (k-12)` ( real | values : 0.519779208831647 , 0.470886075949367 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`percent (%) eligible frpm (k-12)` ( real | values : 0.657773689052438 , 0.470886075949367 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nfrpm.`percent (%) eligible free (ages 5-17)` ( 0.3 )\nfrpm.`percent (%) eligible free (k-12)` ( 0.3 )\nfrpm.`percent (%) eligible frpm (k-12)` ( 0.3 )\nAmong the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?\n", "response": "SELECT frpm.`percent (%) eligible free (ages 5-17)` FROM frpm WHERE frpm.`percent (%) eligible free (ages 5-17)` > 0.3 ORDER BY frpm.`percent (%) eligible free (ages 5-17)` DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.phone ( text | values : (510) 887-0152 , (510) 596-8901 ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.eilcode ( text | comment : educational instruction level code | values : ELEMHIGH , HS ) , schools.eilname ( text | comment : educational instruction level name | values : High School ) ]\ntable satscores , columns = [ satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.irc ( integer | values : 1 , 0 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district name` ( text ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nsatscores.numtsttakr ( 3 )\nPlease list the phone numbers of the schools with the top 3 SAT excellence rate.\n", "response": "SELECT schools.phone FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds ORDER BY satscores.avgscrread DESC LIMIT 3;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.ncesdist ( text | comment : national center for educational statistics school district identification number | values : 0691051 , 0600002 ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) , schools.school ( text | values : FAME Public Charter ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.`enrollment (ages 5-17)` ( real | values : 1070.0 , 376.0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`enrollment (k-12)` ( real | values : 1087.0 , 395.0 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district name` ( text ) ]\ntable satscores , columns = [ satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nList the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.\n", "response": "SELECT schools.ncesdist FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode GROUP BY schools.ncesdist ORDER BY count(*) DESC LIMIT 5;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable satscores , columns = [ satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.rtype ( text | values : D , S ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) ]\ntable schools , columns = [ schools.district ( text ) , schools.magnet ( integer | values : 0 , 1 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.charter ( integer | values : 1 , 0 ) , schools.charternum ( text | values : 0728 , 0811 ) ]\ntable frpm , columns = [ frpm.`district name` ( text ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`district type` ( text | values : State Special Schools ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhich active district has the highest average score in Reading?\n", "response": "SELECT satscores.dname FROM satscores WHERE satscores.rtype = 'D' GROUP BY satscores.dname ORDER BY cast(sum(satscores.avgscrread) AS REAL) / count(satscores.cds) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.county ( text | values : Alameda , Alpine ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) ]\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district name` ( text ) , frpm.`district code` ( integer | values : 10017 , 31609 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.county ( Alameda )\nsatscores.cname ( Alameda )\nsatscores.numtsttakr ( 100 )\nsatscores.numge1500 ( 100 )\nfrpm.`county name` ( Alameda )\nHow many schools in merged Alameda have number of test takers less than 100?\n", "response": "SELECT count(schools.county) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr < 100;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.charter ( integer | values : 1 , 0 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.charternum ( text | values : 0728 , 0811 ) , schools.virtual ( text | values : P , N ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.eilcode ( text | comment : educational instruction level code | values : ELEMHIGH , HS ) ]\ntable satscores , columns = [ satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\ntable frpm , columns = [ frpm.`charter school number` ( text | values : 0728 , 0811 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`charter school (y/n)` ( integer | values : 1 , 0 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nsatscores.avgscrwrite ( 499 )\nsatscores.avgscrread ( 499 )\nsatscores.avgscrmath ( 499 )\nWhat is the charter number of the school that the average score in Writing is 499?\n", "response": "SELECT frpm.`charter school number` FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE satscores.avgscrwrite = 499;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.fundingtype ( text | values : Directly funded , Locally funded ) , schools.county ( text | values : Alameda , Alpine ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.charternum ( text | values : 0728 , 0811 ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable satscores , columns = [ satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.rtype ( text | values : D , S ) ]\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`charter funding type` ( text | values : Directly funded , Locally funded ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.fundingtype ( Directly funded )\nschools.county ( Contra Costa )\nsatscores.cname ( Contra Costa )\nfrpm.`county name` ( Contra Costa )\nfrpm.`charter funding type` ( Directly funded )\nHow many schools in Contra Costa (directly funded) have number of test takers not more than 250?\n", "response": "SELECT count(schools.cdscode) FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.fundingtype = 'Directly funded' AND satscores.numtsttakr <= 250;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.phone ( text | values : (510) 887-0152 , (510) 596-8901 ) , schools.school ( text | values : FAME Public Charter ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.eilname ( text | comment : educational instruction level name | values : High School ) , schools.eilcode ( text | comment : educational instruction level code | values : ELEMHIGH , HS ) ]\ntable satscores , columns = [ satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`district name` ( text ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhat is the phone number of the school that has the highest average score in Math?\n", "response": "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE satscores.avgscrmath = ( SELECT max(avgscrmath) FROM satscores );\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable frpm , columns = [ frpm.`low grade` ( text | values : K , 9 ) , frpm.`high grade` ( text | values : 12 , 8 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) ]\ntable schools , columns = [ schools.county ( text | values : Alameda , Alpine ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nfrpm.`low grade` ( 12 , 9 )\nfrpm.`high grade` ( 12 , 9 )\nfrpm.`county name` ( Amador )\nfrpm.`county code` ( 12 )\nschools.county ( Amador )\nschools.gsoffered ( 12 , 9 )\nsatscores.cname ( Amador )\nsatscores.enroll12 ( 12 , 9 )\nsatscores.numge1500 ( 12 , 9 )\nHow many schools in Amador which the Low Grade is 9 and the High Grade is 12?\n", "response": "SELECT count(schools.cdscode) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`low grade` = 9 AND frpm.`high grade` = 12;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable frpm , columns = [ frpm.`free meal count (k-12)` ( real | values : 565.0 , 186.0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`frpm count (k-12)` ( real | values : 715.0 , 186.0 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`school name` ( text | values : FAME Public Charter ) ]\ntable schools , columns = [ schools.city ( text | values : Hayward , Newark ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.state ( text | values : CA ) , schools.county ( text | values : Alameda , Alpine ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nfrpm.`county name` ( Los Angeles )\nschools.city ( Los Angeles )\nschools.gsoffered ( K-12 )\nschools.county ( Los Angeles )\nsatscores.cname ( Los Angeles )\nsatscores.numge1500 ( 500 )\nIn Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?\n", "response": "SELECT count(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`free meal count (k-12)` > 500 AND frpm.`free meal count (k-12)` < 700 AND frpm.`frpm count (k-12)` > 500 AND frpm.`frpm count (k-12)` < 700;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\ntable schools , columns = [ schools.county ( text | values : Alameda , Alpine ) , schools.school ( text | values : FAME Public Charter ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.state ( text | values : CA ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nsatscores.cname ( Contra Costa )\nschools.county ( Contra Costa )\nfrpm.`county name` ( Contra Costa )\nWhich school in Contra Costa has the highest number of test takers?\n", "response": "SELECT schools.school FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.school ORDER BY count(satscores.numtsttakr) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.streetabr ( text | comment : street address | values : 313 West Winton Ave. ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`enrollment (k-12)` ( real | values : 1087.0 , 395.0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`enrollment (ages 5-17)` ( real | values : 1070.0 , 376.0 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district name` ( text ) ]\ntable satscores , columns = [ satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.gsoffered ( K-12 )\nschools.gsserved ( K-12 )\nsatscores.enroll12 ( 30 )\nsatscores.numtsttakr ( 30 )\nList the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.\n", "response": "SELECT DISTINCT schools.school FROM schools INNER JOIN frpm ON schools.school = frpm.`school name` INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.enroll12 > 30 AND satscores.numtsttakr > 30;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) ]\ntable frpm , columns = [ frpm.`percent (%) eligible free (k-12)` ( real | values : 0.519779208831647 , 0.470886075949367 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`free meal count (k-12)` ( real | values : 565.0 , 186.0 ) , frpm.`percent (%) eligible frpm (k-12)` ( real | values : 0.657773689052438 , 0.470886075949367 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.gsoffered ( K-12 )\nschools.gsserved ( K-12 )\nfrpm.`percent (%) eligible free (k-12)` ( 0.1 )\nfrpm.`percent (%) eligible frpm (k-12)` ( 0.1 )\nsatscores.numtsttakr ( 1500 )\nGive the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?\n", "response": "SELECT schools.school FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`percent (%) eligible free (k-12)` > 0.1 AND satscores.numge1500 > 1500;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.fundingtype ( text | values : Directly funded , Locally funded ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.city ( text | values : Hayward , Newark ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) ]\ntable satscores , columns = [ satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`charter funding type` ( text | values : Directly funded , Locally funded ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district name` ( text ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.city ( Riverside )\nsatscores.avgscrmath ( 400 )\nsatscores.avgscrread ( 400 )\nsatscores.numtsttakr ( 400 )\nName schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?\n", "response": "SELECT schools.fundingtype FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.avgscrmath > 400;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.streetabr ( text | comment : street address | values : 313 West Winton Ave. ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.county ( text | values : Alameda , Alpine ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`free meal count (k-12)` ( real | values : 565.0 , 186.0 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`free meal count (ages 5-17)` ( real | values : 553.0 , 182.0 ) , frpm.`school name` ( text | values : FAME Public Charter ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.rtype ( text | values : D , S ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.county ( Monterey )\nfrpm.`county name` ( Monterey )\nsatscores.cname ( Monterey )\nsatscores.enroll12 ( 800 )\nState the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?\n", "response": "SELECT schools.streetabr, schools.gsoffered FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.enroll12 > 800 AND satscores.rtype = 'S' AND satscores.dname = 'Alameda Unified' AND satscores.sname = 'FAME Public Charter';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable satscores , columns = [ satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) ]\ntable schools , columns = [ schools.closeddate ( date | values : 2015-07-31 , 2015-06-30 ) , schools.school ( text | values : FAME Public Charter ) , schools.opendate ( date | values : 2005-08-29 , 2006-08-28 ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.virtual ( text | values : P , N ) , schools.soc ( text | comment : school ownership code | values : 65 , 66 ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`charter school number` ( text | values : 0728 , 0811 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district name` ( text ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhat is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.\n", "response": "SELECT avg(satscores.avgscrwrite) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.opendate > '1991-01-01' AND schools.closeddate < '2000-01-01';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) , schools.fundingtype ( text | values : Directly funded , Locally funded ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.doc ( text | comment : district ownership code | values : 00 , 31 ) ]\ntable frpm , columns = [ frpm.`enrollment (k-12)` ( real | values : 1087.0 , 395.0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`charter funding type` ( text | values : Directly funded , Locally funded ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`district type` ( text | values : State Special Schools ) ]\ntable satscores , columns = [ satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.rtype ( text | values : D , S ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.fundingtype ( Locally funded )\nfrpm.`charter funding type` ( Locally funded )\nConsider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.\n", "response": "SELECT schools.school, frpm.`enrollment (k-12)` - frpm.`enrollment (15-17)` FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.fundingtype = 'Locally funded';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.opendate ( date | values : 2005-08-29 , 2006-08-28 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.closeddate ( date | values : 2015-07-31 , 2015-06-30 ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) ]\ntable satscores , columns = [ satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.rtype ( text | values : D , S ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`enrollment (k-12)` ( real | values : 1087.0 , 395.0 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`academic year` ( text | values : 2014-2015 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhen did the first-through-twelfth-grade school with the largest enrollment open?\n", "response": "SELECT schools.opendate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`academic year` = '2014-2015' ORDER BY frpm.`enrollment (k-12)` DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.city ( text | values : Hayward , Newark ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) ]\ntable frpm , columns = [ frpm.`enrollment (k-12)` ( real | values : 1087.0 , 395.0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`enrollment (ages 5-17)` ( real | values : 1070.0 , 376.0 ) , frpm.`frpm count (k-12)` ( real | values : 715.0 , 186.0 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) ]\ntable satscores , columns = [ satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.gsserved ( 12 , 5 )\nschools.gsoffered ( 12 , 5 )\nfrpm.`county code` ( 12 )\nsatscores.enroll12 ( 12 , 5 , 1 )\nsatscores.numtsttakr ( 12 , 5 , 1 )\nWhich cities have the top 5 lowest enrollment number for students in grades 1 through 12?\n", "response": "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`enrollment (k-12)` IS NOT NULL ORDER BY frpm.`enrollment (k-12)` LIMIT 5;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`percent (%) eligible free (k-12)` ( real | values : 0.519779208831647 , 0.470886075949367 ) , frpm.`enrollment (k-12)` ( real | values : 1087.0 , 395.0 ) , frpm.`frpm count (k-12)` ( real | values : 715.0 , 186.0 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) ]\ntable satscores , columns = [ satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.gsoffered ( 12 )\nschools.gsserved ( 12 )\nsatscores.enroll12 ( 12 )\nsatscores.numtsttakr ( 12 )\nWhat is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?\n", "response": "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.dname = 'Alameda Unified' AND satscores.sname = 'FAME Public Charter' AND satscores.cname = 'Alameda' AND satscores.enroll12 = ( SELECT max(satscores.enroll12) FROM satscores WHERE satscores.dname = 'Alameda Unified' AND satscores.sname = 'FAME Public Charter' AND satscores.cname = 'Alameda' );\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.doc ( text | comment : district ownership code | values : 00 , 31 ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`free meal count (k-12)` ( real | values : 565.0 , 186.0 ) , frpm.`frpm count (k-12)` ( real | values : 715.0 , 186.0 ) , frpm.`percent (%) eligible free (k-12)` ( real | values : 0.519779208831647 , 0.470886075949367 ) , frpm.`percent (%) eligible frpm (k-12)` ( real | values : 0.657773689052438 , 0.470886075949367 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.gsoffered ( 1-12 , 5 )\nschools.gsserved ( 1-12 , 5 )\nsatscores.enroll12 ( 66 , 5 )\nsatscores.numge1500 ( 66 , 5 )\nWhat is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?\n", "response": "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.gsoffered = '1-12' AND schools.gsserved = '1-12' AND schools.doc = '66' ORDER BY frpm.`percent (%) eligible free (k-12)` DESC LIMIT 5;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.website ( text | values : www.acoe.org , www.envisionacademy.org/ ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.`free meal count (ages 5-17)` ( real | values : 553.0 , 182.0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`free meal count (k-12)` ( real | values : 565.0 , 186.0 ) , frpm.`frpm count (ages 5-17)` ( real | values : 702.0 , 182.0 ) , frpm.`frpm count (k-12)` ( real | values : 715.0 , 186.0 ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nIf there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.\n", "response": "SELECT schools.website FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.admfname1 ( text | comment : administrator's first name 1 | values : L Karen , Laura ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`free meal count (ages 5-17)` ( real | values : 553.0 , 182.0 ) , frpm.`enrollment (ages 5-17)` ( real | values : 1070.0 , 376.0 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`frpm count (k-12)` ( real | values : 715.0 , 186.0 ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.admfname1 ( Kacey )\nschools.gsoffered ( 5 )\nschools.gsserved ( 5 )\nsatscores.numge1500 ( 17 , 5 )\nsatscores.enroll12 ( 17 , 5 )\nWhat is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?\n", "response": "SELECT frpm.`free meal count (ages 5-17)` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.sname = 'FAME Public Charter';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.charter ( integer | values : 1 , 0 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.admemail1 ( text | comment : administrator's email address 1 | values : lkmonroe@acoe.org , laura@envisionacademy.org ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) ]\ntable frpm , columns = [ frpm.`enrollment (k-12)` ( real | values : 1087.0 , 395.0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`charter school number` ( text | values : 0728 , 0811 ) , frpm.`charter school (y/n)` ( integer | values : 1 , 0 ) , frpm.`frpm count (k-12)` ( real | values : 715.0 , 186.0 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\ntable satscores , columns = [ satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.charter ( 1 )\nschools.gsoffered ( 12 )\nschools.gsserved ( 12 )\nfrpm.`charter school (y/n)` ( 1 )\nsatscores.enroll12 ( 12 , 1 )\nsatscores.numtsttakr ( 12 , 1 )\nWhat is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?\n", "response": "SELECT schools.admemail1 FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode GROUP BY schools.admemail1 ORDER BY sum(frpm.`enrollment (k-12)`) LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.admfname1 ( text | comment : administrator's first name 1 | values : L Karen , Laura ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.district ( text ) , schools.admfname2 ( text | comment : administrator's first name 2 | values : Sau-Lim (Lance) , Jennifer ) , schools.school ( text | values : FAME Public Charter ) , schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) ]\ntable satscores , columns = [ satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\ntable frpm , columns = [ frpm.`district name` ( text ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nsatscores.numtsttakr ( 1500 )\nUnder whose administration does the school with the highest number of test takers whose total SAT Scores are greater or equal to 1500 belong to? Indicate his or her full name.\n", "response": "SELECT admfname1, admfname2 FROM schools WHERE numtsttakr = ( SELECT max(numtsttakr) FROM schools WHERE numtsttakr >= 1500 );\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.streetabr ( text | comment : street address | values : 313 West Winton Ave. ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.street ( text | values : 313 West Winton Avenue ) , schools.eilcode ( text | comment : educational instruction level code | values : ELEMHIGH , HS ) ]\ntable satscores , columns = [ satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.irc ( integer | values : 1 , 0 ) , frpm.`low grade` ( text | values : K , 9 ) , frpm.`high grade` ( text | values : 12 , 8 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhat is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.\n", "response": "SELECT schools.street, schools.city, schools.zip, schools.state FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.rtype = 'D' ORDER BY satscores.avgscrread DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.website ( text | values : www.acoe.org , www.envisionacademy.org/ ) , schools.county ( text | values : Alameda , Alpine ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.school ( text | values : FAME Public Charter ) ]\ntable satscores , columns = [ satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) ]\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`district name` ( text ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.county ( Los Angeles )\nschools.school ( Los Angeles County ROP )\nsatscores.cname ( Los Angeles )\nfrpm.`county name` ( Los Angeles )\nWhat are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?\n", "response": "SELECT schools.website FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr BETWEEN 2000 AND 3000;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.opendate ( date | values : 2005-08-29 , 2006-08-28 ) , schools.city ( text | values : Hayward , Newark ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.closeddate ( date | values : 2015-07-31 , 2015-06-30 ) , schools.school ( text | values : FAME Public Charter ) ]\ntable satscores , columns = [ satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district name` ( text ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.city ( Fresno )\nWhat is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?\n", "response": "SELECT avg(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.sname = schools.school WHERE schools.opendate BETWEEN '1980-01-01' AND '1980-12-31';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.phone ( text | values : (510) 887-0152 , (510) 596-8901 ) , schools.district ( text ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable satscores , columns = [ satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) ]\ntable frpm , columns = [ frpm.`district name` ( text ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.district ( Fresno Unified )\nsatscores.dname ( Fresno Unified )\nsatscores.cname ( Fresno )\nfrpm.`district name` ( Fresno Unified )\nfrpm.`county name` ( Fresno )\nWhat is the telephone number for the school with the lowest average score in reading in Fresno Unified?\n", "response": "SELECT schools.phone FROM satscores INNER JOIN schools ON satscores.sname = schools.school WHERE satscores.dname = 'Fresno Unified' ORDER BY satscores.avgscrread LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.virtual ( text | values : P , N ) , schools.charternum ( text | values : 0728 , 0811 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.charter ( integer | values : 1 , 0 ) , schools.school ( text | values : FAME Public Charter ) ]\ntable satscores , columns = [ satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) ]\ntable frpm , columns = [ frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district type` ( text | values : State Special Schools ) , frpm.`district name` ( text ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhich exclusively virtual schools have the top 5 highest average reading scores?\n", "response": "SELECT DISTINCT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.virtual = 'P' ORDER BY satscores.avgscrread DESC LIMIT 5;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable satscores , columns = [ satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.rtype ( text | values : D , S ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) ]\ntable schools , columns = [ schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.eilname ( text | comment : educational instruction level name | values : High School ) , schools.school ( text | values : FAME Public Charter ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.eilcode ( text | comment : educational instruction level code | values : ELEMHIGH , HS ) ]\ntable frpm , columns = [ frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district type` ( text | values : State Special Schools ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhat is the type of education offered in the school who scored the highest average in Math?\n", "response": "SELECT frpm.`educational option type` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.rtype = 'S' ORDER BY satscores.avgscrmath DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable satscores , columns = [ satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) ]\ntable schools , columns = [ schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.county ( text | values : Alameda , Alpine ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.school ( text | values : FAME Public Charter ) ]\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`district code` ( integer | values : 10017 , 31609 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhat is the average math score of the school with the lowest average score for all subjects, and in which county is it located?\n", "response": "SELECT avg(satscores.avgscrmath), schools.county FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.county ORDER BY avg(satscores.avgscrmath) LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.city ( text | values : Hayward , Newark ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) , schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) ]\ntable satscores , columns = [ satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district name` ( text ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.school ( The City )\nsatscores.numtsttakr ( 1500 )\nWhat is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.\n", "response": "SELECT avg(satscores.avgscrwrite), schools.city FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode GROUP BY schools.city ORDER BY avg(satscores.avgscrwrite) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.admfname1 ( text | comment : administrator's first name 1 | values : L Karen , Laura ) , schools.school ( text | values : FAME Public Charter ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.admlname1 ( text | comment : administrator's last name 1 | values : Monroe , Robell ) , schools.admfname2 ( text | comment : administrator's first name 2 | values : Sau-Lim (Lance) , Jennifer ) , schools.admfname3 ( text | comment : administrator's first name 3 | values : Drew , Irma ) ]\ntable satscores , columns = [ satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district name` ( text ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`district code` ( integer | values : 10017 , 31609 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.admfname1 ( Ricci )\nschools.admlname1 ( Ulrich )\nWhat is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.\n", "response": "SELECT satscores.sname, satscores.avgscrwrite FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.`school name` = 'FAME Public Charter';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.state ( text | values : CA ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.statustype ( text | values : Active , Closed ) ]\ntable frpm , columns = [ frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.`enrollment (k-12)` ( real | values : 1087.0 , 395.0 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) ]\ntable satscores , columns = [ satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.gsoffered ( 12 )\nschools.edopsname ( State Special School )\nschools.gsserved ( 12 )\nfrpm.`school type` ( State Special Schools )\nfrpm.`educational option type` ( State Special School )\nsatscores.enroll12 ( 12 , 1 )\nWhich state special schools have the highest number of enrollees from grades 1 through 12?\n", "response": "SELECT frpm.`school type` FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE satscores.rtype = 'D' GROUP BY frpm.`school type` ORDER BY count(frpm.`school type`) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.opendate ( date | values : 2005-08-29 , 2006-08-28 ) , schools.county ( text | values : Alameda , Alpine ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.district ( text ) , schools.school ( text | values : FAME Public Charter ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`academic year` ( text | values : 2014-2015 ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.county ( Alameda )\nfrpm.`county name` ( Alameda )\nsatscores.cname ( Alameda )\nWhat is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?\n", "response": "SELECT cast(sum(satscores.numtsttakr) AS REAL) / 12 FROM satscores INNER JOIN frpm ON satscores.cds = frpm.cdscode WHERE frpm.`county name` = 'Alameda' AND frpm.`district code` = '10017' AND frpm.`academic year` = '1980' AND frpm.`school code` = '0109835';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`district type` ( text | values : State Special Schools ) , frpm.`district name` ( text ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) ]\ntable schools , columns = [ schools.district ( text ) , schools.county ( text | values : Alameda , Alpine ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.school ( text | values : FAME Public Charter ) , schools.state ( text | values : CA ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.rtype ( text | values : D , S ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nfrpm.`county name` ( Orange )\nfrpm.`district type` ( Unified School District )\nschools.county ( Orange )\nsatscores.cname ( Orange )\nWhat is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?\n", "response": "SELECT cast(sum(CASE WHEN schools.county = 'Orange' THEN 1 ELSE 0 END) AS REAL) / cast(sum(CASE WHEN schools.county = 'Elementary' THEN 1 ELSE 0 END) AS REAL) FROM schools WHERE schools.county = 'Orange';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.closeddate ( date | values : 2015-07-31 , 2015-06-30 ) , schools.county ( text | values : Alameda , Alpine ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) ]\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district name` ( text ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhich different county has the most number of closed schools? Please provide the name of each school as well as the closure date.\n", "response": "SELECT DISTINCT schools.county, schools.closeddate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode GROUP BY schools.county, schools.closeddate ORDER BY count(schools.closeddate) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.streetabr ( text | comment : street address | values : 313 West Winton Ave. ) , schools.mailstrabr ( text | comment : mailing street address | values : 313 West Winton Ave. ) ]\ntable satscores , columns = [ satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district name` ( text ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhat is the postal street address for the school with the 6th highest Math average? Indicate the school's name.\n", "response": "SELECT schools.streetabr FROM schools INNER JOIN satscores ON schools.school = satscores.sname WHERE satscores.avgscrmath = 6 ORDER BY satscores.avgscrmath DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable satscores , columns = [ satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\ntable schools , columns = [ schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.school ( text | values : FAME Public Charter ) , schools.mailstrabr ( text | comment : mailing street address | values : 313 West Winton Ave. ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district name` ( text ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nIn which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.\n", "response": "SELECT schools.school, satscores.avgscrread FROM satscores INNER JOIN schools ON satscores.sname = schools.school WHERE satscores.avgscrread = ( SELECT min(avgscrread) FROM satscores );\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.mailcity ( text | comment : mailing city | values : Hayward , Newark ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) ]\ntable satscores , columns = [ satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`district name` ( text ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.mailcity ( Lakeport )\nsatscores.numtsttakr ( 1500 )\nWhat is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?\n", "response": "SELECT count(DISTINCT schools.school) FROM schools INNER JOIN satscores ON schools.school = satscores.sname WHERE satscores.numge1500 >= 1500 AND schools.mailcity = 'Lakeport';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.mailcity ( text | comment : mailing city | values : Hayward , Newark ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.city ( text | values : Hayward , Newark ) , schools.school ( text | values : FAME Public Charter ) ]\ntable satscores , columns = [ satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.rtype ( text | values : D , S ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`district name` ( text ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.mailcity ( Fresno )\nschools.city ( Fresno )\nfrpm.`county name` ( Fresno )\nHow many test takers are there at the school/s whose mailing city address is in Fresno?\n", "response": "SELECT count(satscores.numtsttakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.cdscode WHERE schools.mailcity = 'Fresno';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.admfname1 ( text | comment : administrator's first name 1 | values : L Karen , Laura ) , schools.mailzip ( text | comment : mailing zip | values : 94544-1136 , 94560-5359 ) , schools.school ( text | values : FAME Public Charter ) , schools.admlname1 ( text | comment : administrator's last name 1 | values : Monroe , Robell ) , schools.admfname2 ( text | comment : administrator's first name 2 | values : Sau-Lim (Lance) , Jennifer ) , schools.admfname3 ( text | comment : administrator's first name 3 | values : Drew , Irma ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district name` ( text ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.admfname1 ( Avetik )\nschools.admlname1 ( Administration , Atoian )\nschools.admfname2 ( Avetik )\nPlease specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.\n", "response": "SELECT schools.school, schools.mailzip FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Avetik' AND schools.admlname1 = 'Atoian';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.mailstate ( text | comment : mailing state | values : CA ) , schools.state ( text | values : CA ) , schools.county ( text | values : Alameda , Alpine ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) , schools.school ( text | values : FAME Public Charter ) ]\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.county ( Humboldt , Colusa )\nfrpm.`county name` ( Humboldt , Colusa )\nsatscores.cname ( Humboldt , Colusa )\nOf the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?\n", "response": "SELECT cast(count(CASE WHEN schools.mailstate = 'CA' THEN schools.school ELSE NULL END) AS REAL) * 100 / count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'Colusa';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.mailstate ( text | comment : mailing state | values : CA ) , schools.state ( text | values : CA ) , schools.charter ( integer | values : 1 , 0 ) , schools.county ( text | values : Alameda , Alpine ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) ]\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`charter school (y/n)` ( integer | values : 1 , 0 ) , frpm.`charter school number` ( text | values : 0728 , 0811 ) , frpm.`school name` ( text | values : FAME Public Charter ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.rtype ( text | values : D , S ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.county ( San Joaquin )\nfrpm.`county name` ( San Joaquin )\nsatscores.cname ( San Joaquin )\nOf all the schools with a mailing state address in California, how many are active in San Joaquin?\n", "response": "SELECT count(schools.charter) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailstate = 'CA' AND frpm.`county name` = 'San Joaquin';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.ext ( text | comment : extension | values : 130 , 1240 ) , schools.phone ( text | values : (510) 887-0152 , (510) 596-8901 ) , schools.school ( text | values : FAME Public Charter ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) ]\ntable satscores , columns = [ satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.avgscrread ( integer | comment : average scores in reading | values : 418 , 503 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`district name` ( text ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhat is the phone number and extension number for the school that had the 333rd highest average writing score?\n", "response": "SELECT schools.phone, schools.ext FROM satscores INNER JOIN schools ON satscores.sname = schools.school ORDER BY satscores.avgscrwrite DESC LIMIT 1 OFFSET 333;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.ext ( text | comment : extension | values : 130 , 1240 ) , schools.phone ( text | values : (510) 887-0152 , (510) 596-8901 ) , schools.school ( text | values : FAME Public Charter ) , schools.zip ( text | values : 94544-1136 , 94560-5359 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district name` ( text ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.zip ( 95203-3704 )\nWhat is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.\n", "response": "SELECT schools.phone, schools.ext, schools.school FROM schools WHERE schools.zip = '95203-3704';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.admfname1 ( text | comment : administrator's first name 1 | values : L Karen , Laura ) , schools.website ( text | values : www.acoe.org , www.envisionacademy.org/ ) , schools.admfname2 ( text | comment : administrator's first name 2 | values : Sau-Lim (Lance) , Jennifer ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.admfname3 ( text | comment : administrator's first name 3 | values : Drew , Irma ) , schools.admlname1 ( text | comment : administrator's last name 1 | values : Monroe , Robell ) ]\ntable frpm , columns = [ frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`district name` ( text ) , frpm.`county code` ( text | values : 01 , 02 ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.admfname1 ( MIke , Mike , Dante )\nschools.admfname2 ( Mike )\nschools.admlname1 ( Alvarez , Larson , Administration )\nWhat is the website for the schools under the administrations of Mike Larson and Dante Alvarez?\n", "response": "SELECT schools.website FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Mike' AND schools.admfname2 = 'Dante' AND schools.admlname1 = 'Administration';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.website ( text | values : www.acoe.org , www.envisionacademy.org/ ) , schools.charter ( integer | values : 1 , 0 ) , schools.virtual ( text | values : P , N ) , schools.county ( text | values : Alameda , Alpine ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.charternum ( text | values : 0728 , 0811 ) ]\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`charter funding type` ( text | values : Directly funded , Locally funded ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.rtype ( text | values : D , S ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.county ( San Joaquin )\nfrpm.`county name` ( San Joaquin )\nsatscores.cname ( San Joaquin )\nWhat are the websites for all the partially virtual chartered schools located in San Joaquin?\n", "response": "SELECT DISTINCT schools.website FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`county name` = 'San Joaquin' AND schools.virtual = 'P';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.charter ( integer | values : 1 , 0 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.city ( text | values : Hayward , Newark ) , schools.virtual ( text | values : P , N ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.doc ( text | comment : district ownership code | values : 00 , 31 ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`charter school number` ( text | values : 0728 , 0811 ) , frpm.`district name` ( text ) , frpm.`charter school (y/n)` ( integer | values : 1 , 0 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.rtype ( text | values : D , S ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.city ( Hickman )\nHow many chartered schools located in the city of Hickman are owned by the Elementary School District?\n", "response": "SELECT count(frpm.cdscode) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.city = 'Hickman' AND schools.edopsname = 'Elementary School District';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) , schools.charter ( integer | values : 1 , 0 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.county ( text | values : Alameda , Alpine ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) ]\ntable frpm , columns = [ frpm.`percent (%) eligible free (k-12)` ( real | values : 0.519779208831647 , 0.470886075949367 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.rtype ( text | values : D , S ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.charter ( 1 )\nschools.gsoffered ( 12 )\nschools.county ( Los Angeles )\nfrpm.`county name` ( Los Angeles )\nfrpm.`county code` ( 12 )\nsatscores.cname ( Los Angeles )\nsatscores.enroll12 ( 12 , 1 )\nsatscores.numge1500 ( 12 , 1 )\nWhat is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?\n", "response": "SELECT count(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`percent (%) eligible free (k-12)` < 0.18;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.charter ( integer | values : 1 , 0 ) , schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) , schools.city ( text | values : Hayward , Newark ) , schools.admfname1 ( text | comment : administrator's first name 1 | values : L Karen , Laura ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) ]\ntable frpm , columns = [ frpm.`charter school number` ( text | values : 0728 , 0811 ) , frpm.`charter school (y/n)` ( integer | values : 1 , 0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.school ( The City )\nfrpm.`charter school number` ( 00D2 )\nIn chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs\n", "response": "SELECT schools.admfname1, schools.city FROM schools INNER JOIN frpm ON schools.school = frpm.`school name` WHERE frpm.`charter school number` = '00D2';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.mailcity ( text | comment : mailing city | values : Hayward , Newark ) , schools.charter ( integer | values : 1 , 0 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.city ( text | values : Hayward , Newark ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) ]\ntable frpm , columns = [ frpm.`charter school number` ( text | values : 0728 , 0811 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`charter school (y/n)` ( integer | values : 1 , 0 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.mailcity ( Hickman )\nschools.city ( Hickman )\nfrpm.`charter school number` ( 00D4 )\nWhat is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?\n", "response": "SELECT count(*) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.mailcity = 'Hickman' AND frpm.`charter school number` = '00D4';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.fundingtype ( text | values : Directly funded , Locally funded ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.county ( text | values : Alameda , Alpine ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.charter ( integer | values : 1 , 0 ) , schools.charternum ( text | values : 0728 , 0811 ) ]\ntable frpm , columns = [ frpm.`charter funding type` ( text | values : Directly funded , Locally funded ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.fundingtype ( Locally funded )\nschools.county ( Santa Clara )\nfrpm.`charter funding type` ( Locally funded )\nfrpm.`county name` ( Santa Clara )\nsatscores.cname ( Santa Clara )\nWhat is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?\n", "response": "SELECT cast(sum(CASE WHEN schools.fundingtype = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / count(schools.cdscode) FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.county = 'Santa Clara';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.fundingtype ( text | values : Directly funded , Locally funded ) , schools.opendate ( date | values : 2005-08-29 , 2006-08-28 ) , schools.county ( text | values : Alameda , Alpine ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.closeddate ( date | values : 2015-07-31 , 2015-06-30 ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`charter funding type` ( text | values : Directly funded , Locally funded ) , frpm.`academic year` ( text | values : 2014-2015 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.fundingtype ( Directly funded )\nschools.county ( Stanislaus )\nfrpm.`county name` ( Stanislaus )\nfrpm.`charter funding type` ( Directly funded )\nsatscores.cname ( Stanislaus )\nBetween 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?\n", "response": "SELECT count(*) FROM schools WHERE fundingtype = 'Directly funded' AND opendate BETWEEN '2000-01-01' AND '2005-12-31' AND county = 'Stanislaus';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.closeddate ( date | values : 2015-07-31 , 2015-06-30 ) , schools.city ( text | values : Hayward , Newark ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.district ( text ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.charternum ( text | values : 0728 , 0811 ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district name` ( text ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`district type` ( text | values : State Special Schools ) , frpm.`county code` ( text | values : 01 , 02 ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.avgscrwrite ( integer | comment : average scores in writing | values : 417 , 505 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nfrpm.`county name` ( San Francisco )\nsatscores.cname ( San Francisco )\nWhat is the total amount of Community College District closure in 1989 in the city of San Francisco?\n", "response": "SELECT sum(schools.closeddate) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.city = 'San Francisco' AND schools.edopsname = 'Traditional';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.closeddate ( date | values : 2015-07-31 , 2015-06-30 ) , schools.county ( text | values : Alameda , Alpine ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.doc ( text | comment : district ownership code | values : 00 , 31 ) , schools.soc ( text | comment : school ownership code | values : 65 , 66 ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`academic year` ( text | values : 2014-2015 ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhich county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)?\n", "response": "SELECT schools.county FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soc = '65' AND frpm.`academic year` = '2014-2015' GROUP BY schools.county ORDER BY count(*) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.ncesdist ( text | comment : national center for educational statistics school district identification number | values : 0691051 , 0600002 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.soc ( text | comment : school ownership code | values : 65 , 66 ) , schools.doc ( text | comment : district ownership code | values : 00 , 31 ) , schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) , schools.district ( text ) ]\ntable frpm , columns = [ frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`district type` ( text | values : State Special Schools ) , frpm.`nslp provision status` ( text | values : Breakfast Provision 2 , Provision 2 ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.soctype ( State Special Schools )\nfrpm.`school type` ( State Special Schools )\nfrpm.`district type` ( State Special Schools )\nPlease provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools.\n", "response": "SELECT DISTINCT schools.ncesdist FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.soctype = 'State Special Schools';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.closeddate ( date | values : 2015-07-31 , 2015-06-30 ) , schools.county ( text | values : Alameda , Alpine ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.opendate ( date | values : 2005-08-29 , 2006-08-28 ) , schools.virtual ( text | values : P , N ) ]\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district name` ( text ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.rtype ( text | values : D , S ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.edopsname ( Community Day School )\nschools.county ( Alpine )\nfrpm.`county name` ( Alpine )\nfrpm.`school name` ( Community Day )\nHow many active and closed District Community Day Schools are there in the county of Alpine?\n", "response": "SELECT count(schools.county) FROM schools WHERE schools.county = 'Alpine' AND schools.active = 'true';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.magnet ( integer | values : 0 , 1 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.city ( text | values : Hayward , Newark ) , schools.school ( text | values : FAME Public Charter ) , schools.district ( text ) ]\ntable frpm , columns = [ frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`district name` ( text ) ]\ntable satscores , columns = [ satscores.rtype ( text | values : D , S ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.city ( Fresno )\nschools.school ( The City )\nsatscores.cname ( Fresno )\nWhat is the district code for the School that does not offer a magnet program in the city of Fresno?\n", "response": "SELECT DISTINCT frpm.districtcode FROM frpm INNER JOIN schools ON frpm.schoolcode = schools.schoolcode WHERE schools.city = 'Fresno' AND frpm.magnet = 0;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) , schools.city ( text | values : Hayward , Newark ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.`academic year` ( text | values : 2014-2015 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`enrollment (ages 5-17)` ( real | values : 1070.0 , 376.0 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`district name` ( text ) , frpm.`enrollment (k-12)` ( real | values : 1087.0 , 395.0 ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.edopsname ( State Special School )\nschools.city ( Fremont )\nschools.gsoffered ( 5 )\nfrpm.`academic year` ( 2014-2015 )\nsatscores.enroll12 ( 17 , 5 )\nsatscores.numtsttakr ( 17 , 5 )\nHow many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?\n", "response": "SELECT count(frpm.`enrollment (ages 5-17)`) FROM frpm INNER JOIN satscores ON frpm.cdscode = satscores.cds WHERE frpm.`academic year` = '2014-2015' AND satscores.sname = 'FAME Public Charter' AND satscores.dname = 'Alameda Unified' AND satscores.cname = 'Alameda';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.school ( text | values : FAME Public Charter ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.streetabr ( text | comment : street address | values : 313 West Winton Ave. ) ]\ntable frpm , columns = [ frpm.`free meal count (ages 5-17)` ( real | values : 553.0 , 182.0 ) , frpm.`free meal count (k-12)` ( real | values : 565.0 , 186.0 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`enrollment (ages 5-17)` ( real | values : 1070.0 , 376.0 ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.avgscrmath ( integer | comment : average scores in math | values : 418 , 546 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.gsoffered ( 5 )\nschools.edopsname ( Youth Authority School )\nschools.gsserved ( 5 )\nsatscores.numge1500 ( 17 , 5 )\nWhat is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?\n", "response": "SELECT frpm.`free meal count (ages 5-17)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.school = 'Youth Authority School' AND schools.streetabr = 'PO Box 1040';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.ncesdist ( text | comment : national center for educational statistics school district identification number | values : 0691051 , 0600002 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.`low grade` ( text | values : K , 9 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`district name` ( text ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.school ( Special Education )\nfrpm.`school name` ( Special Education )\nWhat is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 613360?\n", "response": "SELECT frpm.`low grade` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.ncesdist = '613360' ORDER BY frpm.`low grade` ASC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.eilcode ( text | comment : educational instruction level code | values : ELEMHIGH , HS ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) , schools.eilname ( text | comment : educational instruction level name | values : High School ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) ]\ntable frpm , columns = [ frpm.`nslp provision status` ( text | values : Breakfast Provision 2 , Provision 2 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nfrpm.`nslp provision status` ( Breakfast Provision 2 , Provision 2 , Provision 3 )\nsatscores.numge1500 ( 37 , 2 )\nWhat is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.\n", "response": "SELECT schools.eilname FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`nslp provision status` = 'Breakfast Provision 2' AND schools.eilcode = '37';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.eilcode ( text | comment : educational instruction level code | values : ELEMHIGH , HS ) , schools.city ( text | values : Hayward , Newark ) , schools.county ( text | values : Alameda , Alpine ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) ]\ntable frpm , columns = [ frpm.`nslp provision status` ( text | values : Breakfast Provision 2 , Provision 2 ) , frpm.`high grade` ( text | values : 12 , 8 ) , frpm.`low grade` ( text | values : K , 9 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`county code` ( text | values : 01 , 02 ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.rtype ( text | values : D , S ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.city ( Merced )\nschools.county ( Merced )\nfrpm.`nslp provision status` ( Lunch Provision 2 , Provision 2 , Provision 3 )\nfrpm.`high grade` ( 12 , 2 , 9 )\nfrpm.`low grade` ( 12 , 2 , 9 )\nfrpm.`county name` ( Merced )\nfrpm.`county code` ( 12 )\nsatscores.cname ( Merced )\nsatscores.enroll12 ( 12 , 2 , 9 )\nWhat is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?\n", "response": "SELECT schools.city FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`nslp provision status` = 'Lunch Provision 2' AND frpm.`high grade` = 9 AND frpm.`low grade` = 12 AND frpm.`county name` = 'Merced';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.school ( text | values : FAME Public Charter ) , schools.county ( text | values : Alameda , Alpine ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`percent (%) eligible frpm (k-12)` ( real | values : 0.657773689052438 , 0.470886075949367 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.county ( Los Angeles )\nfrpm.`county name` ( Los Angeles )\nsatscores.cname ( Los Angeles )\nWhich schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?\n", "response": "SELECT schools.school, schools.gsserved, frpm.`percent (%) eligible frpm (k-12)`, satscores.enroll12 FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE schools.county = 'Los Angeles' AND schools.gsserved = 'Kindergarten to 9th grade';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) , schools.city ( text | values : Hayward , Newark ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.school ( text | values : FAME Public Charter ) , schools.statustype ( text | values : Active , Closed ) ]\ntable satscores , columns = [ satscores.rtype ( text | values : D , S ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`high grade` ( text | values : 12 , 8 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`low grade` ( text | values : K , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.city ( Adelanto )\nschools.school ( The City )\nWhat is the most common type of grade span served in the city of Adelanto?\n", "response": "SELECT schools.gsserved FROM schools WHERE schools.city = 'Adelanto' GROUP BY schools.gsserved ORDER BY count(schools.gsserved) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.county ( text | values : Alameda , Alpine ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.state ( text | values : CA ) , schools.school ( text | values : FAME Public Charter ) ]\ntable frpm , columns = [ frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county code` ( text | values : 01 , 02 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.county ( Santa Barbara , San Diego )\nfrpm.`county name` ( Santa Barbara , San Diego )\nsatscores.cname ( Santa Barbara , San Diego )\nBetween San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.\n", "response": "SELECT county , SUM(numge1500) FROM satscores WHERE dname = 'San Diego' AND sname = 'FAME Public Charter' GROUP BY county ORDER BY SUM(numge1500) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.school ( text | values : FAME Public Charter ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) ]\ntable frpm , columns = [ frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district type` ( text | values : State Special Schools ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.rtype ( text | values : D , S ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhat is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.\n", "response": "SELECT schools.school, schools.latitude FROM schools ORDER BY schools.latitude DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.latitude ( real | values : 37.658212 , 37.521436 ) , schools.state ( text | values : CA ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.city ( text | values : Hayward , Newark ) , schools.school ( text | values : FAME Public Charter ) , schools.longitude ( real | values : -122.09713 , -121.99391 ) ]\ntable frpm , columns = [ frpm.`low grade` ( text | values : K , 9 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`nslp provision status` ( text | values : Breakfast Provision 2 , Provision 2 ) , frpm.`district name` ( text ) ]\ntable satscores , columns = [ satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.rtype ( text | values : D , S ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nIn which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.\n", "response": "SELECT schools.city FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.state = 'CA' AND schools.latitude = ( SELECT min(schools.latitude) FROM schools WHERE schools.state = 'CA' ) AND frpm.`low grade` = 'K';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.longitude ( real | values : -122.09713 , -121.99391 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) , schools.statustype ( text | values : Active , Closed ) , schools.state ( text | values : CA ) ]\ntable frpm , columns = [ frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`high grade` ( text | values : 12 , 8 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`low grade` ( text | values : K , 9 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.irc ( integer | values : 1 , 0 ) ]\ntable satscores , columns = [ satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.rtype ( text | values : D , S ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhat is the grade span offered in the school with the highest longitude?\n", "response": "SELECT gsoffered FROM schools ORDER BY longitude DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.magnet ( integer | values : 0 , 1 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.city ( text | values : Hayward , Newark ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.school ( text | values : FAME Public Charter ) , schools.gsserved ( text | comment : grade span served. | values : K-12 , 9-12 ) ]\ntable frpm , columns = [ frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.`nslp provision status` ( text | values : Breakfast Provision 2 , Provision 2 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) ]\ntable satscores , columns = [ satscores.rtype ( text | values : D , S ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nfrpm.`nslp provision status` ( Multiple Provision Types , Provision 3 )\nOf the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.\n", "response": "SELECT schools.city, count(schools.school) FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode WHERE frpm.`educational option type` = 'Kindergarten to 8th grade' GROUP BY schools.city;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.admfname1 ( text | comment : administrator's first name 1 | values : L Karen , Laura ) , schools.district ( text ) , schools.admfname2 ( text | comment : administrator's first name 2 | values : Sau-Lim (Lance) , Jennifer ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.admfname3 ( text | comment : administrator's first name 3 | values : Drew , Irma ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) ]\ntable frpm , columns = [ frpm.`district name` ( text ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`county name` ( text | values : Alameda , Alpine ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents : None\nWhat are the two most common first names among the school administrators? Indicate the district to which they administer.\n", "response": "SELECT admfname1, admfname2 FROM schools GROUP BY admfname1, admfname2 ORDER BY count(*) DESC LIMIT 2;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.admfname1 ( text | comment : administrator's first name 1 | values : L Karen , Laura ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.gsoffered ( text | comment : grade span offered | values : K-12 , 9-12 ) , schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) , schools.district ( text ) , schools.admfname2 ( text | comment : administrator's first name 2 | values : Sau-Lim (Lance) , Jennifer ) ]\ntable frpm , columns = [ frpm.`percent (%) eligible free (k-12)` ( real | values : 0.519779208831647 , 0.470886075949367 ) , frpm.`district code` ( integer | values : 10017 , 31609 ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district name` ( text ) , frpm.`percent (%) eligible frpm (k-12)` ( real | values : 0.657773689052438 , 0.470886075949367 ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.admfname1 ( Alusine )\nschools.gsoffered ( K-12 )\nWhat is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.\n", "response": "SELECT frpm.`percent (%) eligible free (k-12)` FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.admfname1 = 'Alusine';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.charter ( integer | values : 1 , 0 ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) , schools.lastupdate ( date | values : 2015-06-23 , 2015-09-01 ) , schools.edopscode ( text | comment : education option code | values : TRAD , JUV ) , schools.county ( text | values : Alameda , Alpine ) , schools.latitude ( real | values : 37.658212 , 37.521436 ) ]\ntable frpm , columns = [ frpm.`charter school number` ( text | values : 0728 , 0811 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`district name` ( text ) , frpm.`school name` ( text | values : FAME Public Charter ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county code` ( text | values : 01 , 02 ) ]\ntable satscores , columns = [ satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nfrpm.`county code` ( 40 )\nsatscores.numge1500 ( 40 )\nsatscores.enroll12 ( 40 )\nWhat is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.\n", "response": "SELECT schools.edopsname, district.county, schools.lastupdate FROM schools INNER JOIN frpm ON schools.cdscode = frpm.cdscode INNER JOIN satscores ON frpm.sname = satscores.sname INNER JOIN district ON satscores.dname = district.dname WHERE frpm.`charter school number` = 40;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.doctype ( text | comment : the district ownership code type | values : State Special Schools ) , schools.admemail1 ( text | comment : administrator's email address 1 | values : lkmonroe@acoe.org , laura@envisionacademy.org ) , schools.district ( text ) , schools.opendate ( date | values : 2005-08-29 , 2006-08-28 ) , schools.county ( text | values : Alameda , Alpine ) , schools.soc ( text | comment : school ownership code | values : 65 , 66 ) ]\ntable frpm , columns = [ frpm.`district type` ( text | values : State Special Schools ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`district name` ( text ) , frpm.`educational option type` ( text | values : Traditional , Juvenile Court School ) , frpm.`school name` ( text | values : FAME Public Charter ) ]\ntable satscores , columns = [ satscores.cname ( text | comment : county name | values : Alameda , Amador ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.enroll12 ( integer | comment : enrollment (1st-12nd grade) | values : 398 , 62 ) , satscores.rtype ( text | values : D , S ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nschools.district ( San Bernardino County ROP )\nschools.county ( San Bernardino )\nfrpm.`county name` ( San Bernardino )\nsatscores.cname ( San Bernardino )\nWhat is the e-mail address of the administrator of the school located in the San Bernardino county, District of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Scools?\n", "response": "SELECT emailaddress.emailaddress FROM emailaddress INNER JOIN frpm ON emailaddress.admemail1 = frpm.admemail1 WHERE frpm.`school type` = 'K-12 Schools (Public)' AND frpm.`county name` = 'San Bernardino' AND frpm.`district name` = 'San Bernardino City Unified' AND frpm.`educational option type` = 'Intermediate/Middle Schools' AND frpm.`school name` = 'FAME Public Charter' AND frpm.`district type` = 'State Special Schools' AND schools.opendate BETWEEN '2009-01-01' AND '2010-12-31';\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable schools , columns = [ schools.admemail1 ( text | comment : administrator's email address 1 | values : lkmonroe@acoe.org , laura@envisionacademy.org ) , schools.school ( text | values : FAME Public Charter ) , schools.cdscode ( text | primary key | values : 01100170000000 , 01100170109835 ) , schools.soctype ( text | comment : school ownership code type | values : K-12 Schools (Public) , High Schools (Public) ) , schools.admemail2 ( text | comment : administrator's email address 2 | values : stsang@unityhigh.org , jkoelling@efcps.net ) , schools.edopsname ( text | comment : educational option name | values : Traditional , Juvenile Court School ) ]\ntable satscores , columns = [ satscores.numge1500 ( integer | comment : number of test takers whose total sat scores are greater or equal to 1500 | values : 14 , 9 ) , satscores.sname ( text | comment : school name | values : FAME Public Charter ) , satscores.numtsttakr ( integer | comment : number of test takers | values : 88 , 17 ) , satscores.cds ( text | primary key | values : 10101080000000 , 10101080109991 ) , satscores.dname ( text | comment : district name | values : Alameda Unified ) , satscores.cname ( text | comment : county name | values : Alameda , Amador ) ]\ntable frpm , columns = [ frpm.`school name` ( text | values : FAME Public Charter ) , frpm.`school code` ( text | values : 0109835 , 0112607 ) , frpm.`district name` ( text ) , frpm.cdscode ( text | primary key | values : 01100170109835 , 01100170112607 ) , frpm.`county name` ( text | values : Alameda , Alpine ) , frpm.`school type` ( text | values : K-12 Schools (Public) , High Schools (Public) ) ]\nforeign keys :\nfrpm.cdscode = schools.cdscode\nsatscores.cds = schools.cdscode\nmatched contents :\nsatscores.numtsttakr ( 1500 )\nWhat is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.\n", "response": "SELECT schools.school FROM satscores INNER JOIN schools ON satscores.sname = schools.school ORDER BY satscores.numge1500 DESC LIMIT 1;\t", "n_examples": 0, "db_id": "california_schools"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a8 ( integer | comment : no. of municipalities with inhabitants > 10000 | values : 1 , 2 ) ]\ntable card , columns = [ card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.type ( text | values : gold , classic ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nmatched contents :\ndistrict.a3 ( east Bohemia )\nHow many accounts who choose issuance after transaction are staying in East Bohemia region?\n", "response": "SELECT count(account.account_id) FROM account INNER JOIN card ON account.account_id = card.account_id INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE account.frequency = 'POPLATEK MESICNE' AND district.a3 = 'east Bohemia';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\ndistrict.a3 ( Prague )\nHow many accounts who have region in Prague are eligible for loans?\n", "response": "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.district_id = 18 AND loan.status = 'A';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.a12 ( real | comment : unemployment rate 1995 | values : 0.2 , 1.6 ) , district.a13 ( real | comment : unemployment rate 1996 | values : 0.43 , 1.85 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a15 ( integer | comment : no. of committed crimes 1995 | values : 85677 , 2159 ) , district.a14 ( integer | comment : no. of entrepreneurs per 1000 inhabitants | values : 167 , 132 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.account_id ( integer | primary key | values : 1 , 2 ) ]\ntable trans , columns = [ trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) ]\ntable order , columns = [ order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.account_id ( integer | values : 1 , 2 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\ntable disp , columns = [ disp.type ( text | values : OWNER , DISPONENT ) , disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\nforeign keys :\naccount.district_id = district.district_id\ndisp.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1995 , 1996 )\ntrans.account_id ( 1995 , 1996 )\ntrans.trans_id ( 1996 )\norder.account_id ( 1995 , 1996 )\ndisp.client_id ( 1995 , 1996 )\ndisp.account_id ( 1995 , 1996 )\ndisp.disp_id ( 1995 , 1996 )\nThe average unemployment ratio of 1995 and 1996, which one has higher percentage?\n", "response": "SELECT district.a12 FROM district ORDER BY district.a12 DESC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a8 ( integer | comment : no. of municipalities with inhabitants > 10000 | values : 1 , 2 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a9 ( integer | values : 1 , 5 ) ]\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.trans_id ( 10000 )\nList out the no. of districts that have female average salary is more than 6000 but less than 10000?\n", "response": "SELECT count(DISTINCT district.district_id) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a11 > 6000 AND district.a11 < 10000 AND district.a11 > ( SELECT avg(a11) FROM district );\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a9 ( integer | values : 1 , 5 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ndistrict.a3 ( north Bohemia )\ntrans.trans_id ( 8000 )\nHow many male customers who are living in North Bohemia have average salary greater than 8000?\n", "response": "SELECT count(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'north Bohemia' AND client.gender = 'M' AND district.a11 > 8000;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable district , columns = [ district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.a9 ( integer | values : 1 , 5 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a12 ( real | comment : unemployment rate 1995 | values : 0.2 , 1.6 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nList out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?\n", "response": "SELECT account.account_id FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.gender = 'F' AND client.birth_date = ( SELECT MIN(birth_date) FROM client WHERE gender = 'F' ) AND account.a12 = ( SELECT MAX(a12) FROM account WHERE district_id = 18 );\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.gender ( text | values : F , M ) ]\ntable district , columns = [ district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a9 ( integer | values : 1 , 5 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a10 ( real | comment : ratio of urban inhabitants | values : 100.0 , 46.7 ) , district.a14 ( integer | comment : no. of entrepreneurs per 1000 inhabitants | values : 167 , 132 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nList out the account numbers of clients who are youngest and have highest average salary?\n", "response": "SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.birth_date = ( SELECT max(birth_date) FROM client ) AND district.a11 = ( SELECT max(a11) FROM district );\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.type ( text | values : gold , classic ) ]\ntable disp , columns = [ disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.a9 ( integer | values : 1 , 5 ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nmatched contents :\ndisp.type ( OWNER )\nHow many customers who choose statement of weekly issuance are Owner?\n", "response": "SELECT count(client_id) FROM client WHERE gender = 'M' AND district_id = 18 AND birth_date > '1970-12-13';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable disp , columns = [ disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.account_id ( integer | values : 1 , 2 ) ]\ntable card , columns = [ card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable trans , columns = [ trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.balance ( integer | comment : balance after transaction | values : 1000 , 4679 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ndisp.type ( DISPONENT )\nList out the clients who choose statement of issuance after transaction are Disponent?\n", "response": "SELECT client.client_id FROM client INNER JOIN trans ON client.client_id = trans.account_id WHERE trans.type = 'VYDAJ';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.amount ( integer | values : 80952 , 30276 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.status ( text | values : A , B ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable card , columns = [ card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) ]\ntable district , columns = [ district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a12 ( real | comment : unemployment rate 1995 | values : 0.2 , 1.6 ) , district.a9 ( integer | values : 1 , 5 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1997 )\ndisp.account_id ( 1997 )\ndisp.disp_id ( 1997 )\ndisp.client_id ( 1997 )\nAmong the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.\n", "response": "SELECT account.account_id, loan.amount FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.date = '1997-01-01' AND loan.status = 'A' ORDER BY loan.amount ASC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) ]\nforeign keys :\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\nloan.account_id ( 1993 )\naccount.account_id ( 1993 )\norder.account_id ( 1993 )\ndisp.account_id ( 1993 )\ndisp.client_id ( 1993 )\ndisp.disp_id ( 1993 )\ntrans.account_id ( 1993 )\nAmong the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.\n", "response": "SELECT account.account_id, account.date FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 12 AND account.date BETWEEN '1993-01-01' AND '1993-12-31' ORDER BY loan.amount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a8 ( integer | comment : no. of municipalities with inhabitants > 10000 | values : 1 , 2 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable trans , columns = [ trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\nclient.client_id ( 1950 )\naccount.account_id ( 1950 )\ndisp.account_id ( 1950 )\ndisp.client_id ( 1950 )\ndisp.disp_id ( 1950 )\ntrans.account_id ( 1950 )\nAmong the account opened, how many female customers who were born before 1950 and stayed in Slokolov?\n", "response": "SELECT count(*) FROM account INNER JOIN client ON account.account_id = client.account_id WHERE birth_date < '1950-01-01' AND gender = 'F' AND district_id = 18;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\nforeign keys :\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.account_id ( 1995 )\naccount.account_id ( 1995 )\norder.account_id ( 1995 )\ndisp.account_id ( 1995 )\ndisp.client_id ( 1995 )\ndisp.disp_id ( 1995 )\nList out the accounts who have the earliest trading date in 1995 ?\n", "response": "SELECT account.account_id FROM account WHERE account.date = '1995-03-24';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\nforeign keys :\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1997 )\ntrans.account_id ( 1997 )\ntrans.amount ( 1997 )\nclient.client_id ( 1997 )\norder.account_id ( 1997 )\nState different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD\n", "response": "SELECT * FROM account WHERE date < '1997-01-01' AND amount > 3000;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.type ( text | values : gold , classic ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.account_id ( integer | values : 1 , 2 ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nWhich client issued his/her card in 1994/3/3, give his/her client id.\n", "response": "SELECT client.client_id FROM card INNER JOIN client ON card.disp_id = client.client_id WHERE card.issued = '1994-03-03';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\nforeign keys :\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.amount ( 840 )\ntrans.account_id ( 840 )\naccount.account_id ( 840 )\norder.account_id ( 840 )\nclient.client_id ( 840 )\nThe transaction of 840 USD happened in 1998/10/14, when was this account opened?\n", "response": "SELECT account.date FROM account WHERE account.account_id = 840;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.status ( text | values : A , B ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\nloan.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nThere was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.\n", "response": "SELECT account.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.date = '1994-08-25';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.account_id ( integer | values : 1 , 2 ) ]\ntable disp , columns = [ disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.type ( text | values : gold , classic ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nWhat is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?\n", "response": "SELECT trans.amount FROM trans INNER JOIN card ON trans.trans_id = card.card_id INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.birth_date = '1996-10-21' ORDER BY trans.amount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable district , columns = [ district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a9 ( integer | values : 1 , 5 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a12 ( real | comment : unemployment rate 1995 | values : 0.2 , 1.6 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nWhat is the gender of the oldest client who opened his/her account in the highest average salary branch?\n", "response": "SELECT client.gender FROM client INNER JOIN account ON client.district_id = account.district_id ORDER BY account.a11 DESC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.amount ( integer | values : 80952 , 30276 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) ]\ntable trans , columns = [ trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.balance ( integer | comment : balance after transaction | values : 1000 , 4679 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\nforeign keys :\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nFor the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?\n", "response": "SELECT client.client_id, SUM(trans.amount) FROM client INNER JOIN loan ON client.client_id = loan.account_id INNER JOIN trans ON loan.loan_id = trans.account_id GROUP BY client.client_id ORDER BY SUM(trans.amount) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.status ( text | values : A , B ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\ndistrict.a2 ( Jesenik )\nHow many clients opened their accounts in Jesenik branch were women?\n", "response": "SELECT sum(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE district.a2 = 'Jesenik';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.account_id ( integer | values : 1 , 2 ) ]\ntable disp , columns = [ disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable card , columns = [ card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable order , columns = [ order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.account_id ( integer | values : 1 , 2 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\nmatched contents :\ntrans.amount ( 5100 )\nWhat is the disposition id of the client who made 5100 USD transaction in 1998/9/2?\n", "response": "SELECT disp.disp_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.issued = '1998-09-02' AND card.type = 'gold';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\nloan.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1996 )\ndistrict.a2 ( Litomerice )\nclient.client_id ( 1996 )\ntrans.account_id ( 1996 )\ntrans.trans_id ( 1996 )\nHow many accounts were opened in Litomerice in 1996?\n", "response": "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Litomerice' AND account.date = '1996-03-24';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a9 ( integer | values : 1 , 5 ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\nloan.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nFor the female client who was born in 1976/1/29, which district did she opened her account?\n", "response": "SELECT district.a2 FROM client WHERE client.gender = 'F' AND client.birth_date = '1976-01-29';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) ]\ntable trans , columns = [ trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable district , columns = [ district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a13 ( real | comment : unemployment rate 1996 | values : 0.43 , 1.85 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a9 ( integer | values : 1 , 5 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\nloan.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\nloan.amount ( 98832 )\ntrans.trans_id ( 98832 )\nFor the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?\n", "response": "SELECT birth_date FROM client WHERE client_id = ( SELECT account_id FROM loan WHERE loan_id = 98832 );\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.gender ( text | values : F , M ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\ndistrict.a3 ( Prague )\nFor the first client who opened his/her account in Prague, what is his/her account ID?\n", "response": "SELECT account.account_id FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.client_id = 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a9 ( integer | values : 1 , 5 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable trans , columns = [ trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ndistrict.a3 ( south Bohemia )\nFor the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?\n", "response": "SELECT district.a5 / district.a4 * 100 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND client.gender = 'M';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable trans , columns = [ trans.balance ( integer | comment : balance after transaction | values : 1000 , 4679 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\nforeign keys :\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nFor the client who first applied the loan in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?\n", "response": "SELECT SUM(trans.amount) / SUM(loan.amount) FROM trans INNER JOIN loan ON trans.account_id = loan.account_id WHERE trans.date BETWEEN '1993-03-22' AND '1998-12-27' AND trans.account_id = 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.status ( text | values : A , B ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable card , columns = [ card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) ]\nforeign keys :\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nWhat is the percentage of loan amount that has been fully paid with no issue.\n", "response": "SELECT cast(count(CASE WHEN loan.status = 'A' THEN loan.loan_id END) AS REAL) * 100 / count(loan.loan_id) FROM loan;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.duration ( integer | values : 24 , 12 ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) ]\nforeign keys :\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nFor loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.\n", "response": "SELECT cast(sum(iif(loan.status = 'A', 1, 0)) AS REAL) * 100 / count(loan.loan_id) FROM loan WHERE loan.amount < 100000;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable trans , columns = [ trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.balance ( integer | comment : balance after transaction | values : 1000 , 4679 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable card , columns = [ card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.type ( text | values : gold , classic ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.account_id ( 1993 )\ntrans.balance ( 1993 )\naccount.account_id ( 1993 )\ndisp.account_id ( 1993 )\ndisp.disp_id ( 1993 )\ndisp.client_id ( 1993 )\nFor accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.\n", "response": "SELECT account.account_id, district.a2, district.a3 FROM account INNER JOIN trans ON trans.account_id = account.account_id WHERE strftime('%Y', trans.date) = 1993 AND card.issued > trans.date;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1995 , 2000 )\ndistrict.a3 ( east Bohemia )\nclient.client_id ( 1995 , 2000 )\ndisp.account_id ( 1995 , 2000 )\ndisp.client_id ( 1995 , 2000 )\ndisp.disp_id ( 1995 , 2000 )\nloan.account_id ( 2000 )\nFrom Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.\n", "response": "SELECT account.account_id, account.frequency FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'east Bohemia';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\nloan.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ndistrict.a2 ( Prachatice )\nList account ID and account opening date for accounts from 'Prachatice'.\n", "response": "SELECT account_id, date FROM account WHERE district_id = 18;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable loan , columns = [ loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\nforeign keys :\naccount.district_id = district.district_id\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\nloan.loan_id ( 4990 )\nState the district and region for loan ID '4990'.\n", "response": "SELECT district.a3, district.a2 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = '4990';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.amount ( integer | values : 80952 , 30276 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) ]\ntable district , columns = [ district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\nloan.account_id = account.account_id\norder.account_id = account.account_id\nmatched contents : None\nProvide the account ID, district and region for loan amount greater than USD300,000.\n", "response": "SELECT account.account_id, district.a3, district.a2 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 3000000;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.duration ( integer | values : 24 , 12 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.status ( text | values : A , B ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a9 ( integer | values : 1 , 5 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable card , columns = [ card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\nloan.account_id = account.account_id\nmatched contents :\nloan.duration ( 60 )\ndistrict.district_id ( 60 )\nclient.district_id ( 60 )\nclient.client_id ( 60 )\naccount.district_id ( 60 )\ncard.card_id ( 60 )\ncard.disp_id ( 60 )\nList the loan ID, district and average salary for loan with duration of 60 months.\n", "response": "SELECT loan.loan_id , district.a11 , avg(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60 GROUP BY loan.loan_id , district.a11;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.status ( text | values : A , B ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.duration ( integer | values : 24 , 12 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) ]\ntable district , columns = [ district.a13 ( real | comment : unemployment rate 1996 | values : 0.43 , 1.85 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a12 ( real | comment : unemployment rate 1995 | values : 0.2 , 1.6 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\nclient.client_id ( 1995 , 1996 )\naccount.account_id ( 1995 , 1996 )\ndisp.client_id ( 1995 , 1996 )\ndisp.account_id ( 1995 , 1996 )\ndisp.disp_id ( 1995 , 1996 )\nFor loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.\n", "response": "SELECT district.a13, district.a12, district.a2, district.a3, district.a16 FROM loan INNER JOIN client ON loan.client_id = client.client_id INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON client.district_id = district.district_id WHERE loan.status = 'A';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\nloan.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1993 )\ndistrict.a2 ( Decin )\nclient.client_id ( 1993 )\ntrans.account_id ( 1993 )\nloan.account_id ( 1993 )\nCalculate the percentage of account from 'Decin' district for all accounts are opened in 1993.\n", "response": "SELECT cast(sum(CASE WHEN district.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / count(account.account_id) FROM loan INNER JOIN trans ON loan.account_id = trans.account_id INNER JOIN client ON loan.client_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE loan.date = '1993-01-01';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) , loan.status ( text | values : A , B ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable card , columns = [ card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.type ( text | values : gold , classic ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\norder.account_id = account.account_id\nmatched contents : None\nList the account IDs with monthly issuance of statements.\n", "response": "SELECT account.account_id FROM account WHERE account.frequency = 'POPLATEK MESICNE';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a9 ( integer | values : 1 , 5 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nList the top ten districts, by descending order, from the highest to the lowest, the number of female account holders.\n", "response": "SELECT a2 FROM district ORDER BY a9 DESC LIMIT 10;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) ]\ntable account , columns = [ account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable district , columns = [ district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a15 ( integer | comment : no. of committed crimes 1995 | values : 85677 , 2159 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) ]\ntable card , columns = [ card.type ( text | values : gold , classic ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.account_id ( 1996 )\ntrans.trans_id ( 1996 )\ntrans.amount ( 1996 )\naccount.account_id ( 1996 )\ndisp.account_id ( 1996 )\ndisp.disp_id ( 1996 )\ndisp.client_id ( 1996 )\nWhich are the top ten withdrawals (non-credit card) by district names for the month of January 1996?\n", "response": "SELECT district.a2, sum(trans.amount) FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.date = '1996-01-01' GROUP BY district.a2 ORDER BY sum(trans.amount) DESC LIMIT 10;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a7 ( text | comment : no. of municipalities with inhabitants 2000-9999 | values : 0 , 6 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nmatched contents :\ndistrict.a3 ( south Bohemia )\nHow many of the account holders in South Bohemia still do not own credit cards?\n", "response": "SELECT count(account.account_id) FROM account INNER JOIN card ON account.account_id = card.disp_id INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'south Bohemia' AND account.frequency != 'POPLATEK MESICNE';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.status ( text | values : A , B ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.duration ( integer | values : 24 , 12 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) ]\ntable district , columns = [ district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nWhich district has highest active loan?\n", "response": "SELECT district.a2 FROM loan GROUP BY district.a2 ORDER BY count(loan.loan_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable loan , columns = [ loan.amount ( integer | values : 80952 , 30276 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.duration ( integer | values : 24 , 12 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.status ( text | values : A , B ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable district , columns = [ district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nWhat is the average loan amount by male borrowers?\n", "response": "SELECT avg(loan.amount) FROM loan INNER JOIN client ON loan.client_id = client.client_id WHERE client.gender = 'M';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a13 ( real | comment : unemployment rate 1996 | values : 0.43 , 1.85 ) , district.a12 ( real | comment : unemployment rate 1995 | values : 0.2 , 1.6 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable trans , columns = [ trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\ntable order , columns = [ order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\nclient.client_id ( 1996 )\naccount.account_id ( 1996 )\ntrans.account_id ( 1996 )\ntrans.trans_id ( 1996 )\norder.account_id ( 1996 )\nIn 1996, which districts have the highest unemployment rate? List their branch location and district name.\n", "response": "SELECT district.district_id , district.a2 , district.a13 , district.a12 , district.a16 , district.a11 FROM district WHERE district.a13 = ( SELECT max(district.a13) FROM district );\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable district , columns = [ district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a15 ( integer | comment : no. of committed crimes 1995 | values : 85677 , 2159 ) , district.a13 ( real | comment : unemployment rate 1996 | values : 0.43 , 1.85 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1996 )\nclient.client_id ( 1996 )\ndisp.account_id ( 1996 )\ndisp.client_id ( 1996 )\ndisp.disp_id ( 1996 )\ntrans.account_id ( 1996 )\ntrans.trans_id ( 1996 )\nIn the branch where the largest number of crimes were committed in 1996, how many accounts were opened?\n", "response": "SELECT count(account.account_id) FROM account INNER JOIN disp ON account.account_id = disp.account_id GROUP BY account.district_id ORDER BY count(account.account_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.type ( text | values : gold , classic ) ]\ntable trans , columns = [ trans.balance ( integer | comment : balance after transaction | values : 1000 , 4679 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) ]\ntable disp , columns = [ disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) , loan.status ( text | values : A , B ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nAfter making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?\n", "response": "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.payments < 0;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\ntable card , columns = [ card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nBetween 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?\n", "response": "SELECT count(loan.loan_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.amount >= 250000 AND loan.status = 'A';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable loan , columns = [ loan.status ( text | values : A , B ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.duration ( integer | values : 24 , 12 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) ]\ntable card , columns = [ card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\naccount.district_id ( 1 )\naccount.account_id ( 1 )\nclient.client_id ( 1 )\nclient.district_id ( 1 )\ndisp.account_id ( 1 )\ndisp.client_id ( 1 )\ndisp.disp_id ( 1 )\ncard.card_id ( 1 )\nHow many accounts have running contracts in Branch location 1?\n", "response": "SELECT count(account_id) FROM account WHERE district_id = 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.a15 ( integer | comment : no. of committed crimes 1995 | values : 85677 , 2159 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a12 ( real | comment : unemployment rate 1995 | values : 0.2 , 1.6 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a13 ( real | comment : unemployment rate 1996 | values : 0.43 , 1.85 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable trans , columns = [ trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\nclient.client_id ( 1995 )\naccount.account_id ( 1995 )\ntrans.account_id ( 1995 )\ndisp.client_id ( 1995 )\ndisp.account_id ( 1995 )\ndisp.disp_id ( 1995 )\nIn the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?\n", "response": "SELECT count(client.sex) FROM state INNER JOIN district ON state.statecode = district.state_abbrev INNER JOIN client ON district.district_id = client.district_id WHERE state.state = 'Massachusetts' AND client.sex = 'Male' AND district.a2 = 'Hl.m. Praha';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.type ( text | values : gold , classic ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable disp , columns = [ disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) ]\ntable trans , columns = [ trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) ]\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a9 ( integer | values : 1 , 5 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a7 ( text | comment : no. of municipalities with inhabitants 2000-9999 | values : 0 , 6 ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\nmatched contents :\ndisp.type ( DISPONENT )\nHow many high-level credit cards have \"disponent\" type of disposition?\n", "response": "SELECT count(type) FROM card WHERE type = 'disponent';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\ndistrict.a2 ( Pisek )\nHow many accounts are there in the district of \"Pisek\"?\n", "response": "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Pisek';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.account_id ( integer | values : 1 , 2 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\nloan.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.amount ( 1997 )\ntrans.account_id ( 1997 )\naccount.account_id ( 1997 )\nclient.client_id ( 1997 )\nWhich districts have transactions greater than USS$10,000 in 1997?\n", "response": "SELECT district_id FROM trans WHERE amount > 10000 GROUP BY district_id ORDER BY count(district_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ndistrict.a2 ( Pisek )\nWhich accounts placed orders for household payment in Pisek?\n", "response": "SELECT account.account_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE district.a2 = 'Pisek';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.type ( text | values : gold , classic ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\ncard.type ( junior , gold )\nWhat are the accounts that have both gold and junior credit cards?\n", "response": "SELECT DISTINCT account.account_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN account ON disp.account_id = account.account_id WHERE card.type = 'gold' AND card.type = 'junior';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.client_id ( integer | values : 1 , 2 ) ]\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.account_id ( 2021 )\ntrans.amount ( 2021 )\ntrans.trans_id ( 2021 )\naccount.account_id ( 2021 )\ndisp.account_id ( 2021 )\ndisp.disp_id ( 2021 )\ndisp.client_id ( 2021 )\nHow much is the average amount in credit card made by account holders in a month, in year 2021?\n", "response": "SELECT avg(trans.amount) FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.date BETWEEN '2021-01-01' AND '2021-12-31';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.type ( text | values : gold , classic ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1998 )\ndisp.account_id ( 1998 )\ndisp.client_id ( 1998 )\ndisp.disp_id ( 1998 )\nclient.client_id ( 1998 )\nWho are the account holder identification numbers whose spent per month on the credit card is less than the average, in 1998?\n", "response": "SELECT account.account_id FROM account INNER JOIN card ON account.account_id = card.account_id WHERE account.frequency = 'POPLATEK MESICNE' AND account.date = '1998-01-01' AND card.type = 'gold' GROUP BY account.account_id HAVING sum(loan.payments) < ( SELECT avg(loan.payments) FROM loan WHERE loan.account_id = account.account_id );\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nWho are the female account holders who own credit cards and also have loans?\n", "response": "SELECT client.gender, account.frequency FROM client INNER JOIN account ON client.client_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'Female' AND account.frequency = 'POPLATEK MESICNE';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\ndistrict.a3 ( south Bohemia )\nHow many female clients' accounts are in the region of South Bohemia?\n", "response": "SELECT count(account.account_id) FROM account INNER JOIN client ON account.district_id = client.district_id WHERE client.district_id = 18 AND client.gender = 'F';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\ndistrict.a2 ( Tabor )\nPlease list the accounts whose district is Tabor that are eligible for loans.\n", "response": "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE district.a2 = 'Tabor';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.status ( text | values : A , B ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a9 ( integer | values : 1 , 5 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nPlease list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.\n", "response": "SELECT account.frequency, account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.amount > 8000 AND loan.amount < 9000;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) ]\ntable district , columns = [ district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.bank ( AB )\ndistrict.a3 ( north Bohemia )\norder.bank_to ( AB )\nHow many accounts in North Bohemia has made a transaction with the partner's bank being AB?\n", "response": "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a3 = 'north Bohemia' AND account.frequency = 'POPLATEK MESICNE';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.balance ( integer | comment : balance after transaction | values : 1000 , 4679 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable disp , columns = [ disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nPlease list the name of the districts with accounts that made withdrawal transactions.\n", "response": "SELECT district.a2 FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.a15 ( integer | comment : no. of committed crimes 1995 | values : 85677 , 2159 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1995 , 4000 , 1997 )\nclient.client_id ( 1995 , 4000 , 1997 )\ndisp.account_id ( 1995 , 4000 , 1997 )\ndisp.client_id ( 1995 , 4000 , 1997 )\ndisp.disp_id ( 1995 , 4000 , 1997 )\nWhat is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?\n", "response": "SELECT AVG(district.a15) FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.a15 > 4000 AND strftime('%Y', account.date) >= '1997';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) ]\ntable loan , columns = [ loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) ]\ntable disp , columns = [ disp.type ( text | values : OWNER , DISPONENT ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) ]\ntable district , columns = [ district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a9 ( integer | values : 1 , 5 ) , district.a7 ( text | comment : no. of municipalities with inhabitants 2000-9999 | values : 0 , 6 ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.balance ( integer | comment : balance after transaction | values : 1000 , 4679 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\nmatched contents :\ncard.type ( classic )\nHow many 'classic' cards are eligible for loan?\n", "response": "SELECT count(card.card_id) FROM card WHERE card.type = 'classic';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ndistrict.a2 ( Hl.m. Praha )\nHow many male clients in 'Hl.m. Praha' district?\n", "response": "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a2 = 'Hl.m. Praha' AND client.gender = 'M';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) ]\ntable disp , columns = [ disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable district , columns = [ district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a7 ( text | comment : no. of municipalities with inhabitants 2000-9999 | values : 0 , 6 ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\ncard.type ( gold )\ndisp.disp_id ( 1998 )\ndisp.account_id ( 1998 )\ndisp.client_id ( 1998 )\naccount.account_id ( 1998 )\nHow many percent of 'Gold' cards were issued prior to 1998?\n", "response": "SELECT count(card.type) FROM card WHERE card.issued < '1998-01-01' AND card.type = 'gold';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.amount ( integer | values : 80952 , 30276 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable trans , columns = [ trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) ]\ntable order , columns = [ order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.account_id ( integer | values : 1 , 2 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\nforeign keys :\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nWho is the owner of the account with the largest loan amount?\n", "response": "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id ORDER BY loan.amount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.a15 ( integer | comment : no. of committed crimes 1995 | values : 85677 , 2159 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\nforeign keys :\naccount.district_id = district.district_id\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1995 , 532 )\ntrans.account_id ( 1995 , 532 )\norder.account_id ( 1995 )\nWhat is the number of committed crimes in 1995 in the district of the account with the id 532?\n", "response": "SELECT district.a15 FROM district INNER JOIN account ON district.district_id = account.district_id WHERE account.account_id = 532;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\norder.order_id ( 33333 )\nWhat is the district Id of the account that placed the order with the id 33333?\n", "response": "SELECT account.district_id FROM account INNER JOIN order ON account.account_id = order.account_id WHERE order.order_id = 33333;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.account_id ( integer | values : 1 , 2 ) , trans.balance ( integer | comment : balance after transaction | values : 1000 , 4679 ) ]\ntable order , columns = [ order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\nforeign keys :\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.trans_id ( 3356 )\ntrans.balance ( 3356 )\ndisp.client_id ( 3356 )\ndisp.disp_id ( 3356 )\nclient.client_id ( 3356 )\nList all the withdrawals in cash transactions that the client with the id 3356 makes.\n", "response": "SELECT trans.amount FROM trans INNER JOIN disp ON trans.trans_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 3356;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.amount ( integer | values : 80952 , 30276 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable card , columns = [ card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.type ( text | values : gold , classic ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nAmong the weekly issuance accounts, how many have a loan of under 200000?\n", "response": "SELECT count(account.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.amount < 200000;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable district , columns = [ district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nmatched contents :\ndisp.client_id ( 13539 )\nclient.client_id ( 13539 )\nWhat type of credit card does the client with the id 13539 own?\n", "response": "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 13539;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable trans , columns = [ trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\nclient.client_id ( 3541 )\naccount.account_id ( 3541 )\ndisp.client_id ( 3541 )\ndisp.account_id ( 3541 )\ndisp.disp_id ( 3541 )\ntrans.trans_id ( 3541 )\ntrans.account_id ( 3541 )\nWhat is the region of the client with the id 3541 from?\n", "response": "SELECT district.a3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.status ( text | values : A , B ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.duration ( integer | values : 24 , 12 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nWhich district has the most accounts with loan contracts finished with no problems?\n", "response": "SELECT district_id , count(account_id) FROM loan GROUP BY district_id ORDER BY count(account_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable order , columns = [ order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable trans , columns = [ trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\nforeign keys :\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\norder.order_id ( 32423 )\ntrans.trans_id ( 32423 )\nWho placed the order with the id 32423?\n", "response": "SELECT client.gender FROM client INNER JOIN order ON client.client_id = order.account_id WHERE order.order_id = 32423;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\naccount.account_id ( 5 )\naccount.district_id ( 5 )\ndistrict.a5 ( 5 )\nclient.district_id ( 5 )\nclient.client_id ( 5 )\nPlease list all the transactions made by accounts from district 5.\n", "response": "SELECT * FROM trans INNER JOIN account ON trans.account_id = account.account_id WHERE account.district_id = 5;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\ndistrict.a2 ( Jesenik )\nHow many of the accounts are from Jesenik district?\n", "response": "SELECT count(account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.a2 = 'Jesenik';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.type ( text | values : gold , classic ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable district , columns = [ district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a13 ( real | comment : unemployment rate 1996 | values : 0.43 , 1.85 ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\nmatched contents :\ncard.type ( junior )\ndisp.client_id ( 1996 )\ndisp.disp_id ( 1996 )\ndisp.account_id ( 1996 )\nclient.client_id ( 1996 )\nList all the clients' IDs whose junior credit cards were issued after 1996.\n", "response": "SELECT client_id FROM card WHERE issued > '1996-01-01' AND type = 'junior';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a9 ( integer | values : 1 , 5 ) , district.a8 ( integer | comment : no. of municipalities with inhabitants > 10000 | values : 1 , 2 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nWhat percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?\n", "response": "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a11 > 10000;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable loan , columns = [ loan.amount ( integer | values : 80952 , 30276 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable trans , columns = [ trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\nforeign keys :\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\nclient.client_id ( 1996 , 1997 )\naccount.account_id ( 1996 , 1997 )\ntrans.account_id ( 1996 , 1997 )\ntrans.trans_id ( 1996 )\ntrans.amount ( 1996 , 1997 )\norder.account_id ( 1996 , 1997 )\nWhat was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?\n", "response": "SELECT account.frequency, sum(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON loan.client_id = client.client_id WHERE client.gender = 'M' AND loan.date BETWEEN '1996-01-01' AND '1997-12-31' GROUP BY account.frequency;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) ]\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable disp , columns = [ disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.client_id ( integer | values : 1 , 2 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.account_id ( 1995 )\ntrans.amount ( 1995 )\naccount.account_id ( 1995 )\ndisp.disp_id ( 1995 )\ndisp.account_id ( 1995 )\ndisp.client_id ( 1995 )\norder.account_id ( 1995 )\nHow many credit card withdrawals were recorded after 1995?\n", "response": "SELECT count(*) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE strftime('%Y-%m', card.issued) > '1995';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable district , columns = [ district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a15 ( integer | comment : no. of committed crimes 1995 | values : 85677 , 2159 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.account_id ( integer | primary key | values : 1 , 2 ) ]\ntable trans , columns = [ trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\ntable order , columns = [ order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\ntable disp , columns = [ disp.type ( text | values : OWNER , DISPONENT ) , disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\nforeign keys :\naccount.district_id = district.district_id\ndisp.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ndistrict.a3 ( north Bohemia )\naccount.account_id ( 1996 )\ntrans.account_id ( 1996 )\ntrans.trans_id ( 1996 )\norder.account_id ( 1996 )\ndisp.account_id ( 1996 )\ndisp.client_id ( 1996 )\ndisp.disp_id ( 1996 )\nWhat was the difference in the number of crimes committed in East and North Bohemia in 1996?\n", "response": "SELECT cast(sum(CASE WHEN district.a3 = 'East' THEN 1 ELSE 0 END) AS REAL) * 100 / count(district.a3) - cast(sum(CASE WHEN district.a3 = 'North' THEN 1 ELSE 0 END) AS REAL) * 100 / count(district.a3) FROM district WHERE district.a3 = 'East' OR district.a3 = 'North';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable card , columns = [ card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\ndisp.account_id ( 1 )\ndisp.disp_id ( 1 )\ndisp.client_id ( 1 )\ndisp.type ( DISPONENT , OWNER )\naccount.account_id ( 1 )\naccount.district_id ( 1 )\ncard.card_id ( 1 )\nclient.client_id ( 1 )\nclient.district_id ( 1 )\nHow many owner and disponent dispositions are there from account number 1 to account number 10?\n", "response": "SELECT count(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type = 'OWNER' OR type = 'DISPONENT';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable order , columns = [ order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\nforeign keys :\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\naccount.account_id ( 3539 , 3 )\naccount.district_id ( 3 )\ntrans.account_id ( 3539 )\ntrans.amount ( 3539 )\ntrans.trans_id ( 3539 )\ndisp.account_id ( 3539 , 3 )\ndisp.client_id ( 3539 , 3 )\ndisp.disp_id ( 3539 , 3 )\nclient.client_id ( 3539 , 3 )\nclient.district_id ( 3 )\nHow often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?\n", "response": "SELECT frequency FROM account WHERE account_id = 3539;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable card , columns = [ card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\nclient.client_id ( 130 )\naccount.account_id ( 130 )\ndisp.account_id ( 130 )\ndisp.client_id ( 130 )\ndisp.disp_id ( 130 )\ndisp.type ( OWNER )\ncard.disp_id ( 130 )\ncard.card_id ( 130 )\nWhat year was account owner number 130 born?\n", "response": "SELECT birth_date FROM client WHERE client_id = 130;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable disp , columns = [ disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable card , columns = [ card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ndisp.type ( OWNER )\nHow many accounts have an owner disposition and request for a statement to be generated upon a transaction?\n", "response": "SELECT count(account_id) FROM disp WHERE type = 'OWNER' AND client_id = 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\nclient.client_id ( 992 )\naccount.account_id ( 992 )\ndisp.account_id ( 992 )\ndisp.client_id ( 992 )\ndisp.disp_id ( 992 )\ncard.disp_id ( 992 )\nWhat is the amount of debt that client number 992 has, and how is this client doing with payments?\n", "response": "SELECT loan.amount FROM loan INNER JOIN client ON loan.account_id = client.client_id WHERE client.client_id = 992;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.balance ( integer | comment : balance after transaction | values : 1000 , 4679 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\nforeign keys :\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.account_id ( 851 )\ntrans.amount ( 851 )\ntrans.trans_id ( 851 )\nclient.client_id ( 851 , 4 )\nclient.district_id ( 4 )\naccount.account_id ( 851 , 4 )\naccount.district_id ( 4 )\norder.account_id ( 851 )\ndisp.account_id ( 851 , 4 )\ndisp.client_id ( 851 , 4 )\ndisp.disp_id ( 851 , 4 )\nWhat is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?\n", "response": "SELECT SUM(trans.amount) FROM trans INNER JOIN client ON trans.account_id = client.client_id WHERE client.client_id = 4 AND trans.trans_id = 851;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a9 ( integer | values : 1 , 5 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nmatched contents :\ncard.card_id ( 9 )\ncard.disp_id ( 9 )\ndisp.client_id ( 9 )\ndisp.disp_id ( 9 )\ndisp.account_id ( 9 )\nclient.client_id ( 9 )\nclient.district_id ( 9 )\naccount.account_id ( 9 )\naccount.district_id ( 9 )\nWhich kind of credit card does client number 9 possess?\n", "response": "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 9;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable trans , columns = [ trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\nforeign keys :\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\ntrans.amount ( 617 , 1998 )\ntrans.trans_id ( 1998 )\ntrans.account_id ( 617 , 1998 )\norder.account_id ( 617 )\nclient.client_id ( 617 , 1998 )\naccount.account_id ( 617 , 1998 )\ndisp.client_id ( 617 , 1998 )\ndisp.account_id ( 617 , 1998 )\ndisp.disp_id ( 617 , 1998 )\nHow much, in total, did client number 617 pay for all of the transactions in 1998?\n", "response": "SELECT sum(trans.amount) FROM trans INNER JOIN order ON trans.account_id = order.account_id INNER JOIN client ON order.client_id = client.client_id WHERE client.client_id = '617' AND trans.date = '1998';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\nclient.client_id ( 1983 )\naccount.account_id ( 1983 , 1987 )\ndistrict.a3 ( east Bohemia )\ndisp.client_id ( 1983 )\ndisp.account_id ( 1983 , 1987 )\ndisp.disp_id ( 1983 )\ntrans.account_id ( 1983 , 1987 )\ntrans.trans_id ( 1983 , 1987 )\nPlease provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.\n", "response": "SELECT client.client_id , account.account_id FROM client INNER JOIN account ON client.district_id = account.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable loan , columns = [ loan.amount ( integer | values : 80952 , 30276 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\nforeign keys :\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\norder.account_id = account.account_id\nmatched contents :\nclient.client_id ( 3 )\nclient.district_id ( 3 )\naccount.account_id ( 3 )\naccount.district_id ( 3 )\ndisp.client_id ( 3 )\ndisp.account_id ( 3 )\ndisp.disp_id ( 3 )\nPlease provide the IDs of the 3 female clients with the largest loans.\n", "response": "SELECT client.client_id FROM client WHERE gender = 'F' ORDER BY loan.amount DESC LIMIT 3;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable loan , columns = [ loan.amount ( integer | values : 80952 , 30276 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.status ( text | values : A , B ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) ]\ntable trans , columns = [ trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.k_symbol ( text | comment : characterization of the transaction | values : SIPO , SLUZBY ) , trans.operation ( text | comment : mode of transaction | values : VKLAD , PREVOD Z UCTU ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\nforeign keys :\ndisp.client_id = client.client_id\nmatched contents :\nclient.client_id ( 1974 , 1976 )\norder.account_id ( 1976 )\ntrans.amount ( 1974 )\ntrans.account_id ( 1974 , 1976 )\ntrans.trans_id ( 1974 , 1976 )\ndisp.client_id ( 1974 , 1976 )\ndisp.account_id ( 1974 , 1976 )\ndisp.disp_id ( 1974 , 1976 )\nHow many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?\n", "response": "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN loan ON client.client_id = loan.client_id WHERE client.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND loan.amount > 4000 AND client.gender = 'M';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable loan , columns = [ loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.balance ( integer | comment : balance after transaction | values : 1000 , 4679 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\nloan.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1996 )\ndistrict.a2 ( Beroun )\nclient.client_id ( 1996 )\ntrans.account_id ( 1996 )\ntrans.trans_id ( 1996 )\ntrans.balance ( 1996 )\nHow many accounts in Beroun were opened after 1996?\n", "response": "SELECT count(account.account_id) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.district_id = 18 AND loan.date > '1996-01-01' AND loan.date < '1997-01-01';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable district , columns = [ district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a9 ( integer | values : 1 , 5 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nmatched contents :\ncard.type ( junior )\nHow many female customers have a junior credit card?\n", "response": "SELECT count(client.gender) FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.status ( text | values : A , B ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents :\ndistrict.a3 ( Prague )\nWhat proportion of customers who have accounts at the Prague branch are female?\n", "response": "SELECT cast(sum(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN client.gender = 'M' THEN 1 ELSE 0 END) FROM client INNER JOIN account ON client.district_id = account.district_id WHERE account.frequency = 'POPLATEK MESICNE';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable account , columns = [ account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable card , columns = [ card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nmatched contents : None\nWhat percentage of male clients request for weekly statements to be issued?\n", "response": "SELECT cast(sum(CASE WHEN client.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) * 100 / count(client.gender) FROM client WHERE client.subscribedtoemaillist = 'TRUE';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable card , columns = [ card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.type ( text | values : gold , classic ) ]\ntable disp , columns = [ disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a16 ( integer | comment : no. of committed crimes 1996 | values : 99107 , 2674 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.a9 ( integer | values : 1 , 5 ) ]\nforeign keys :\naccount.district_id = district.district_id\ncard.disp_id = disp.disp_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nmatched contents : None\nHow many clients who choose statement of weekly issuance are User?\n", "response": "SELECT count(client_id) FROM client WHERE subscribedtoemaillist = 'TRUE' AND gender = 'M';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) ]\nforeign keys :\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\naccount.account_id ( 1997 , 24 )\naccount.district_id ( 24 )\norder.account_id ( 1997 )\ndisp.account_id ( 1997 , 24 )\ndisp.client_id ( 1997 , 24 )\ndisp.disp_id ( 1997 , 24 )\ntrans.account_id ( 1997 )\nAmong the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.\n", "response": "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 24 ORDER BY loan.amount ASC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.gender ( text | values : F , M ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable district , columns = [ district.a11 ( integer | comment : average salary | values : 12541 , 8507 ) , district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a9 ( integer | values : 1 , 5 ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a12 ( real | comment : unemployment rate 1995 | values : 0.2 , 1.6 ) , district.a14 ( integer | comment : no. of entrepreneurs per 1000 inhabitants | values : 167 , 132 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable loan , columns = [ loan.account_id ( integer | values : 2 , 19 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.status ( text | values : A , B ) , loan.duration ( integer | values : 24 , 12 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nName the account numbers of female clients who are oldest and have lowest average salary?\n", "response": "SELECT account.account_id FROM client INNER JOIN district ON client.district_id = district.district_id INNER JOIN account ON district.district_id = account.district_id WHERE client.gender = 'F' AND district.a11 = (SELECT min(a11) FROM district) AND account.frequency = 'POPLATEK MESICNE';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable trans , columns = [ trans.account_id ( integer | values : 1 , 2 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.bank ( text | comment : bank of the partner | values : AB , YZ ) , trans.account ( integer | comment : account of the partner | values : 41403269 , 87144583 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents :\nclient.client_id ( 1920 )\ndistrict.a3 ( east Bohemia )\naccount.account_id ( 1920 )\ndisp.client_id ( 1920 )\ndisp.account_id ( 1920 )\ndisp.disp_id ( 1920 )\ntrans.account_id ( 1920 )\ntrans.trans_id ( 1920 )\nHow many clients who were born in 1920 stay in east Bohemia?\n", "response": "SELECT count(DISTINCT client.client_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.a3 = 'east Bohemia';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.duration ( integer | values : 24 , 12 ) , loan.status ( text | values : A , B ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.amount ( integer | values : 80952 , 30276 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable disp , columns = [ disp.account_id ( integer | values : 1 , 2 ) , disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) ]\ntable card , columns = [ card.type ( text | values : gold , classic ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\norder.account_id = account.account_id\nmatched contents :\naccount.account_id ( 24 )\naccount.district_id ( 24 )\ndisp.account_id ( 24 )\ndisp.client_id ( 24 )\ndisp.disp_id ( 24 )\ncard.card_id ( 24 )\nHow many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.\n", "response": "SELECT count(loan.loan_id) FROM loan WHERE loan.duration = 24 AND loan.status = 'A';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.status ( text | values : A , B ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.payments ( real | comment : monthly payments | values : 3373.0 , 2523.0 ) ]\ntable trans , columns = [ trans.trans_id ( integer | primary key | comment : transaction id | values : 1 , 5 ) , trans.account_id ( integer | values : 1 , 2 ) , trans.balance ( integer | comment : balance after transaction | values : 1000 , 4679 ) , trans.date ( date | comment : date of transaction | values : 1995-03-24 , 1995-04-13 ) , trans.type ( text | comment : +/- transaction | values : PRIJEM , VYDAJ ) , trans.amount ( integer | comment : amount of money | values : 1000 , 3679 ) ]\ntable account , columns = [ account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable order , columns = [ order.account_id ( integer | values : 1 , 2 ) , order.order_id ( integer | primary key | values : 29401 , 29402 ) , order.account_to ( integer | comment : account of the recipient | values : 87144583 , 89597016 ) , order.amount ( real | comment : debited amount | values : 2452.0 , 3372.7 ) , order.k_symbol ( text | comment : characterization of the payment | values : SIPO , UVER ) , order.bank_to ( text | comment : bank of the recipient | values : YZ , ST ) ]\ntable card , columns = [ card.issued ( date | values : 1998-10-16 , 1998-03-13 ) , card.type ( text | values : gold , classic ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) ]\nforeign keys :\nloan.account_id = account.account_id\norder.account_id = account.account_id\ntrans.account_id = account.account_id\nmatched contents : None\nWhat is the average amount of loan which are still on running contract with statement issuance after each transaction?\n", "response": "SELECT sum(trans.amount) / count(trans.trans_id) FROM loan INNER JOIN trans ON loan.loan_id = trans.account_id WHERE loan.status = 'A';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable loan , columns = [ loan.status ( text | values : A , B ) , loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.account_id ( integer | values : 2 , 19 ) , loan.duration ( integer | values : 24 , 12 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) , loan.amount ( integer | values : 80952 , 30276 ) ]\ntable client , columns = [ client.client_id ( integer | primary key | values : 1 , 2 ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) , client.gender ( text | values : F , M ) , client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) ]\ntable district , columns = [ district.district_id ( integer | primary key | comment : location of branch | values : 1 , 2 ) , district.a2 ( text | comment : district_name | values : Hl.m. Praha , Benesov ) , district.a3 ( text | comment : region | values : Prague , central Bohemia ) , district.a4 ( text | comment : number of inhabitants | values : 1204953 , 88884 ) , district.a5 ( text | comment : no. of municipalities with inhabitants < 499 | values : 0 , 80 ) , district.a6 ( text | comment : no. of municipalities with inhabitants 500-1999 | values : 0 , 26 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) ]\ntable account , columns = [ account.district_id ( integer | comment : location of branch | values : 18 , 1 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) ]\nforeign keys :\naccount.district_id = district.district_id\nclient.district_id = district.district_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nList all ID and district for clients that can only have the right to issue permanent orders or apply for loans.\n", "response": "SELECT client.client_id, district.district_id FROM client INNER JOIN account ON client.client_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' OR loan.status = 'B';\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable client , columns = [ client.birth_date ( date | values : 1970-12-13 , 1945-02-04 ) , client.client_id ( integer | primary key | values : 1 , 2 ) , client.gender ( text | values : F , M ) , client.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\ntable card , columns = [ card.card_id ( integer | primary key | comment : credit card id | values : 1 , 2 ) , card.type ( text | values : gold , classic ) , card.disp_id ( integer | comment : disposition id | values : 9 , 19 ) , card.issued ( date | values : 1998-10-16 , 1998-03-13 ) ]\ntable disp , columns = [ disp.client_id ( integer | values : 1 , 2 ) , disp.type ( text | values : OWNER , DISPONENT ) , disp.disp_id ( integer | primary key | comment : disposition id | values : 1 , 2 ) , disp.account_id ( integer | values : 1 , 2 ) ]\ntable loan , columns = [ loan.loan_id ( integer | primary key | values : 4959 , 4961 ) , loan.status ( text | values : A , B ) , loan.account_id ( integer | values : 2 , 19 ) , loan.amount ( integer | values : 80952 , 30276 ) , loan.duration ( integer | values : 24 , 12 ) , loan.date ( date | values : 1994-01-05 , 1996-04-29 ) ]\ntable account , columns = [ account.date ( date | values : 1995-03-24 , 1993-02-26 ) , account.account_id ( integer | primary key | values : 1 , 2 ) , account.frequency ( text | values : POPLATEK MESICNE , POPLATEK TYDNE ) , account.district_id ( integer | comment : location of branch | values : 18 , 1 ) ]\nforeign keys :\ncard.disp_id = disp.disp_id\ndisp.client_id = client.client_id\ndisp.account_id = account.account_id\nloan.account_id = account.account_id\nmatched contents : None\nProvide the IDs and age of the client with high level credit card, which is eligible for loans.\n", "response": "SELECT client.client_id, client.birth_date FROM client INNER JOIN card ON client.client_id = card.disp_id WHERE card.type = 'gold' ORDER BY client.birth_date DESC LIMIT 1;\t", "n_examples": 0, "db_id": "financial"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat is the most common bond type?\n", "response": "SELECT bond.bond_type FROM bond GROUP BY bond.bond_type ORDER BY count(bond.bond_type) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nIn the non-carcinogenic molecules, how many contain chlorine atoms?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nCalculate the average number of oxygen atoms in single-bonded molecules.\n", "response": "SELECT avg(atom.element) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nOn average how many carcinogenic molecules are single bonded?\n", "response": "SELECT avg(molecule.label) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nIn the molecule containing sodium atoms, how many are non-carcinogenic?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'Na' AND molecule.label = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nFind the triple-bonded molecules which are carcinogenic.\n", "response": "SELECT DISTINCT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat is the percentage of carbon in double-bond molecules?\n", "response": "SELECT sum(CASE WHEN atom.element = 'c' THEN 1.0 ELSE 0 END) / count(molecule.molecule_id) AS percentage FROM atom INNER JOIN molecule ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many triple type bonds are there?\n", "response": "SELECT count(bond.bond_id) FROM bond WHERE bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nIn how many atoms is there no bromine?\n", "response": "SELECT count(*) FROM atom WHERE element = 'b';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nOf the first 100 molecules in number order, how many are carcinogenic?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nIdentify by their ID the molecules in which there is silicon.\n", "response": "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR004_8_9 )\nconnected.bond_id ( TR004_8_9 )\nWhat elements are in the TR004_8_9 bond atoms?\n", "response": "SELECT DISTINCT bond.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.bond_id = 'TR004_8_9';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat elements are in a double type bond?\n", "response": "SELECT element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhich type of label is the most numerous in atoms with hydrogen?\n", "response": "SELECT label FROM atom WHERE element = 'h' GROUP BY label ORDER BY count(atom_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nTellurium is in what type of bond?\n", "response": "SELECT bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'cl';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat atoms are connected in single type bonds?\n", "response": "SELECT DISTINCT atom.atom_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON bond.atom_id = atom.atom_id WHERE bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nIndicate which atoms are connected in non-carcinogenic type molecules.\n", "response": "SELECT connected.atom_id FROM connected INNER JOIN molecule ON connected.bond_id = molecule.molecule_id WHERE molecule.label = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhich element is the least numerous in non-carcinogenic molecules?\n", "response": "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY atom.element ORDER BY count(atom.element) LIMIT 1;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nconnected.atom_id ( TR004_8 , TR004_20 )\nconnected.atom_id2 ( TR004_8 , TR004_20 )\natom.atom_id ( TR004_8 , TR004_20 )\nWhat type of bond is there between the atoms TR004_8 and TR004_20?\n", "response": "SELECT bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR004_8' AND atom.atom_id = 'TR004_20';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat type of label is not on molecules with atoms with tin?\n", "response": "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'tin';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many atoms with iodine and sulfur type elements are there in single bond molecules?\n", "response": "SELECT count(atom.atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'iodine' AND atom.element = 'sulfur' AND bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nIdentify all connected atoms with a triple bond.\n", "response": "SELECT connected.bond_id FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nmolecule.molecule_id ( TR181 )\natom.molecule_id ( TR181 )\nbond.molecule_id ( TR181 )\nIdentify all the atoms that are connected to the atoms of the TR181 molecule.\n", "response": "SELECT atom.atom_id FROM connected INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE molecule_id = 'TR181';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat percentage of carcinogenic-type molecules does not contain fluorine?\n", "response": "SELECT cast(count(molecule.molecule_id) AS REAL) * 100 / ( SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' ) FROM molecule WHERE molecule.label = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat is the percentage of carcinogenic molecules in triple type bonds?\n", "response": "SELECT cast(count(CASE WHEN bond.bond_type = '=' THEN bond.molecule_id END) AS REAL) * 100 / count(bond.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nmolecule.molecule_id ( TR000 )\natom.molecule_id ( TR000 )\nbond.molecule_id ( TR000 )\nPlease list top three elements of the toxicology of the molecule TR000 in alphabetical order.\n", "response": "SELECT DISTINCT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR000' ORDER BY atom.element ASC LIMIT 3;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nconnected.bond_id ( TR001_2_6 )\natom.molecule_id ( TR001 )\nbond.molecule_id ( TR001 )\nbond.bond_id ( TR001_2_6 )\nmolecule.molecule_id ( TR001 )\nWhat are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?\n", "response": "SELECT atom.element FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE bond.bond_id = 'TR001_2_6';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat is the difference between the number of molecules that are carcinogenic and those that are not?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat are the atom IDs of the bond TR_000_2_5?\n", "response": "SELECT atom_id FROM connected WHERE bond_id = 'TR_000_2_5';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nconnected.atom_id2 ( TR000_2 )\nconnected.atom_id ( TR000_2 )\natom.atom_id ( TR000_2 )\nWhat are the bond IDs that have the same atom ID 2 of TR000_2?\n", "response": "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nPlease list top five molecules that have double bonds in alphabetical order.\n", "response": "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id GROUP BY molecule.label ORDER BY count(*) DESC LIMIT 5;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR008 )\nmolecule.molecule_id ( TR008 )\natom.molecule_id ( TR008 )\nWhat is the percentage of double bonds in the molecule TR008?\n", "response": "SELECT cast(sum(CASE WHEN bond.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / total(molecule.molecule_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat is the percentage of molecules that are carcinogenic?\n", "response": "SELECT ROUND(100 * SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) / SUM(CASE WHEN molecule.label = '-' THEN 1 ELSE 0 END), 2) AS percentage FROM molecule;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.molecule_id ( TR206 )\nmolecule.molecule_id ( TR206 )\nbond.molecule_id ( TR206 )\nHow much of the hydrogen in molecule TR206 is accounted for? Please provide your answer in percentage.\n", "response": "SELECT 100.0 * SUM(connected.atom_id = 'TR000_1') / SUM(connected.atom_id = 'TR206') FROM connected;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR000 )\nmolecule.molecule_id ( TR000 )\natom.molecule_id ( TR000 )\nWhat is the type of bond that molecule TR000 has when involved in any bonds?\n", "response": "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nmolecule.molecule_id ( TR060 )\natom.molecule_id ( TR060 )\nbond.molecule_id ( TR060 )\nWhat are the elements of the toxicology and label of molecule TR060?\n", "response": "SELECT atom.element, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR018 )\natom.molecule_id ( TR018 )\nWhich bond type accounted for the majority of the bonds found in molecule TR018 and state whether or not this molecule is carcinogenic?\n", "response": "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR018' GROUP BY bond.bond_type ORDER BY count(*) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nPlease list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.\n", "response": "SELECT molecule.molecule_id, molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id GROUP BY molecule.molecule_id, molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 3;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR006 )\nmolecule.molecule_id ( TR006 )\natom.molecule_id ( TR006 )\nPlease list top two bonds that happened with the molecule TR006 in alphabetical order.\n", "response": "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR009 )\nmolecule.molecule_id ( TR009 )\natom.molecule_id ( TR009 )\nHow many bonds which involved atom 12 does molecule TR009 have?\n", "response": "SELECT count(bond_id) FROM connected WHERE atom_id = 'TR000_12' AND molecule_id = 'TR009';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many molecules are carcinogenic and have the bromine element?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'bromine' AND molecule.label = '+';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR001_6_9 )\nconnected.bond_id ( TR001_6_9 )\nWhat are the bond type and the atoms of the bond ID of TR001_6_9?\n", "response": "SELECT bond.bond_type, atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_id = 'TR001_6_9';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.atom_id ( TR001_10 )\nconnected.atom_id ( TR001_10 )\nconnected.atom_id2 ( TR001_10 )\nWhich molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.\n", "response": "SELECT molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR001_10';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many molecules have a triple bond type?\n", "response": "SELECT count(molecule_id) FROM bond WHERE bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many connections does the atom 19 have?\n", "response": "SELECT count(connected.atom_id) FROM connected WHERE connected.atom_id = '19';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nmolecule.molecule_id ( TR004 )\natom.molecule_id ( TR004 )\nbond.molecule_id ( TR004 )\nList all the elements of the toxicology of the molecule \"TR004\".\n", "response": "SELECT DISTINCT element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR004';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many of the molecules are not carcinogenic?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 'c' AND bond.bond_type != '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nAmong all the atoms from 21 to 25, list all the molecules that are carcinogenic.\n", "response": "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.molecule_id BETWEEN '21' AND '25';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat are the bonds that have phosphorus and nitrogen as their atom elements?\n", "response": "SELECT bond.bond_id FROM bond INNER JOIN atom ON bond.atom_id = atom.atom_id WHERE atom.element = 'p' AND atom.element = 'n';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nIs the molecule with the most double bonds carcinogenic?\n", "response": "SELECT molecule.label FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id GROUP BY molecule.label ORDER BY count(bond.bond_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat is the average number of bonds the atoms with the element iodine have?\n", "response": "SELECT avg(connected.bond_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'iodine';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nList the bond type and the bond ID of the atom 45.\n", "response": "SELECT bond.bond_type, bond.bond_id FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE atom.atom_id = '45';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nList all the elements of atoms that can not bond with any other atoms.\n", "response": "SELECT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR447 )\natom.molecule_id ( TR447 )\nWhat are the atoms of the triple bond with the molecule \"TR447\"?\n", "response": "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR447';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR144_8_19 )\nconnected.bond_id ( TR144_8_19 )\nWhat are the elements of the atoms of TR144_8_19?\n", "response": "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.bond_id = 'TR144_8_19';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nOf all the carcinogenic molecules, which one has the most double bonds?\n", "response": "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id GROUP BY molecule.molecule_id ORDER BY count(bond.bond_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat is the least common element of all carcinogenic molecules?\n", "response": "SELECT molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' GROUP BY molecule.label ORDER BY count(molecule.label) ASC LIMIT 1;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat are the atoms that can bond with the atom that has the element lead?\n", "response": "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE atom.element = 'lead';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nList the elements of all the triple bonds.\n", "response": "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.bond_id = 'TR000_1_2';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat percentage of bonds have the most common combination of atoms' elements?\n", "response": "SELECT count(bond.bond_id) / count(connected.bond_id) * 100 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id GROUP BY bond.bond_id ORDER BY count(bond.bond_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat proportion of single bonds are carcinogenic?\n", "response": "SELECT count(DISTINCT bond.bond_id) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id2 = 'TR000_1' AND bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nCalculate the total atoms consisting of the element carbon and hydrogen.\n", "response": "SELECT sum(atom.atom_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nList down atom id2 for atoms with element sulfur.\n", "response": "SELECT atom_id2 FROM atom WHERE element = 'sulfur';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat are the bond type for atoms with element Tin?\n", "response": "SELECT bond.bond_type FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.element = 'Tin';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many elements are there for single bond molecules?\n", "response": "SELECT count(atom.element) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nCalculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.\n", "response": "SELECT sum(atom.atom_id) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE atom.element = 'phosphorus' OR atom.element = 'bromine';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWrite down bond id for molecules that are carcinogenic.\n", "response": "SELECT bond.bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nAmong the single bond molecule id, which molecules are not carcinogenic?\n", "response": "SELECT DISTINCT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat is the composition of element chlorine in percentage among the single bond molecules?\n", "response": "SELECT molecule.label, SUM(connected.atom_id) / SUM(connected.atom_id2) * 100 FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON bond.bond_id = connected.bond_id INNER JOIN molecule ON molecule.molecule_id = bond.molecule_id WHERE atom.element = 'chlorine' GROUP BY molecule.label;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nmolecule.molecule_id ( TR000 , TR001 , TR002 )\natom.molecule_id ( TR000 , TR001 , TR002 )\nbond.molecule_id ( TR000 , TR001 , TR002 )\nWhat are the labels for TR000, TR001 and TR002?\n", "response": "SELECT molecule.label FROM molecule WHERE molecule.molecule_id IN ('TR000', 'TR001', 'TR002');\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nList down the molecule id for non carcinogenic molecules.\n", "response": "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nmolecule.molecule_id ( TR000 , TR030 )\natom.molecule_id ( TR000 , TR030 )\nbond.molecule_id ( TR000 , TR030 )\nCalculate the total carcinogenic molecules for molecule id from TR000 to TR030.\n", "response": "SELECT sum(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR000 , TR050 )\nmolecule.molecule_id ( TR000 , TR050 )\natom.molecule_id ( TR000 , TR050 )\nList down the bond type for molecules from molecule id TR000 to TR050.\n", "response": "SELECT bond.bond_type FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR000' AND 'TR050';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR001_10_11 )\nconnected.bond_id ( TR001_10_11 )\nWhat are the elements for bond id TR001_10_11?\n", "response": "SELECT atom.element FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE bond.bond_id = 'TR001_10_11';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many bond id have element iodine?\n", "response": "SELECT count(bond_id) FROM bond WHERE element = 'iodine';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nAmong the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?\n", "response": "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'Ca';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR001_1_8 )\nconnected.bond_id ( TR001_1_8 )\nDoes bond id TR001_1_8 have both element of chlorine and carbon?\n", "response": "SELECT count(*) FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND bond.bond_id = 'TR001_1_8';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nList down two molecule id of triple bond non carcinogenic molecules with element carbon.\n", "response": "SELECT molecule.molecule_id FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat is the percentage of element chlorine in carcinogenic molecules?\n", "response": "SELECT cast(count(CASE WHEN atom.element = 'c' THEN molecule.molecule_id ELSE NULL END) AS REAL) * 100 / count(molecule.molecule_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nmolecule.molecule_id ( TR001 )\natom.molecule_id ( TR001 )\nbond.molecule_id ( TR001 )\nList the toxicology elements associated with molecule TR001.\n", "response": "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR001';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nGive me the molecule ID of the double bond type.\n", "response": "SELECT molecule_id FROM bond WHERE bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable connected , columns = [ connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWrite down the atom IDs of the first and second atoms of triple bond type molecules.\n", "response": "SELECT atom.atom_id FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '=-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR005_16_26 )\nconnected.bond_id ( TR005_16_26 )\nWhat are the toxicology elements associated with bond ID TR005_16_26?\n", "response": "SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR005_16_26';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many of the single bond type molecules are non-carcinogenic?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type != 'carcinogenic';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR001_10_11 )\nconnected.bond_id ( TR001_10_11 )\nWhat is the label for bond ID TR001_10_11?\n", "response": "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_10_11';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nEnumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not.\n", "response": "SELECT bond_id FROM bond WHERE bond_type IN ('-','=');\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nTally the toxicology element of the 4th atom of each molecule that was carcinogenic.\n", "response": "SELECT sum(atom.element), molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR000_4' GROUP BY molecule.molecule_id;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nmolecule.molecule_id ( TR006 )\natom.molecule_id ( TR006 )\nbond.molecule_id ( TR006 )\nWhat is the ratio of Hydrogen elements in molecule ID TR006? Please indicate its label.\n", "response": "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'H';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nIdentify whether the chemical compound that contains Calcium is carcinogenic.\n", "response": "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '+';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nDetermine the bond type that is formed in the chemical compound containing element Tellurium.\n", "response": "SELECT bond.bond_type FROM bond INNER JOIN atom ON bond.molecule_id = atom.molecule_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'cl' AND molecule.label = '+';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR001_10_11 )\nconnected.bond_id ( TR001_10_11 )\nName chemical elements that form a bond TR001_10_11.\n", "response": "SELECT atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_id = 'TR001_10_11';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nAmong all chemical compounds identified in the database, what percent of compounds form a triple-bond.\n", "response": "SELECT cast(sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) FROM molecule;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR047 )\nmolecule.molecule_id ( TR047 )\natom.molecule_id ( TR047 )\nAmong all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.\n", "response": "SELECT cast(sum(CASE WHEN connected.atom_id = connected.atom_id2 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR047';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.atom_id ( TR001_1 )\nconnected.atom_id ( TR001_1 )\nconnected.atom_id2 ( TR001_1 )\nIdentify whether the molecule that contains atom TR001_1 is carcinogenic.\n", "response": "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.atom_id = 'TR001_1';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nmolecule.molecule_id ( TR151 )\natom.molecule_id ( TR151 )\nbond.molecule_id ( TR151 )\nIs molecule TR151 carcinogenic?\n", "response": "SELECT label FROM molecule WHERE molecule_id = 'TR151';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.molecule_id ( TR151 )\nmolecule.molecule_id ( TR151 )\nbond.molecule_id ( TR151 )\nWhich toxic element can be found in the molecule TR151?\n", "response": "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR151';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many chemical compounds in the database are identified as carcinogenic.\n", "response": "SELECT count(molecule.molecule_id) FROM molecule WHERE molecule.label = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.molecule_id ( TR010 , TR050 )\nmolecule.molecule_id ( TR010 , TR050 )\nbond.molecule_id ( TR010 , TR050 )\nIdentify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.\n", "response": "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id BETWEEN 'TR010' AND 'TR050' AND atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many atoms belong to the molecule labeled with carcinogenic compounds?\n", "response": "SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'carcinogenic compounds';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhich bond ids are double-bond with carcinogenic compound?\n", "response": "SELECT bond.bond_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id = 'TR000_1' AND connected.atom_id2 = 'TR000_2' AND bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?\n", "response": "SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' AND molecule.label = 'carcinogenic';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nIndicate the molecule id is belonging to the TR00_1_2 bond that has the first atom named TR00_1.\n", "response": "SELECT bond.molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.atom_id = 'TR00_1';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nAmong the atoms that contain element carbon, which one does not contain compound carcinogenic?\n", "response": "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nCalculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.\n", "response": "SELECT cast(sum(iif(molecule.label = '+', 1, 0)) AS REAL) * 100 / count(molecule.molecule_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nmolecule.molecule_id ( TR124 )\natom.molecule_id ( TR124 )\nbond.molecule_id ( TR124 )\nIs molecule TR124 carcinogenic?\n", "response": "SELECT label FROM molecule WHERE molecule_id = 'TR124';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.molecule_id ( TR186 )\nmolecule.molecule_id ( TR186 )\nbond.molecule_id ( TR186 )\nWhat atoms comprise TR186?\n", "response": "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR186';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR007_4_19 )\nconnected.bond_id ( TR007_4_19 )\nWhat is the bond type of TR007_4_19?\n", "response": "SELECT bond.bond_type FROM bond WHERE bond.bond_id = 'TR007_4_19';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nconnected.bond_id ( TR001_2_4 )\nbond.bond_id ( TR001_2_4 )\nName the elements that comprise the atoms of bond TR001_2_4.\n", "response": "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id2 WHERE connected.bond_id = 'TR001_2_4';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR006 )\nmolecule.molecule_id ( TR006 )\natom.molecule_id ( TR006 )\nHow many double bonds does TR006 have and is it carcinogenic?\n", "response": "SELECT count(DISTINCT bond.bond_id) FROM bond WHERE bond.molecule_id = 'TR006' AND bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nList all carcinogenic molecules and their elements.\n", "response": "SELECT molecule.label, atom.element FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nName all bonds with single bond types and what atoms are connected to the molecules.\n", "response": "SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id GROUP BY bond.bond_type, connected.atom_id, connected.atom_id2;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhich molecules have triple bonds and list all the elements they contain.\n", "response": "SELECT molecule.label, atom.element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nconnected.bond_id ( TR000_2_3 )\nbond.bond_id ( TR000_2_3 )\nName the atoms' elements that form bond TR000_2_3.\n", "response": "SELECT atom.element FROM atom INNER JOIN bond ON atom.atom_id = bond.atom_id WHERE bond.bond_id = 'TR000_2_3';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many bonds are created by bonding atoms with chlorine element?\n", "response": "SELECT count(*) FROM BOND WHERE element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR346 )\natom.molecule_id ( TR346 )\nList out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?\n", "response": "SELECT atom.atom_id, count(bond.bond_type) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.molecule_id = 'TR346' GROUP BY atom.atom_id;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '=' AND molecule.label = 'carcinogenic';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many molecules without sulphur element is not having double bond?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR001_2_4 )\nconnected.bond_id ( TR001_2_4 )\nWhat is the carcinogenic label for bond TR001_2_4?\n", "response": "SELECT molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_2_4';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.molecule_id ( TR005 )\nbond.molecule_id ( TR005 )\nHow many atoms belong to molecule id TR005?\n", "response": "SELECT count(atom.atom_id) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR005';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many single bonds are there in the list?\n", "response": "SELECT count(*) FROM bond WHERE bond_type = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.element ( cl )\nAmong the molecules which contain \"cl\" element, which of them are carcinogenic?\n", "response": "SELECT molecule.molecule_id FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'cl';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nAmong the molecules which contain \"c\" element, which of them are not carcinogenic?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c' AND molecule.label = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nCalculate the percentage of carcinogenic molecules which contain the Chlorine element.\n", "response": "SELECT cast(sum(CASE WHEN atom.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR001_1_7 )\nconnected.bond_id ( TR001_1_7 )\nWhat is the molecule id of bond id TR001_1_7?\n", "response": "SELECT molecule.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_id = 'TR001_1_7';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.bond_id ( TR001_3_4 )\nconnected.bond_id ( TR001_3_4 )\nHow many elements are contained in bond_id TR001_3_4?\n", "response": "SELECT count(CASE WHEN atom.element = 'cl' THEN connected.atom_id ELSE NULL END) FROM connected INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE connected.bond_id = 'TR001_3_4';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nconnected.atom_id2 ( TR000_1 , TR000_2 )\nconnected.atom_id ( TR000_1 , TR000_2 )\natom.atom_id ( TR000_1 , TR000_2 )\nWhat is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?\n", "response": "SELECT bond.bond_type FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id2 = 'TR000_2' AND connected.atom_id = 'TR000_1';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable connected , columns = [ connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.atom_id ( TR000_2 , TR000_4 )\nconnected.atom_id2 ( TR000_2 , TR000_4 )\nconnected.atom_id ( TR000_2 , TR000_4 )\nWhat is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?\n", "response": "SELECT molecule_id FROM atom WHERE atom_id = 'TR000_2' AND atom_id = 'TR000_4';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.atom_id ( TR000_1 )\nconnected.atom_id ( TR000_1 )\nconnected.atom_id2 ( TR000_1 )\nWhat is the element of toxicology for the atom with the ID of TR000_1?\n", "response": "SELECT atom.element FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id WHERE connected.atom_id = 'TR000_1';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nmolecule.molecule_id ( TR000 )\natom.molecule_id ( TR000 )\nbond.molecule_id ( TR000 )\nIs molecule TR000 is carcinogenic or not?\n", "response": "SELECT molecule.label FROM molecule WHERE molecule.molecule_id = 'TR000';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nFind the percentage of atoms with single bond.\n", "response": "SELECT 100.0 * count(connected.atom_id) / count(atom.atom_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id GROUP BY connected.atom_id;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.element ( text | values : cl , c ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many carcinogenic molecules that consisted of Nitrogen?\n", "response": "SELECT count(*) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'N';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhich molecule consisted of Sulphur atom with double bond?\n", "response": "SELECT molecule.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 's' AND molecule.label = '+';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhich non-carcinogenic molecules consisted more than 5 atoms?\n", "response": "SELECT DISTINCT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id INNER JOIN connected ON atom.atom_id = connected.atom_id GROUP BY molecule.label HAVING count(connected.atom_id) > 5;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR024 )\nmolecule.molecule_id ( TR024 )\natom.molecule_id ( TR024 )\nList all the elements with double bond, consisted in molecule TR024.\n", "response": "SELECT element FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE molecule.molecule_id = 'TR024' GROUP BY element HAVING COUNT(*) > 1;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhich carcinogenic molecule have the highest number of atoms consisted in it?\n", "response": "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id GROUP BY molecule.label ORDER BY count(atom.atom_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nCalculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.\n", "response": "SELECT cast(sum(iif(molecule.label = '+', 1, 0)) AS REAL) * 100 / count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.label ( text | values : + , - ) , molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nHow many of the molecules are carcinogenic?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE atom.element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR004 , TR010 )\nmolecule.molecule_id ( TR004 , TR010 )\natom.molecule_id ( TR004 , TR010 )\nAmong the molecules between TR004 to TR010, how many of them has single bonds?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.molecule_id ( TR008 )\nmolecule.molecule_id ( TR008 )\nbond.molecule_id ( TR008 )\nIn the molecule TR008, how many carbons are present?\n", "response": "SELECT count(connected.atom_id) FROM connected INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE atom.molecule_id = 'TR008';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable atom , columns = [ atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\natom.atom_id ( TR004_7 )\nconnected.atom_id ( TR004_7 )\nconnected.atom_id2 ( TR004_7 )\nWhat is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?\n", "response": "SELECT element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.atom_id = 'TR004_7' AND molecule.label = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nWhat is the total number of molecules with double bonded oxygen?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'o' AND bond.bond_type = '=';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.bond_type ( text | values : - , = ) , bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nin molecules with triple bonds, how many of them are not carcinogenic?\n", "response": "SELECT count(molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '-' AND bond.bond_type = '-';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_type ( text | values : - , = ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) ]\ntable atom , columns = [ atom.element ( text | values : cl , c ) , atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR016 )\natom.molecule_id ( TR016 )\nList the element and bond type included in the molecule with molecule ID of TR016.\n", "response": "SELECT atom.element, bond.bond_type FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR016';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\ntable connected , columns = [ connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) , connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) ]\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents :\nbond.molecule_id ( TR012 )\nmolecule.molecule_id ( TR012 )\natom.molecule_id ( TR012 )\nWhat is the atom ID of double bonded carbon in TR012 molecule?\n", "response": "SELECT atom_id FROM atom WHERE molecule_id = 'TR012' AND element = 'c';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable molecule , columns = [ molecule.molecule_id ( text | primary key | values : TR000 , TR001 ) , molecule.label ( text | values : + , - ) ]\ntable atom , columns = [ atom.molecule_id ( text | values : TR000 , TR001 ) , atom.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , atom.element ( text | values : cl , c ) ]\ntable connected , columns = [ connected.atom_id ( text | primary key | values : TR000_1 , TR000_2 ) , connected.atom_id2 ( text | primary key | values : TR000_2 , TR000_1 ) , connected.bond_id ( text | values : TR000_1_2 , TR000_2_3 ) ]\ntable bond , columns = [ bond.molecule_id ( text | values : TR000 , TR001 ) , bond.bond_id ( text | primary key | values : TR000_1_2 , TR000_2_3 ) , bond.bond_type ( text | values : - , = ) ]\nforeign keys :\natom.molecule_id = molecule.molecule_id\nbond.molecule_id = molecule.molecule_id\nconnected.bond_id = bond.bond_id\nconnected.atom_id2 = atom.atom_id\nconnected.atom_id = atom.atom_id\nmatched contents : None\nList the atom ID of the carcinogenic molecule that contains oxygen?\n", "response": "SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'o';\t", "n_examples": 0, "db_id": "toxicology"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.hasfoil ( integer | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.power ( text | values : 4 , 3 ) , cards.hasnonfoil ( integer | values : 1 , 0 ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nWhich are the cards that have incredibly powerful foils.\n", "response": "SELECT * FROM cards WHERE cards.power > 4;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.hasfoil ( integer | values : 0 , 1 ) , cards.bordercolor ( text | values : black , white ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.isalternative ( integer | values : 0 , 1 ) , cards.hasnonfoil ( integer | values : 1 , 0 ) , cards.power ( text | values : 4 , 3 ) ]\ntable sets , columns = [ sets.isfoilonly ( integer | values : 0 , 1 ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( borderless )\nWhat are the borderless cards available without powerful foils?\n", "response": "SELECT * FROM cards WHERE hasnonfoil = 0 AND hasfoil = 0;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.faceconvertedmanacost ( real | values : 4.0 , 5.0 ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nList the card names with value that cost more converted mana for the face.\n", "response": "SELECT cards.name, cards.convertedmanacost FROM cards WHERE cards.faceconvertedmanacost > cards.convertedmanacost;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.edhrecrank ( integer | comment : rec rank in edh | values : 15650 , 12702 ) , cards.frameversion ( text | values : 2003 , 1993 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.frameeffects ( text | values : legendary , nyxtouched ) ]\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.edhrecrank ( 2015 , 100 )\ncards.frameversion ( 2015 )\ncards.id ( 2015 , 100 )\nforeign_data.id ( 2015 , 100 )\nlegalities.id ( 2015 , 100 )\nName all cards with 2015 frame style ranking below 100 on EDHRec.\n", "response": "SELECT name FROM cards WHERE frameversion = '2015' AND edhrecrank < 100;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable cards , columns = [ cards.rarity ( text | values : uncommon , common ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.types ( text | values : Creature , Instant ) , cards.isreprint ( integer | values : 1 , 0 ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.block ( text | values : Core Set , Mirrodin ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.flavortext ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.format ( gladiator )\nlegalities.status ( Banned )\ncards.rarity ( mythic )\ncards.name ( Rarity )\nList all the mythic rarity print cards banned in gladiator format.\n", "response": "SELECT name FROM cards WHERE rarity = 'mythic' AND format = 'gladiator' AND status = 'Banned';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable cards , columns = [ cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.otherfaceids ( text ) , cards.types ( text | values : Creature , Instant ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.faceconvertedmanacost ( real | values : 4.0 , 5.0 ) , cards.subtypes ( text | values : Human,Cleric , Angel ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.block ( text | values : Core Set , Mirrodin ) ]\ntable foreign_data , columns = [ foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.format ( vintage )\ncards.type ( Artifact )\ncards.types ( Artifact )\nFor artifact type of cards that do not have multiple faces on the same card, state its legalities for vintage play format.\n", "response": "SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.type = 'Artifact' AND cards.faceconvertedmanacost IS NULL;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.uuid ( text ) , legalities.status ( text | values : Legal , Banned ) ]\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.power ( text | values : 4 , 3 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.uuid ( text ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.uuid ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) , sets.block ( text | values : Core Set , Mirrodin ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.format ( commander )\nlegalities.status ( Legal )\nsets.type ( commander )\nsets.block ( Commander )\nList all the card id and artist with unknown power which are legal for commander play format.\n", "response": "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND cards.power = 'unknown';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.istextless ( integer | values : 0 , 1 ) , cards.text ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.isfullart ( integer | values : 0 , 1 ) , cards.watermark ( text | values : set (HOU) , set (LGN) ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) , legalities.format ( text | values : commander , duel ) ]\ntable foreign_data , columns = [ foreign_data.text ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.block ( text | values : Core Set , Mirrodin ) , sets.type ( text | values : core , masters ) , sets.booster ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Stephen Daniele )\nFind all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.\n", "response": "SELECT cards.text, rulings.text FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.artist = 'Stephen Daniele';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.number ( text | values : 1 , 2 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavorname ( text ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Sublime Epiphany )\ncards.number ( 74s )\nDescribe the information about rulings for card named 'Sublime Epiphany' with number 74s.\n", "response": "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Sublime Epiphany' AND cards.number = '74s';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.printings ( text | values : 10E,JUD,UMA ) , cards.promotypes ( text | values : boxtopper,boosterfun , boosterfun ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.ispromo ( integer | comment : is promotion | values : 0 , 1 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents : None\nName the card and artist with the most ruling information. Also state if the card is a promotional printing.\n", "response": "SELECT cards.artist, cards.printings FROM cards INNER JOIN rulings ON cards.id = rulings.id GROUP BY cards.artist, cards.printings ORDER BY count(rulings.id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) , foreign_data.text ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.number ( text | values : 1 , 2 ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.isalternative ( integer | values : 0 , 1 ) , cards.flavortext ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable sets , columns = [ sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.type ( text | values : core , masters ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.id ( 29 )\ncards.id ( 29 )\ncards.number ( 29 )\ncards.name ( Annul )\nState the alternative languages available for card named Annul numbered 29.\n", "response": "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.number = 29;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable cards , columns = [ cards.isalternative ( integer | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.flavorname ( text ) , cards.flavortext ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.type ( text | values : core , masters ) , sets.block ( text | values : Core Set , Mirrodin ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Japanese )\nset_translations.language ( Japanese )\nName all the cards which have alternative language in Japanese.\n", "response": "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.isalternative = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.uuid ( text ) ]\ntable cards , columns = [ cards.availability ( text | values : mtgo,paper , paper ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavortext ( text ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Chinese Simplified )\nset_translations.language ( Chinese Simplified )\nCalculate the percentage of the cards availabe in Chinese Simplified.\n", "response": "SELECT cast(sum(CASE WHEN cards.availability = 'mtgo' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards WHERE cards.availability = 'mtgo';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.type ( text | values : core , masters ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.number ( text | values : 1 , 2 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.setcode ( text | values : 10E , 2ED ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.language ( Italian )\nforeign_data.language ( Italian )\nList all the sets available in Italian translation. State the total number of cards per set.\n", "response": "SELECT sets.name, sets.totalsetsize, sets.basesetsize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.types ( text | values : Creature , Instant ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.isfullart ( integer | values : 0 , 1 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable foreign_data , columns = [ foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.flavortext ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Aaron Boyd )\nHow many types of cards does the artist Aaron Boyd illustrated about card art?\n", "response": "SELECT count(type) FROM cards WHERE artist = 'Aaron Boyd';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.keywords ( text | values : First strike , Flying ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavorname ( text ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.flavortext ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Angel of Mercy )\nWhat is the keyword found on card 'Angel of Mercy'?\n", "response": "SELECT cards.keywords FROM cards WHERE cards.name = 'Angel of Mercy';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.power ( text | values : 4 , 3 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.number ( text | values : 1 , 2 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.mcmid ( text | values : 16165 , 16166 ) , cards.hasalternativedecklimit ( integer | values : 0 , 1 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents : None\nHow many cards have infinite power?\n", "response": "SELECT count(cards.id) FROM cards WHERE cards.hasalternativedecklimit = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.ispromo ( integer | comment : is promotion | values : 0 , 1 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.promotypes ( text | values : boxtopper,boosterfun , boosterfun ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.types ( text | values : Creature , Instant ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.booster ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Duress )\nWhat type of promotion is of card 'Duress'?\n", "response": "SELECT promotypes FROM cards WHERE name = 'Duress';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.bordercolor ( text | values : black , white ) , cards.colors ( text | values : W , B ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.coloridentity ( text | values : W , B ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Ancestor's Chosen )\nWhat is the border color of card \"Ancestor's Chosen\"?\n", "response": "SELECT cards.bordercolor FROM cards WHERE cards.name = 'Ancestor''s Chosen';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.types ( text | values : Creature , Instant ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.originaltype ( text | values : Creature - Human Cleric , Creature - Angel ) , cards.printings ( text | values : 10E,JUD,UMA ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) ]\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Ancestor's Chosen )\nWhat is the type of the card \"Ancestor's Chosen\" as originally printed?\n", "response": "SELECT cards.originaltype FROM cards WHERE cards.name = 'Ancestor's Chosen';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.setcode ( text | values : 10E , 2ED ) , cards.flavorname ( text ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.isfoilonly ( integer | values : 0 , 1 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Angel of Mercy )\ncards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question What are the languages available for the set that card 'Angel of Mercy' is in?\n", "response": "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code INNER JOIN cards ON sets.id = cards.setcode WHERE cards.name = 'Angel of Mercy';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.status ( text | values : Legal , Banned ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.text ( text ) , cards.istextless ( integer | values : 0 , 1 ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) , cards.uuid ( text ) , cards.availability ( text | values : mtgo,paper , paper ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.uuid ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.language ( text | values : German , Spanish ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.status ( Restricted )\nHow many cards of legalities whose status is restricted have text boxes?\n", "response": "SELECT count(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.istextless = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.text ( text ) , cards.flavorname ( text ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.type ( text | values : core , masters ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Condemn )\nWhat is the description about the ruling of card \"Condemn\"?\n", "response": "SELECT text FROM rulings WHERE id = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.status ( text | values : Legal , Banned ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.uuid ( text ) , legalities.format ( text | values : commander , duel ) ]\ntable cards , columns = [ cards.isstarter ( integer | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.dueldeck ( text | values : a , b ) , cards.uuid ( text ) , cards.hasalternativedecklimit ( integer | values : 0 , 1 ) , cards.availability ( text | values : mtgo,paper , paper ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.status ( Restricted )\nHow many cards of legalities whose status is restricted are found in a starter deck?\n", "response": "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isstarter = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.number ( text | values : 1 , 2 ) ]\ntable legalities , columns = [ legalities.status ( text | values : Legal , Banned ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\ntable sets , columns = [ sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Cloudchaser Eagle )\nWhat is the status of card \"Cloudchaser Eagle\"?\n", "response": "SELECT legalities.status FROM legalities INNER JOIN cards ON legalities.id = cards.id WHERE cards.name = 'Cloudchaser Eagle';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.types ( text | values : Creature , Instant ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Benalish Knight )\nWhat is the type of card \"Benalish Knight\"?\n", "response": "SELECT cards.type FROM cards WHERE cards.name = 'Benalish Knight';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.setcode ( text | values : 10E , 2ED ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.types ( text | values : Creature , Instant ) , cards.uuid ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.uuid ( text ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.uuid ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Benalish Knight )\nWhat is the rule of playing card \"Benalish Knight\"?\n", "response": "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Benalish Knight';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) ]\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavortext ( text ) , cards.flavorname ( text ) , cards.isfullart ( integer | values : 0 , 1 ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Phyrexian )\nPlease provide the names of the artists who illustrated the card art in Phyrexian.\n", "response": "SELECT cards.artist FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Phyrexian';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.bordercolor ( text | values : black , white ) , cards.istextless ( integer | values : 0 , 1 ) , cards.hasfoil ( integer | values : 0 , 1 ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.types ( text | values : Creature , Instant ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) , legalities.status ( text | values : Legal , Banned ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.uuid ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( borderless )\nWhat is the percentage of borderless cards?\n", "response": "SELECT COUNT(*) FROM cards WHERE cards.bordercolor = 'borderless';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.uuid ( text ) , foreign_data.flavortext ( text ) , foreign_data.text ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.isreprint ( integer | values : 1 , 0 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavortext ( text ) , cards.number ( text | values : 1 , 2 ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.flavorname ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( German )\nset_translations.language ( German )\nHow many cards that illusrtated in German have been reprinted?\n", "response": "SELECT count(*) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND cards.isreprint = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.flavortext ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavortext ( text ) , cards.istextless ( integer | values : 0 , 1 ) , cards.bordercolor ( text | values : black , white ) , cards.flavorname ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Russian )\ncards.bordercolor ( borderless )\nset_translations.language ( Russian )\nHow many borderless cards are illustrated in Russian?\n", "response": "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Russian' AND cards.bordercolor = 'borderless';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.uuid ( text ) , foreign_data.flavortext ( text ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable cards , columns = [ cards.isstoryspotlight ( integer | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavortext ( text ) , cards.flavorname ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( French )\nset_translations.language ( French )\nWhat is the percentage of cards whose language is French among the Story Spotlight cards?\n", "response": "SELECT cast(sum(iif(cards.isstoryspotlight = 1, 1, 0)) AS REAL) * 100 / count(cards.id) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'French';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.toughness ( text | values : 4 , 3 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.number ( text | values : 1 , 2 ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.mcmid ( text | values : 16165 , 16166 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.toughness ( 99 )\ncards.id ( 99 )\ncards.number ( 99 )\ncards.tcgplayerproductid ( 99 )\ncards.mcmid ( 99 )\nHow many cards are there with toughness of 99?\n", "response": "SELECT count(id) FROM cards WHERE toughness = 99;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.isfullart ( integer | values : 0 , 1 ) , cards.facename ( text | values : Dusk , Dawn ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Aaron Boyd )\nName the cards that were illustrated by Aaron Boyd.\n", "response": "SELECT cards.name FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.artist = 'Aaron Boyd';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.isonlineonly ( integer | values : 0 , 1 ) , cards.bordercolor ( text | values : black , white ) , cards.colors ( text | values : W , B ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.coloridentity ( text | values : W , B ) ]\ntable sets , columns = [ sets.isonlineonly ( integer | values : 0 , 1 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.isforeignonly ( integer | values : 0 , 1 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( black )\ncards.availability ( mtgo )\nHow many black border cards are only available on mtgo?\n", "response": "SELECT count(cards.id) FROM cards WHERE cards.bordercolor = 'black' AND cards.availability = 'mtgo';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.mcmid ( text | values : 16165 , 16166 ) , cards.faceconvertedmanacost ( real | values : 4.0 , 5.0 ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents : None\nList down all the card IDs with converted mana cost of 0.\n", "response": "SELECT cards.id FROM cards WHERE cards.convertedmanacost = 0;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.keywords ( text | values : First strike , Flying ) , cards.layout ( text | values : normal , aftermath ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.flavortext ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.keywords ( Flying )\nWhat are the card layout of cards with keyword of flying?\n", "response": "SELECT layout FROM cards WHERE keywords = 'Flying';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.originaltype ( text | values : Creature - Human Cleric , Creature - Angel ) , cards.subtypes ( text | values : Human,Cleric , Angel ) , cards.types ( text | values : Creature , Instant ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) ]\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.originaltype ( Summon - Angel )\ncards.subtypes ( Angel )\ncards.types ( Summon )\nHow many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?\n", "response": "SELECT count(cards.id) FROM cards WHERE cards.originaltype = 'Summon - Angel' AND cards.subtypes != 'Angel';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.isfoilonly ( integer | values : 0 , 1 ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable cards , columns = [ cards.power ( text | values : 4 , 3 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.hasnonfoil ( integer | values : 1 , 0 ) , cards.hasfoil ( integer | values : 0 , 1 ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) , cards.side ( text | values : a , b ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nWhat are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.\n", "response": "SELECT cards.id FROM cards INNER JOIN sets ON cards.mcmid = sets.mcmid WHERE sets.isfoilonly = 1 AND sets.isnonfoilonly = 1 AND cards.power = '4';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.types ( text | values : Creature , Instant ) , cards.dueldeck ( text | values : a , b ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.format ( duel )\nWhat are the cards belong to duel deck a? List the ID.\n", "response": "SELECT id FROM cards WHERE dueldeck = 'a';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.edhrecrank ( integer | comment : rec rank in edh | values : 15650 , 12702 ) , cards.frameversion ( text | values : 2003 , 1993 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.frameeffects ( text | values : legendary , nyxtouched ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.edhrecrank ( 2015 )\ncards.frameversion ( 2015 )\ncards.id ( 2015 )\nlegalities.id ( 2015 )\nforeign_data.id ( 2015 )\nList the edhrecRank for cards with frame version 2015.\n", "response": "SELECT cards.edhrecrank FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.frameversion = '2015';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavorname ( text ) , cards.flavortext ( text ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Chinese Simplified )\nset_translations.language ( Chinese Simplified )\nList down the name of artists for cards in Chinese Simplified.\n", "response": "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.language = 'Chinese Simplified';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) ]\ntable cards , columns = [ cards.availability ( text | values : mtgo,paper , paper ) , cards.flavortext ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavorname ( text ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.isforeignonly ( integer | values : 0 , 1 ) , sets.code ( text | values : 10E , 2ED ) , sets.isonlineonly ( integer | values : 0 , 1 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Japanese )\ncards.availability ( paper )\nset_translations.language ( Japanese )\nWhat are the cards that only available in paper and Japanese language?\n", "response": "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Japanese' AND cards.availability = 'paper';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.bordercolor ( text | values : black , white ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.colors ( text | values : W , B ) , cards.coloridentity ( text | values : W , B ) , cards.colorindicator ( text | values : U , G ) , cards.watermark ( text | values : set (HOU) , set (LGN) ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) , legalities.format ( text | values : commander , duel ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( white )\nlegalities.status ( Banned )\nHow many of the banned cards are white border?\n", "response": "SELECT count(cards.bordercolor) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.bordercolor = 'white';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.uuid ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.uuid ( text ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.flavortext ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavorname ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.code ( text | values : 10E , 2ED ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.uuid ( text ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nmatched contents :\nlegalities.format ( legacy )\nList down the uuid for legacy cards and the foreign language of these cards.\n", "response": "SELECT cards.uuid, foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'legacy';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavorname ( text ) , cards.number ( text | values : 1 , 2 ) , cards.text ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Beacon of Immortality )\nWrite down the ruling of Beacon of Immortality.\n", "response": "SELECT text FROM rulings WHERE uuid = '1349';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.status ( text | values : Legal , Banned ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.uuid ( text ) , legalities.format ( text | values : commander , duel ) ]\ntable cards , columns = [ cards.frameversion ( text | values : 2003 , 1993 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.frameeffects ( text | values : legendary , nyxtouched ) , cards.uuid ( text ) , cards.number ( text | values : 1 , 2 ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.uuid ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.format ( future )\ncards.frameversion ( future )\nHow many cards are having future frame version and what are the legality status of these cards?\n", "response": "SELECT count(cards.frameversion) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Future';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.colors ( text | values : W , B ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.coloridentity ( text | values : W , B ) , cards.bordercolor ( text | values : black , white ) , cards.colorindicator ( text | values : U , G ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.code ( OGW )\nset_translations.setcode ( OGW )\nWhat are the cards for set OGW? State the colour for these cards.\n", "response": "SELECT cards.colors FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'OGW';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.faceconvertedmanacost ( real | values : 4.0 , 5.0 ) , cards.setcode ( text | values : 10E , 2ED ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.setcode ( 10E )\ncards.id ( 5 )\ncards.setcode ( 10E )\nsets.code ( 10E )\nWhat are the cards in set 10E with converted mana of 5 have translation and what are the languages?\n", "response": "SELECT cards.name , foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON foreign_data.id = set_translations.id WHERE set_translations.setcode = '10E' AND foreign_data.language = 'Chinese Simplified';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable cards , columns = [ cards.types ( text | values : Creature , Instant ) , cards.originaltype ( text | values : Creature - Human Cleric , Creature - Angel ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.types ( Creature )\ncards.originaltype ( Creature - Elf )\ncards.type ( Creature )\nList down the name of cards with original types of Creature - Elf and the date of rulings for these cards.\n", "response": "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.id = rulings.uuid WHERE cards.originaltype = 'Creature - Elf' AND rulings.date IS NOT NULL;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.colors ( text | values : W , B ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.bordercolor ( text | values : black , white ) , cards.coloridentity ( text | values : W , B ) , cards.colorindicator ( text | values : U , G ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) ]\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents : None\nWhat are the colors of cards from ID 1-20? What are the format of these cards?\n", "response": "SELECT cards.colors, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.colors ( text | values : W , B ) , cards.bordercolor ( text | values : black , white ) , cards.coloridentity ( text | values : W , B ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.flavorname ( text ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) ]\ntable set_translations , columns = [ set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.booster ( text ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( black )\nAmong the Artifact cards, which are black color and comes with foreign languague translation?\n", "response": "SELECT cards.name FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'German' AND foreign_data.type = 'Criatura \u2014 Cl\u00e9rigo humano' AND cards.colors = 'B';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) ]\ntable cards , columns = [ cards.rarity ( text | values : uncommon , common ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.number ( text | values : 1 , 2 ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.code ( text | values : 10E , 2ED ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.rarity ( uncommon )\ncards.name ( Rarity )\ncards.id ( 3 )\nPick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.\n", "response": "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.hasfoil ( integer | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.power ( text | values : 4 , 3 ) , cards.hasnonfoil ( integer | values : 1 , 0 ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) ]\ntable sets , columns = [ sets.isfoilonly ( integer | values : 0 , 1 ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( John Avon )\nOn how many cards designed by John Avon is its foil non-powerful?\n", "response": "SELECT count(cards.id) FROM cards WHERE cards.artist = 'John Avon' AND cards.hasfoil = 0 AND cards.hasnonfoil = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.colors ( text | values : W , B ) , cards.power ( text | values : 4 , 3 ) , cards.bordercolor ( text | values : black , white ) , cards.coloridentity ( text | values : W , B ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.colorindicator ( text | values : U , G ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( white )\nHow many white bordered cards are powerful?\n", "response": "SELECT count(cards.power) FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.colors = 'white' AND cards.power = '4';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.hand ( text | values : 1 , 0 ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.isoversized ( integer | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) ]\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.text ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( UDON )\ncards.availability ( mtgo )\nHow many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?\n", "response": "SELECT count(*) FROM cards WHERE cards.artist = 'UDON' AND cards.availability = 'mtgo' AND cards.hand = -1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.hascontentwarning ( integer | values : 0 , 1 ) , cards.frameversion ( text | values : 2003 , 1993 ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.frameeffects ( text | values : legendary , nyxtouched ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) , rulings.text ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.frameversion ( 1993 )\ncards.availability ( paper )\ncards.id ( 1993 )\nrulings.id ( 1993 )\nlegalities.id ( 1993 )\nforeign_data.id ( 1993 )\nHow many cards with a 1993 frame version and available on paper have a sensitive content warning?\n", "response": "SELECT count(id) FROM cards WHERE frameversion = '1993' AND availability = 'paper' AND hascontentwarning = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.frameversion ( text | values : 2003 , 1993 ) , cards.layout ( text | values : normal , aftermath ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.bordercolor ( text | values : black , white ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.colors ( text | values : W , B ) ]\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.type ( text | values : core , masters ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.frameversion ( 2003 )\ncards.layout ( normal )\ncards.bordercolor ( black )\ncards.availability ( paper , mtgo )\nlegalities.id ( 2003 )\nWhat is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?\n", "response": "SELECT cards.manacost FROM cards WHERE cards.layout = 'normal' AND cards.frameversion = '2003' AND cards.bordercolor = 'black' AND cards.availability = 'paper' OR cards.availability = 'mtgo';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Rob Alexander )\nHow much unconverted mana do all the cards created by Rob Alexander cost in total?\n", "response": "SELECT sum(cards.convertedmanacost) FROM cards WHERE cards.artist = 'Rob Alexander';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.availability ( text | values : mtgo,paper , paper ) , cards.types ( text | values : Creature , Instant ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) ]\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.tcgplayergroupid ( integer | values : 1 , 115 ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.availability ( arena )\ncards.name ( Arena )\nforeign_data.name ( Arena )\nLists all types of cards available in arena.\n", "response": "SELECT cards.type FROM cards WHERE cards.availability = 'arena';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.flavortext ( text ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.booster ( text ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.side ( text | values : a , b ) , cards.text ( text ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.language ( Spanish )\nforeign_data.language ( Spanish )\nLists the set code of all cards translated into Spanish.\n", "response": "SELECT set_translations.setcode FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id WHERE foreign_data.language = 'Spanish';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.hand ( text | values : 1 , 0 ) , cards.frameeffects ( text | values : legendary , nyxtouched ) , cards.isoversized ( integer | values : 0 , 1 ) , cards.hasalternativedecklimit ( integer | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.isstarter ( integer | values : 0 , 1 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable sets , columns = [ sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.type ( text | values : core , masters ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.frameeffects ( legendary )\nWhat percentage of legendary frame effect cards have a maximum starting maximun hand size of +3?\n", "response": "SELECT 100.0 * count(*) / (SELECT count(*) FROM cards WHERE cards.hand = 3 AND cards.frameeffects = 'legendary') FROM cards;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.isstoryspotlight ( integer | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.text ( text ) , cards.istextless ( integer | values : 0 , 1 ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents : None\nWhat is the percentage of Story Spotlight cards that also have a text box? List them by their ID.\n", "response": "SELECT cards.id , 100.0 * COUNT(rulings.uuid) / COUNT(cards.uuid) FROM cards INNER JOIN rulings ON cards.id = rulings.id GROUP BY cards.id;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.uuid ( text ) , foreign_data.flavortext ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavortext ( text ) , cards.flavorname ( text ) , cards.number ( text | values : 1 , 2 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.type ( text | values : core , masters ) , sets.block ( text | values : Core Set , Mirrodin ) , sets.booster ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Spanish )\nset_translations.language ( Spanish )\nCalculate the percentage of cards in Spanish. List them by name.\n", "response": "SELECT cast(sum(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Spanish';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) ]\ntable cards , columns = [ cards.number ( text | values : 1 , 2 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.setcode ( text | values : 10E , 2ED ) , cards.side ( text | values : a , b ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.id ( 309 )\ncards.number ( 309 )\ncards.id ( 309 )\nIndicates the name of all the languages into which the set whose number of cards is 309 is translated.\n", "response": "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.id = 309;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.block ( text | values : Core Set , Mirrodin ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) ]\ntable cards , columns = [ cards.flavortext ( text ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.flavorname ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.text ( text ) , cards.number ( text | values : 1 , 2 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.block ( Commander )\ncards.name ( Commandeer )\nHow many Brazilian Portuguese translated sets are inside the Commander block?\n", "response": "SELECT count(set_translations.language) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.status ( text | values : Legal , Banned ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.uuid ( text ) , legalities.format ( text | values : commander , duel ) ]\ntable cards , columns = [ cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.types ( text | values : Creature , Instant ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.subtypes ( text | values : Human,Cleric , Angel ) , cards.supertypes ( text | values : Legendary , Basic ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.status ( Legal )\nLists by ID all Creature-type cards with legal status.\n", "response": "SELECT cards.id FROM cards INNER JOIN legalities ON cards.id = legalities.id WHERE cards.types = 'Creature' AND legalities.status = 'Legal';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.types ( text | values : Creature , Instant ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavortext ( text ) , cards.flavorname ( text ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) , sets.block ( text | values : Core Set , Mirrodin ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( German )\nset_translations.language ( German )\nLists all types of cards in German.\n", "response": "SELECT cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.power ( text | values : 4 , 3 ) , cards.setcode ( text | values : 10E , 2ED ) , cards.hascontentwarning ( integer | values : 0 , 1 ) , cards.hasfoil ( integer | values : 0 , 1 ) , cards.number ( text | values : 1 , 2 ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.uuid ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.uuid ( text ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents : None\nHow many null power cards contain info about the triggered ability\n", "response": "SELECT count(cards.power) FROM cards WHERE cards.power IS NULL;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable cards , columns = [ cards.text ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.istextless ( integer | values : 0 , 1 ) , cards.otherfaceids ( text ) , cards.setcode ( text | values : 10E , 2ED ) , cards.originaltext ( text ) ]\ntable foreign_data , columns = [ foreign_data.text ( text ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.uuid ( text ) , foreign_data.flavortext ( text ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.parentcode ( text | values : JMP , MH1 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents : None\nIndicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability\" that do not have multiple faces.\n", "response": "SELECT count(cards.id) FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid INNER JOIN legalities ON legalities.uuid = cards.uuid WHERE foreign_data.type = 'Criatura \u2014 Cl\u00e9rigo humano' AND legalities.format = 'commander' AND cards.istextless = 0 AND cards.otherfaceids IS NULL;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) , cards.bordercolor ( text | values : black , white ) ]\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.flavortext ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Erica Yang )\ncards.availability ( paper )\nlegalities.format ( pauper )\nIs there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.\n", "response": "SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Erica Yang' AND legalities.format = 'pauper' AND cards.availability = 'paper';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.text ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.originaltext ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.text ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.language ( text | values : German , Spanish ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.booster ( text ) , sets.block ( text | values : Core Set , Mirrodin ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.name ( Formation )\nTo which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?\n", "response": "SELECT artist FROM cards WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.bordercolor ( text | values : black , white ) , cards.layout ( text | values : normal , aftermath ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.types ( text | values : Creature , Instant ) , cards.flavorname ( text ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.flavortext ( text ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) , sets.block ( text | values : Core Set , Mirrodin ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Matthew D. Wilson )\ncards.bordercolor ( black )\ncards.layout ( normal )\ncards.types ( Creature )\nforeign_data.language ( French )\nset_translations.language ( French )\nWhat is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?\n", "response": "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.id = cards.uuid WHERE foreign_data.type = 'Criatura \u2014 Cl\u00e9rigo humano' AND cards.layout = 'normal' AND cards.bordercolor = 'black' AND cards.artist = 'Matthew D. Wilson';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) ]\ntable cards , columns = [ cards.rarity ( text | values : uncommon , common ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.printings ( text | values : 10E,JUD,UMA ) , cards.text ( text ) , cards.isreprint ( integer | values : 1 , 0 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Rarity )\nHow many cards with print rarity have ruling text printed on 10/01/2009?\n", "response": "SELECT count(*) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.date = '2009-01-10' AND cards.printings = '10E';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.block ( text | values : Core Set , Mirrodin ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.flavortext ( text ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.number ( text | values : 1 , 2 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.setcode ( text | values : 10E , 2ED ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.text ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.block ( Ravnica )\nforeign_data.id ( 180 )\ncards.id ( 180 )\ncards.number ( 180 )\nWhat language is the set of 180 cards that belongs to the Ravnica block translated into?\n", "response": "SELECT set_translations.language FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.block = 'Ravnica';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.uuid ( text ) ]\ntable cards , columns = [ cards.hascontentwarning ( integer | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) , cards.uuid ( text ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.status ( Legal )\nlegalities.format ( commander )\ncards.name ( Warning , Commandeer )\nWhat percentage of cards with format commander and legal status do not have a content warning?\n", "response": "SELECT COUNT(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'commander' AND legalities.status = 'Legal' AND cards.hascontentwarning = 0;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) ]\ntable cards , columns = [ cards.power ( text | values : 4 , 3 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavortext ( text ) , cards.flavorname ( text ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.number ( text | values : 1 , 2 ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( French )\nset_translations.language ( French )\nWhat percentage of cards without power are in French?\n", "response": "SELECT cast(sum(CASE WHEN cards.power IS NULL THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.power) FROM cards;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable cards , columns = [ cards.types ( text | values : Creature , Instant ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.flavortext ( text ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.setcode ( text | values : 10E , 2ED ) , cards.text ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.language ( Japanese )\nforeign_data.language ( Japanese )\nsets.type ( expansion )\nWhat percentage of Japanese translated sets are expansion sets?\n", "response": "SELECT cast(sum(CASE WHEN set_translations.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.type = 'expansion';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.printings ( text | values : 10E,JUD,UMA ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.isreprint ( integer | values : 1 , 0 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.isfullart ( integer | values : 0 , 1 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Daren Bader )\nWhat kind of printing is on the card that Daren Bader created?\n", "response": "SELECT printings FROM cards WHERE artist = 'Daren Bader';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.bordercolor ( text | values : black , white ) , cards.edhrecrank ( integer | comment : rec rank in edh | values : 15650 , 12702 ) , cards.colors ( text | values : W , B ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.coloridentity ( text | values : W , B ) , cards.colorindicator ( text | values : U , G ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.edhrecrank ( 12000 )\ncards.id ( 12000 )\nrulings.id ( 12000 )\nlegalities.id ( 12000 )\nforeign_data.id ( 12000 )\nHow many color cards with no borders have been ranked higher than 12000 on EDHRec?\n", "response": "SELECT count(cards.id) FROM cards WHERE cards.bordercolor IS NULL AND cards.edhrecrank > 12000;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.isoversized ( integer | values : 0 , 1 ) , cards.isreprint ( integer | values : 1 , 0 ) , cards.ispromo ( integer | comment : is promotion | values : 0 , 1 ) , cards.printings ( text | values : 10E,JUD,UMA ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.promotypes ( text | values : boxtopper,boosterfun , boosterfun ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nHow many cards are oversized, reprinted, and printed for promotions?\n", "response": "SELECT count(*) FROM cards WHERE isoversized = 1 AND isreprint = 1 AND ispromo = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.ispromo ( integer | comment : is promotion | values : 0 , 1 ) , cards.power ( text | values : 4 , 3 ) , cards.types ( text | values : Creature , Instant ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.promotypes ( text | values : boxtopper,boosterfun , boosterfun ) , cards.originaltype ( text | values : Creature - Human Cleric , Creature - Angel ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.uuid ( text ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.name ( Arena )\nPlease list top three unknown power cards that have promotional types for arena league in alphabetical order.\n", "response": "SELECT cards.power FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE foreign_data.name = 'Arena' AND cards.promotypes = 'arena league' ORDER BY cards.power DESC LIMIT 3;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.multiverseid ( integer | values : 148411 , 150317 ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.text ( text ) ]\ntable cards , columns = [ cards.multiverseid ( text | values : 130550 , 129465 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.number ( text | values : 1 , 2 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.flavortext ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.multiverseid ( 149934 )\nforeign_data.id ( 149934 )\nlegalities.id ( 149934 )\nWhat is the language of the card with the multiverse number 149934?\n", "response": "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.id = cards.multiverseid WHERE foreign_data.multiverseid = 149934;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) , cards.power ( text | values : 4 , 3 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) , cards.hasnonfoil ( integer | values : 1 , 0 ) , cards.mtgofoilid ( text | values : 27501 , 26993 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nPlease provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.\n", "response": "SELECT cards.id FROM cards INNER JOIN sets ON cards.cardkingdomfoilid = sets.id ORDER BY cards.cardkingdomfoilid ASC LIMIT 3;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.layout ( text | values : normal , aftermath ) , cards.text ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.istextless ( integer | values : 0 , 1 ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) , cards.number ( text | values : 1 , 2 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.text ( text ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.layout ( normal )\nWhat proportion of cards do not have a text box with a normal layout?\n", "response": "SELECT cast(sum(CASE WHEN cards.istextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / count(cards.id) FROM cards;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.subtypes ( text | values : Human,Cleric , Angel ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.otherfaceids ( text ) , cards.number ( text | values : 1 , 2 ) , cards.facename ( text | values : Dusk , Dawn ) , cards.faceconvertedmanacost ( real | values : 4.0 , 5.0 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.subtypes ( Wizard , Angel )\nWhat are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?\n", "response": "SELECT number FROM cards WHERE otherfaceids IS NULL AND subtypes = 'Angel' OR subtypes = 'Wizard';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.isonlineonly ( integer | values : 0 , 1 ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.isforeignonly ( integer | values : 0 , 1 ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.isonlineonly ( integer | values : 0 , 1 ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) , cards.setcode ( text | values : 10E , 2ED ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.side ( text | values : a , b ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nPlease provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.\n", "response": "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.mtgocode = set_translations.setcode WHERE set_translations.language = 'Chinese Simplified' ORDER BY sets.name ASC LIMIT 3;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.code ( text | values : 10E , 2ED ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.side ( text | values : a , b ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.mcmname ( Archenemy )\nsets.name ( Archenemy )\nset_translations.translation ( Archenemy )\nWhat languages are available in the set known as Archenemy on the magic card market and having the code ARC?\n", "response": "SELECT foreign_data.language FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id WHERE set_translations.setcode = 'ARC';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.parentcode ( text | values : JMP , MH1 ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable cards , columns = [ cards.number ( text | values : 1 , 2 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.setcode ( text | values : 10E , 2ED ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.text ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.number ( 5 )\ncards.id ( 5 )\nWhat is the name of set number 5 and its translation?\n", "response": "SELECT sets.name, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE sets.id = 5;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.booster ( text ) ]\ntable cards , columns = [ cards.number ( text | values : 1 , 2 ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.setcode ( text | values : 10E , 2ED ) , cards.flavortext ( text ) , cards.types ( text | values : Creature , Instant ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.id ( 206 )\nsets.type ( expansion )\ncards.tcgplayerproductid ( 206 )\nWhat is the language and expansion type of set number 206?\n", "response": "SELECT set_translations.language, sets.type FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.id = 206;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.block ( text | values : Core Set , Mirrodin ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavortext ( text ) , cards.flavorname ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.block ( Shadowmoor )\nsets.name ( Shadowmoor )\nPlease list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.\n", "response": "SELECT sets.id, foreign_data.name FROM sets INNER JOIN foreign_data ON sets.id = foreign_data.id WHERE foreign_data.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY foreign_data.name ASC LIMIT 2;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.isforeignonly ( integer | values : 0 , 1 ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.isonlineonly ( integer | values : 0 , 1 ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.uuid ( text ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.hasfoil ( integer | values : 0 , 1 ) , cards.hasnonfoil ( integer | values : 1 , 0 ) , cards.flavortext ( text ) , cards.flavorname ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Japanese )\nset_translations.language ( Japanese )\nWhich set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.\n", "response": "SELECT sets.id FROM sets INNER JOIN foreign_data ON sets.id = foreign_data.id WHERE foreign_data.language = 'Japanese' AND sets.isforeignonly = 0 AND sets.isfoilonly = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.flavortext ( text ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) ]\ntable cards , columns = [ cards.number ( text | values : 1 , 2 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.flavortext ( text ) , cards.flavorname ( text ) , cards.multiverseid ( text | values : 130550 , 129465 ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Russian )\nset_translations.language ( Russian )\nWhich Russian set of cards contains the most cards overall?\n", "response": "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Russian' ORDER BY sets.totalsetsize DESC LIMIT 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.isonlineonly ( integer | values : 0 , 1 ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.setcode ( text | values : 10E , 2ED ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.isonlineonly ( integer | values : 0 , 1 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.isforeignonly ( integer | values : 0 , 1 ) , sets.isfoilonly ( integer | values : 0 , 1 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Chinese Simplified )\nset_translations.language ( Chinese Simplified )\nWhat is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?\n", "response": "SELECT cast(count(CASE WHEN foreign_data.language = 'Chinese Simplified' AND cards.isonlineonly = 1 THEN cards.id ELSE NULL END) AS REAL) * 100 / count(cards.id) FROM foreign_data INNER JOIN cards ON foreign_data.id = cards.setcode WHERE foreign_data.language = 'Chinese Simplified' AND cards.isonlineonly = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.flavortext ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.isonlineonly ( integer | values : 0 , 1 ) , sets.isforeignonly ( integer | values : 0 , 1 ) , sets.tcgplayergroupid ( integer | values : 1 , 115 ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable cards , columns = [ cards.flavortext ( text ) , cards.isonlineonly ( integer | values : 0 , 1 ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Japanese )\nset_translations.language ( Japanese )\nHow many sets are available just in Japanese and not in Magic: The Gathering Online?\n", "response": "SELECT count(sets.id) FROM sets INNER JOIN set_translations ON sets.mtgocode = set_translations.setcode WHERE set_translations.language = 'Japanese' AND sets.isonlineonly = 1 AND sets.isforeignonly = 0;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.bordercolor ( text | values : black , white ) , cards.colors ( text | values : W , B ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.coloridentity ( text | values : W , B ) , cards.colorindicator ( text | values : U , G ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( black )\nHow many card border with black color ? List out the card id.\n", "response": "SELECT cards.id FROM cards WHERE cards.bordercolor = 'black';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.frameeffects ( text | values : legendary , nyxtouched ) , cards.isfullart ( integer | values : 0 , 1 ) , cards.flavortext ( text ) , cards.frameversion ( text | values : 2003 , 1993 ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.frameeffects ( extendedart )\nHow many cards have frame effect as extendedart? List out the id of those cards.\n", "response": "SELECT cards.id FROM cards WHERE cards.frameeffects = 'extendedart';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.isfullart ( integer | values : 0 , 1 ) , cards.bordercolor ( text | values : black , white ) , cards.colors ( text | values : W , B ) , cards.coloridentity ( text | values : W , B ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.flavortext ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( black )\nAmong black card borders, which card has full artwork?\n", "response": "SELECT name FROM cards WHERE bordercolor = 'black' AND isfullart = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.number ( text | values : 1 , 2 ) , cards.setcode ( text | values : 10E , 2ED ) , cards.flavortext ( text ) , cards.text ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.id ( 174 )\ncards.id ( 174 )\nPoint out the language of set id \"174\"?\n", "response": "SELECT language FROM SET_TRANSLATIONS WHERE id = 174;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.code ( text | values : 10E , 2ED ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.parentcode ( text | values : JMP , MH1 ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.keyrunecode ( text | values : 10E , 2ED ) ]\ntable set_translations , columns = [ set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.side ( text | values : a , b ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.types ( text | values : Creature , Instant ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nList out the set name of the set code \"ALL\".\n", "response": "SELECT sets.name FROM sets WHERE sets.code = 'ALL';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavorname ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavortext ( text ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) , sets.type ( text | values : core , masters ) , sets.booster ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.name ( A Pedra Fellwar )\nWhich foreign language used by \"A Pedra Fellwar\"?\n", "response": "SELECT foreign_data.language FROM foreign_data WHERE foreign_data.name = 'A Pedra Fellwar';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.code ( text | values : 10E , 2ED ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.parentcode ( text | values : JMP , MH1 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable set_translations , columns = [ set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.side ( text | values : a , b ) , cards.number ( text | values : 1 , 2 ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nState the set code of the set with release date of 07/13/2007?\n", "response": "SELECT sets.code FROM sets WHERE sets.releasedate = '07/13/2007';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.block ( text | values : Core Set , Mirrodin ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.booster ( text ) , sets.id ( integer | primary key | values : 1 , 2 ) ]\ntable set_translations , columns = [ set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.side ( text | values : a , b ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.colors ( text | values : W , B ) , cards.number ( text | values : 1 , 2 ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.block ( Masques , Mirage )\nMention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".\n", "response": "SELECT sets.basesetsize, sets.code FROM sets WHERE sets.block = 'Masques' AND sets.block = 'Mirage';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.code ( text | values : 10E , 2ED ) , sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.parentcode ( text | values : JMP , MH1 ) , sets.keyrunecode ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.types ( text | values : Creature , Instant ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.side ( text | values : a , b ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) ]\ntable set_translations , columns = [ set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.type ( expansion )\nGive the code of sets have expansion type of 'expansion'?\n", "response": "SELECT sets.code FROM sets WHERE sets.type = 'expansion';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.watermark ( text | values : set (HOU) , set (LGN) ) , cards.types ( text | values : Creature , Instant ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.uuid ( text ) , foreign_data.text ( text ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.booster ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.watermark ( boros )\nName the foreign name of the card that has boros watermark? List out the type of this card.\n", "response": "SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.watermark ( text | values : set (HOU) , set (LGN) ) , cards.types ( text | values : Creature , Instant ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.flavortext ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.text ( text ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) , sets.block ( text | values : Core Set , Mirrodin ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.watermark ( colorpie , flavor )\nWhat is the language and flavor text of the card that has colorpie watermark? List out the type of this card.\n", "response": "SELECT foreign_data.language, foreign_data.flavortext FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Chinese Simplified' AND foreign_data.flavortext = 'colorpie';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.faceconvertedmanacost ( real | values : 4.0 , 5.0 ) , cards.number ( text | values : 1 , 2 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.id ( 10 )\ncards.name ( Abyssal Horror )\nWhat is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?\n", "response": "SELECT sets.name , cast(count(cards.id) AS REAL) * 100 / sets.basesetsize FROM cards INNER JOIN sets ON cards.id = sets.id WHERE cards.convertedmanacost = 10 GROUP BY sets.name;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.code ( text | values : 10E , 2ED ) , sets.type ( text | values : core , masters ) , sets.parentcode ( text | values : JMP , MH1 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) ]\ntable cards , columns = [ cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.setcode ( text | values : 10E , 2ED ) , cards.types ( text | values : Creature , Instant ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.supertypes ( text | values : Legendary , Basic ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.type ( expansion , commander )\ncards.name ( Commandeer )\nlegalities.format ( commander )\nGive the code of sets have expansion commander type?\n", "response": "SELECT sets.code FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE sets.type = 'expansion' AND cards.type = 'commander';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.uuid ( text ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) , foreign_data.flavortext ( text ) ]\ntable cards , columns = [ cards.watermark ( text | values : set (HOU) , set (LGN) ) , cards.types ( text | values : Creature , Instant ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.booster ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.watermark ( abzan )\nName the foreign name of the card that has abzan watermark? List out the type of this card.\n", "response": "SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'abzan';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) ]\ntable cards , columns = [ cards.watermark ( text | values : set (HOU) , set (LGN) ) , cards.types ( text | values : Creature , Instant ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.scryfalloracleid ( text ) , cards.setcode ( text | values : 10E , 2ED ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) , sets.block ( text | values : Core Set , Mirrodin ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.watermark ( azorius )\nWhat is the language of the card that has azorius watermark? List out the type of this card.\n", "response": "SELECT cards.type FROM cards WHERE cards.watermark = 'azorius';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.power ( text | values : 4 , 3 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.isfullart ( integer | values : 0 , 1 ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Aaron Miller )\nOf all the cards that are designed by Aaron Miller, how many of them are incredibly powerful?\n", "response": "SELECT count(cards.power) FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.artist = '<NAME>';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.isstarter ( integer | values : 0 , 1 ) , cards.hand ( text | values : 1 , 0 ) , cards.hasalternativedecklimit ( integer | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.isoversized ( integer | values : 0 , 1 ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) ]\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.type ( text | values : core , masters ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents : None\nHow many cards available in paper have a positive starting maximum hand size?\n", "response": "SELECT count(*) FROM cards WHERE isstarter = 1 AND hand = '1' AND hasalternativedecklimit = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.istextless ( integer | values : 0 , 1 ) , cards.text ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.flavortext ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nPlease list the names of the cards that have a text box.\n", "response": "SELECT cards.name FROM cards WHERE cards.istextless = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.dueldeck ( text | values : a , b ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Ancestor's Chosen )\nWhat's the unconverted mana cost of the card \"Ancestor's Chosen\"?\n", "response": "SELECT cards.convertedmanacost FROM cards WHERE cards.name = 'Ancestor''s Chosen';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.bordercolor ( text | values : black , white ) , cards.power ( text | values : 4 , 3 ) , cards.colors ( text | values : W , B ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.coloridentity ( text | values : W , B ) , cards.colorindicator ( text | values : U , G ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( white )\nAmong the cards with a white border color, how many of them have unknown power?\n", "response": "SELECT count(cards.power) FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.bordercolor = 'white' AND cards.power = 'unknown';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.ispromo ( integer | comment : is promotion | values : 0 , 1 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.otherfaceids ( text ) , cards.facename ( text | values : Dusk , Dawn ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.promotypes ( text | values : boxtopper,boosterfun , boosterfun ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.flavortext ( text ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) , foreign_data.text ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.code ( text | values : 10E , 2ED ) , sets.type ( text | values : core , masters ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nWhich of the cards that are a promotional painting have multiple faces on the same card? Please list their names.\n", "response": "SELECT cards.name FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.ispromo = 1 GROUP BY cards.name HAVING count(DISTINCT cards.facename) > 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.types ( text | values : Creature , Instant ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Molimo, Maro-Sorcerer )\nsets.name ( The List )\nsets.mcmname ( The List )\nWhat's the list of all types for the card \"Molimo, Maro-Sorcerer\"?\n", "response": "SELECT cards.types FROM cards WHERE cards.name = 'Molimo, Maro-Sorcerer';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.ispromo ( integer | comment : is promotion | values : 0 , 1 ) , cards.promotypes ( text | values : boxtopper,boosterfun , boosterfun ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.purchaseurls ( text ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.types ( text | values : Creature , Instant ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.promotypes ( bundle )\nPlease list the websites where I can purchase the cards that have the promotional type of \"bundle\".\n", "response": "SELECT purchaseurls FROM cards WHERE promotypes = 'bundle';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.bordercolor ( text | values : black , white ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.printings ( text | values : 10E,JUD,UMA ) , cards.colors ( text | values : W , B ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.isonlineonly ( integer | values : 0 , 1 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( black )\ncards.availability ( arena , mtgo )\nHow many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?\n", "response": "SELECT count(cards.id) FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.bordercolor = 'black' AND cards.availability = 'arena' OR cards.availability = 'mtgo';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.dueldeck ( text | values : a , b ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Shrine Keeper , Serra Angel , Serra )\nWhich card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?\n", "response": "SELECT cards.name, cards.convertedmanacost FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.name = 'Serra Angel' OR cards.name = 'Shrine Keeper' ORDER BY cards.convertedmanacost DESC LIMIT 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.ispromo ( integer | comment : is promotion | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.promotypes ( text | values : boxtopper,boosterfun , boosterfun ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) , sets.block ( text | values : Core Set , Mirrodin ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nWhich artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?\n", "response": "SELECT artist FROM cards WHERE name = 'Battra, Dark Destroyer' AND ispromo = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.frameversion ( text | values : 2003 , 1993 ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.frameeffects ( text | values : legendary , nyxtouched ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.frameversion ( 2003 )\ncards.id ( 2003 , 3 )\nlegalities.id ( 2003 )\nforeign_data.id ( 2003 )\nPlease list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style.\n", "response": "SELECT name FROM cards WHERE convertedmanacost = ( SELECT max(convertedmanacost) FROM cards WHERE frameversion = 2003 ) AND frameversion = 2003 ORDER BY convertedmanacost DESC LIMIT 3;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavorname ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.flavortext ( text ) , cards.facename ( text | values : Dusk , Dawn ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Italian )\nset_translations.language ( Italian )\ncards.name ( Ancestor's Chosen )\nWhat's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?\n", "response": "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Tenth Edition' AND cards.name = 'Ancestor's Chosen';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavorname ( text ) , cards.setcode ( text | values : 10E , 2ED ) , cards.facename ( text | values : Dusk , Dawn ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Angel of Mercy )\nHow many translations are there for the set of cards with \"Angel of Mercy\" in it?\n", "response": "SELECT count(set_translations.id) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Angel of Mercy';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.setcode ( text | values : 10E , 2ED ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.flavorname ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.translation ( Hauptset Zehnte Edition )\nPlease list the names of the cards in the set \"Hauptset Zehnte Edition\".\n", "response": "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.flavortext ( text ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.isforeignonly ( integer | values : 0 , 1 ) ]\ntable cards , columns = [ cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.flavorname ( text ) , cards.flavortext ( text ) , cards.setcode ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Korean )\nset_translations.language ( Korean )\ncards.name ( Ancestor's Chosen )\nFor the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?\n", "response": "SELECT rulings.text FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Ancestor's Chosen' AND foreign_data.language = 'Korean';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) , cards.isfullart ( integer | values : 0 , 1 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Adam Rex )\nset_translations.translation ( Hauptset Zehnte Edition )\nAmong the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?\n", "response": "SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.uuid = set_translations.setcode WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.basesetsize ( integer | values : 383 , 302 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.block ( text | values : Core Set , Mirrodin ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.setcode ( text | values : 10E , 2ED ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.number ( text | values : 1 , 2 ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.availability ( text | values : mtgo,paper , paper ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.translation ( Hauptset Zehnte Edition )\nHow many cards are there in the base set of \"Hauptset Zehnte Edition\"?\n", "response": "SELECT count(cards.id) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Hauptset Zehnte Edition';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.setcode ( text | values : 10E , 2ED ) , cards.text ( text ) , cards.number ( text | values : 1 , 2 ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.side ( text | values : a , b ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.name ( Eighth Edition )\nWhat is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?\n", "response": "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Eighth Edition';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.isonlineonly ( integer | values : 0 , 1 ) , sets.tcgplayergroupid ( integer | values : 1 , 115 ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) , cards.flavorname ( text ) , cards.facename ( text | values : Dusk , Dawn ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.flavortext ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Angel of Mercy )\nDid the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?\n", "response": "SELECT sets.name FROM sets INNER JOIN set_translations ON sets.id = set_translations.setcode WHERE set_translations.translation = 'Angel of Mercy';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavorname ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.facename ( text | values : Dusk , Dawn ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.flavortext ( text ) ]\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Ancestor's Chosen )\ncards.facename ( Release )\nWhen was the set of cards with \"Ancestor's Chosen\" released?\n", "response": "SELECT sets.releasedate FROM sets WHERE sets.name = 'Tenth Edition';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.types ( text | values : Creature , Instant ) , cards.side ( text | values : a , b ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.type ( expansion )\nset_translations.translation ( Hauptset Zehnte Edition )\nWhat is the expansion type of the set \"Hauptset Zehnte Edition\"?\n", "response": "SELECT type FROM sets WHERE name = 'Hauptset Zehnte Edition';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.block ( text | values : Core Set , Mirrodin ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.flavortext ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.setcode ( text | values : 10E , 2ED ) , cards.text ( text ) , cards.side ( text | values : a , b ) , cards.number ( text | values : 1 , 2 ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.block ( Ice Age )\nsets.name ( Ice Age )\nsets.code ( ICE )\nset_translations.language ( Italian )\nset_translations.setcode ( ICE )\nforeign_data.language ( Italian )\ncards.setcode ( ICE )\nAmong the sets in the block \"Ice Age\", how many of them have an Italian translation?\n", "response": "SELECT count(set_translations.language) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.isforeignonly ( integer | values : 0 , 1 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.isonlineonly ( integer | values : 0 , 1 ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.isonlineonly ( integer | values : 0 , 1 ) , cards.flavorname ( text ) , cards.availability ( text | values : mtgo,paper , paper ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Adarkar Valkyrie )\nIs the set of cards with Adarkar Valkyrie only available outside the United States?\n", "response": "SELECT sets.isforeignonly FROM sets INNER JOIN foreign_data ON sets.uuid = foreign_data.uuid WHERE foreign_data.language = 'English' AND foreign_data.type = 'Criatura \u2014 Cl\u00e9rigo humano';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.basesetsize ( integer | values : 383 , 302 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.block ( text | values : Core Set , Mirrodin ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.flavortext ( text ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.setcode ( text | values : 10E , 2ED ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.number ( text | values : 1 , 2 ) , cards.side ( text | values : a , b ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.language ( Italian )\nforeign_data.language ( Italian )\ncards.id ( 10 )\nAmong the sets of cards that have an Italian translation, how many of them have a base set number of under 10?\n", "response": "SELECT count(sets.name) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Italian' AND sets.basesetsize < 10;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.bordercolor ( text | values : black , white ) , cards.colors ( text | values : W , B ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.coloridentity ( text | values : W , B ) , cards.colorindicator ( text | values : U , G ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( black )\nsets.name ( Coldsnap )\nsets.mcmname ( Coldsnap )\nset_translations.translation ( Coldsnap )\nHow many cards in the set Coldsnap have a black border color?\n", "response": "SELECT count(id) FROM cards WHERE cards.bordercolor = 'black';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.dueldeck ( text | values : a , b ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.name ( Coldsnap )\nsets.mcmname ( Coldsnap )\nset_translations.translation ( Coldsnap )\nPlease list the name of the cards in the set Coldsnap with the highest converted mana cost.\n", "response": "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name LIKE 'Coldsnap' ORDER BY cards.convertedmanacost DESC LIMIT 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Jeremy Jarvis , Aaron Miller , Chippy )\nsets.name ( Coldsnap )\nsets.mcmname ( Coldsnap )\nset_translations.translation ( Coldsnap )\nWhich of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?\n", "response": "SELECT DISTINCT cards.artist FROM cards INNER JOIN sets ON cards.cardkingdomid = sets.id WHERE sets.name = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.number ( text | values : 1 , 2 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.id ( 4 )\ncards.number ( 4 )\nsets.name ( Coldsnap )\nsets.mcmname ( Coldsnap )\nset_translations.translation ( Coldsnap )\nWhat is card number 4 in the set Coldsnap?\n", "response": "SELECT cards.number FROM cards INNER JOIN sets ON cards.cardkingdomid = sets.id WHERE sets.name = 'Coldsnap' AND cards.number = 4;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.power ( text | values : 4 , 3 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.dueldeck ( text | values : a , b ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.power ( 5 )\ncards.id ( 5 )\nsets.name ( Coldsnap )\nset_translations.translation ( Coldsnap )\nAmong the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?\n", "response": "SELECT count(cards.name) FROM cards INNER JOIN sets ON sets.code = cards.dueldeck INNER JOIN set_translations ON set_translations.setcode = sets.code WHERE cards.convertedmanacost > 5 AND set_translations.language = 'unknown';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable cards , columns = [ cards.flavorname ( text ) , cards.flavortext ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.text ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) , sets.block ( text | values : Core Set , Mirrodin ) , sets.type ( text | values : core , masters ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Italian )\ncards.name ( Ancestor's Chosen )\nset_translations.language ( Italian )\nWhat is the Italian flavor text of the card \"Ancestor's Chosen\"?\n", "response": "SELECT cards.flavortext FROM cards INNER JOIN set_translations ON cards.id = set_translations.id WHERE set_translations.language = 'Italian' AND set_translations.id = 41138;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable cards , columns = [ cards.flavorname ( text ) , cards.flavortext ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.text ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) , sets.block ( text | values : Core Set , Mirrodin ) , sets.type ( text | values : core , masters ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Ancestor's Chosen )\nPlease list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.\n", "response": "SELECT foreign_data.language FROM foreign_data INNER JOIN cards ON foreign_data.id = cards.id WHERE cards.name = 'Ancestor''s Chosen';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.types ( text | values : Creature , Instant ) , cards.flavorname ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) , sets.block ( text | values : Core Set , Mirrodin ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( German )\ncards.name ( Ancestor's Chosen )\nset_translations.language ( German )\nWhat's the German type of the card \"Ancestor's Chosen\"?\n", "response": "SELECT foreign_data.type FROM foreign_data INNER JOIN cards ON foreign_data.id = cards.id WHERE cards.name = 'Ancestor's Chosen';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.text ( text ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.number ( text | values : 1 , 2 ) , cards.side ( text | values : a , b ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Italian )\nset_translations.language ( Italian )\nset_translations.translation ( Coldsnap )\nsets.name ( Coldsnap )\nsets.mcmname ( Coldsnap )\nPlease list the Italian text ruling of all the cards in the set Coldsnap.\n", "response": "SELECT rulings.text FROM rulings INNER JOIN set_translations ON rulings.uuid = set_translations.uuid INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Coldsnap' AND set_translations.language = 'Italian';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.faceconvertedmanacost ( real | values : 4.0 , 5.0 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( Italian )\nset_translations.language ( Italian )\nset_translations.translation ( Coldsnap )\nsets.name ( Coldsnap )\nsets.mcmname ( Coldsnap )\nPlease list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.\n", "response": "SELECT cards.name FROM cards INNER JOIN sets ON cards.setcode = sets.code INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian' ORDER BY cards.convertedmanacost DESC LIMIT 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavorname ( text ) , cards.facename ( text | values : Dusk , Dawn ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.code ( text | values : 10E , 2ED ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.uuid ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Reminisce )\nWhen was the ruling for the card 'Reminisce' created?\n", "response": "SELECT rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.faceconvertedmanacost ( real | values : 4.0 , 5.0 ) , cards.number ( text | values : 1 , 2 ) , cards.dueldeck ( text | values : a , b ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.id ( 7 )\ncards.number ( 7 )\nsets.name ( Coldsnap )\nset_translations.translation ( Coldsnap )\nWhat is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?\n", "response": "SELECT sum(CASE WHEN cards.convertedmanacost = 7 THEN cards.faceconvertedmanacost ELSE 0 END) * 100 / sum(cards.faceconvertedmanacost) FROM cards INNER JOIN sets ON cards.mcmid = sets.mcmid WHERE sets.name = 'Coldsnap';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) ]\ntable cards , columns = [ cards.power ( text | values : 4 , 3 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.number ( text | values : 1 , 2 ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.name ( Coldsnap )\nset_translations.translation ( Coldsnap )\nWhat is the percentage of incredibly powerful cards in the set Coldsnap?\n", "response": "SELECT 100.0 * sum(cards.power) / sum(sets.basesetsize) FROM cards INNER JOIN sets ON cards.cardkingdomid = sets.mcmid WHERE sets.name = 'Coldsnap';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.code ( text | values : 10E , 2ED ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.parentcode ( text | values : JMP , MH1 ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.text ( text ) ]\ntable set_translations , columns = [ set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.side ( text | values : a , b ) , cards.number ( text | values : 1 , 2 ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nWhat's the code for the set which was released on 2017/7/14?\n", "response": "SELECT sets.code FROM sets WHERE sets.releasedate = '2017-07-14';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.code ( text | values : 10E , 2ED ) , sets.keyrunecode ( text | values : 10E , 2ED ) , sets.parentcode ( text | values : JMP , MH1 ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) ]\ntable set_translations , columns = [ set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.side ( text | values : a , b ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.number ( text | values : 1 , 2 ) , cards.colors ( text | values : W , B ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.code ( PKHC )\nList the keyrune code for the set whose code is 'PKHC'.\n", "response": "SELECT keyrunecode FROM sets WHERE code = 'PKHC';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.code ( text | values : 10E , 2ED ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.parentcode ( text | values : JMP , MH1 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.keyrunecode ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.side ( text | values : a , b ) , cards.number ( text | values : 1 , 2 ) , cards.colors ( text | values : W , B ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.code ( SS2 )\nsets.keyrunecode ( SS2 )\ncards.setcode ( SS2 )\nFor the set which had 'SS2' as the code, what is its magic card market id?\n", "response": "SELECT sets.mcmid FROM sets WHERE sets.code = 'SS2';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mcmidextras ( integer | comment : magic card market id extras | values : 3209 , 3459 ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.number ( text | values : 1 , 2 ) , cards.side ( text | values : a , b ) , cards.availability ( text | values : mtgo,paper , paper ) ]\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nWhat's the magic card market name for the set which was released on 2017/6/9?\n", "response": "SELECT sets.mcmname FROM sets WHERE sets.releasedate = '2017-06-09';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.booster ( text ) ]\ntable cards , columns = [ cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.types ( text | values : Creature , Instant ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.setcode ( text | values : 10E , 2ED ) , cards.side ( text | values : a , b ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.type ( expansion )\nsets.name ( From the Vault: Lore )\nset_translations.translation ( From The Vault: Lore )\nFor the set \"From the Vault: Lore\", what is its expansion type?\n", "response": "SELECT sets.type FROM sets WHERE sets.name = 'From the Vault: Lore';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.parentcode ( text | values : JMP , MH1 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable cards , columns = [ cards.isoversized ( integer | values : 0 , 1 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.setcode ( text | values : 10E , 2ED ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.side ( text | values : a , b ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.name ( Commander 2014 Oversized , Commander 2014 )\ncards.name ( Commandeer )\ncards.id ( 2014 )\nrulings.id ( 2014 )\nlegalities.id ( 2014 )\nlegalities.format ( commander )\nFor the set \"Commander 2014 Oversized\" , give its parent code.\n", "response": "SELECT parentcode FROM sets WHERE name = 'Commander 2014 Oversized';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.istextless ( integer | values : 0 , 1 ) , cards.text ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.watermark ( text | values : set (HOU) , set (LGN) ) , cards.isfullart ( integer | values : 0 , 1 ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable foreign_data , columns = [ foreign_data.text ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Jim Pavelec )\nFor all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.\n", "response": "SELECT cards.text, rulings.text FROM cards INNER JOIN rulings ON cards.id = rulings.id WHERE cards.artist = 'Jim Pavelec';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.facename ( text | values : Dusk , Dawn ) , cards.flavorname ( text ) ]\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.name ( Evacuation )\ncards.facename ( Release )\nforeign_data.name ( Evacuation )\nWhat was the release date for the set which card \"Evacuation\" in it?\n", "response": "SELECT sets.releasedate FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Evacuation';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.number ( text | values : 1 , 2 ) , cards.setcode ( text | values : 10E , 2ED ) , cards.side ( text | values : a , b ) , cards.availability ( text | values : mtgo,paper , paper ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.translation ( Rinascita di Alara )\nWhat is the number of cards are there in the set of \"Rinascita di Alara\"?\n", "response": "SELECT count(cards.id) FROM cards INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE set_translations.translation = 'Rinascita di Alara';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.types ( text | values : Creature , Instant ) , cards.subtypes ( text | values : Human,Cleric , Angel ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.type ( expansion )\nset_translations.translation ( Huiti\u00e8me \u00e9dition )\nList the expansion type of the set \"Huiti\u00e8me \u00e9dition\".\n", "response": "SELECT type FROM sets WHERE name = 'Huiti\u00e8me \u00e9dition';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavorname ( text ) , cards.flavortext ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.facename ( text | values : Dusk , Dawn ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( French )\nset_translations.language ( French )\nset_translations.setcode ( ICE )\ncards.name ( Tendo Ice Bridge )\ncards.facename ( Ice )\nsets.code ( ICE )\nWhat's the French name of the set of cards with \"Tendo Ice Bridge\" is in?\n", "response": "SELECT sets.name FROM sets INNER JOIN cards ON sets.id = cards.setcode WHERE cards.name = 'Tendo Ice Bridge';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.text ( text ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.side ( text | values : a , b ) , cards.number ( text | values : 1 , 2 ) , cards.availability ( text | values : mtgo,paper , paper ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.name ( Salvat 2011 )\nforeign_data.id ( 2011 )\nrulings.id ( 2011 )\ncards.number ( 2011 )\nHow many translations of the name of the set \"Salvat 2011\"?\n", "response": "SELECT count(set_translations.translation) FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Salvat 2011';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.flavorname ( text ) , cards.flavortext ( text ) , cards.facename ( text | values : Dusk , Dawn ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.booster ( text ) , sets.code ( text | values : 10E , 2ED ) , sets.isforeignonly ( integer | values : 0 , 1 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.language ( Japanese )\nforeign_data.language ( Japanese )\ncards.name ( Fellwar Stone )\nTell the Japanese name of the set which card \"Fellwar Stone\" is in it.\n", "response": "SELECT sets.name FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Japanese' AND set_translations.id = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.dueldeck ( text | values : a , b ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.name ( Journey into Nyx )\nsets.mcmname ( Journey into Nyx )\nWhich card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost.\n", "response": "SELECT cards.name FROM cards INNER JOIN set_translations ON cards.id = set_translations.id INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Journey into Nyx' AND set_translations.translation = '\u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248' ORDER BY cards.convertedmanacost DESC LIMIT 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.setcode ( text | values : 10E , 2ED ) , cards.number ( text | values : 1 , 2 ) , cards.availability ( text | values : mtgo,paper , paper ) ]\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.translation ( Ola de fr\u00edo )\nWhat is the release date for the set \"Ola de fr\u00edo\"?\n", "response": "SELECT releasedate FROM sets WHERE sets.name = 'Ola de fr\u00edo';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.booster ( text ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.setcode ( text | values : 10E , 2ED ) , cards.side ( text | values : a , b ) , cards.types ( text | values : Creature , Instant ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.type ( expansion )\ncards.name ( Samite Pilgrim )\nWhat was the expansion type for the set which card \"Samite Pilgrim\" in it?\n", "response": "SELECT sets.type FROM sets INNER JOIN cards ON sets.code = cards.setcode WHERE cards.name = 'Samite Pilgrim';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.dueldeck ( text | values : a , b ) , cards.number ( text | values : 1 , 2 ) , cards.faceconvertedmanacost ( real | values : 4.0 , 5.0 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.block ( text | values : Core Set , Mirrodin ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.id ( 2004 , 3 )\ncards.number ( 2004 )\nrulings.id ( 2004 )\nlegalities.id ( 2004 )\nHow many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.\n", "response": "SELECT count(*) FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'World Championship Decks 2004' AND cards.convertedmanacost = '3';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.flavortext ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.text ( text ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.number ( text | values : 1 , 2 ) , cards.colors ( text | values : W , B ) , cards.types ( text | values : Creature , Instant ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.translation ( Mirrodin )\nsets.name ( Mirrodin )\nsets.mcmname ( Mirrodin )\nShow the Simplified Chinese translation of the name of the set \"Mirrodin\"?\n", "response": "SELECT set_translations.translation FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE sets.name = 'Mirrodin' AND set_translations.language = 'Chinese Simplified';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.availability ( text | values : mtgo,paper , paper ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.hasfoil ( integer | values : 0 , 1 ) , cards.hasnonfoil ( integer | values : 1 , 0 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.flavortext ( text ) , foreign_data.text ( text ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.language ( Japanese )\nforeign_data.language ( Japanese )\nFor all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?\n", "response": "SELECT cast(sum(CASE WHEN foreign_data.language = 'Japanese' AND cards.hasnonfoil = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON foreign_data.id = set_translations.id WHERE set_translations.language = 'Japanese';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.isonlineonly ( integer | values : 0 , 1 ) , cards.flavortext ( text ) , cards.flavorname ( text ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.isonlineonly ( integer | values : 0 , 1 ) , sets.isforeignonly ( integer | values : 0 , 1 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nFor all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?\n", "response": "SELECT foreign_data.language, COUNT(foreign_data.language) FROM foreign_data INNER JOIN set_translations ON foreign_data.id = set_translations.id INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'Brazil Portuguese' AND foreign_data.type = 'Criatura \u2014 Cl\u00e9rigo humano' GROUP BY foreign_data.language HAVING COUNT(foreign_data.language) = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.istextless ( integer | values : 0 , 1 ) , cards.printings ( text | values : 10E,JUD,UMA ) , cards.text ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.types ( text | values : Creature , Instant ) ]\ntable rulings , columns = [ rulings.text ( text ) , rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.flavortext ( text ) ]\ntable sets , columns = [ sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) , sets.block ( text | values : Core Set , Mirrodin ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Aleksi Briclot )\nsets.type ( box )\nWhat are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?\n", "response": "SELECT cards.printings FROM cards WHERE cards.artist = 'Aleksi Briclot' AND cards.printings IS NULL;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.number ( text | values : 1 , 2 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.cardkingdomid ( text | values : 122719 , 122720 ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.availability ( text | values : mtgo,paper , paper ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nWhat is the unique id of the set that has the highest number of cards?\n", "response": "SELECT sets.id FROM sets WHERE sets.totalsetsize = ( SELECT max(sets.totalsetsize) FROM sets );\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.faceconvertedmanacost ( real | values : 4.0 , 5.0 ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.convertedmanacost ( real | values : 7.0 , 5.0 ) , cards.otherfaceids ( text ) ]\ntable set_translations , columns = [ set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.block ( text | values : Core Set , Mirrodin ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nAmong the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?\n", "response": "SELECT artist FROM cards WHERE faceconvertedmanacost = ( SELECT max(faceconvertedmanacost) FROM cards );\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.frameeffects ( text | values : legendary , nyxtouched ) , cards.power ( text | values : 4 , 3 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.hasfoil ( integer | values : 0 , 1 ) , cards.hasnonfoil ( integer | values : 1 , 0 ) , cards.frameversion ( text | values : 2003 , 1993 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nWhat is the most common visual frame effects among the incredibly powerful foils?\n", "response": "SELECT frameeffects FROM cards GROUP BY frameeffects ORDER BY count(frameeffects) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.power ( text | values : 4 , 3 ) , cards.hasfoil ( integer | values : 0 , 1 ) , cards.hasnonfoil ( integer | values : 1 , 0 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.dueldeck ( text | values : a , b ) , cards.hasalternativedecklimit ( integer | values : 0 , 1 ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable sets , columns = [ sets.isfoilonly ( integer | values : 0 , 1 ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.format ( duel )\nHow many cards with unknown power that can't be found in foil is in duel deck A?\n", "response": "SELECT count(cards.id) FROM cards WHERE cards.power = 'unknown' AND cards.dueldeck = 'A' AND NOT cards.hasfoil;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.code ( text | values : 10E , 2ED ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.totalsetsize ( integer | values : 508 , 302 ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.side ( text | values : a , b ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.ispromo ( integer | comment : is promotion | values : 0 , 1 ) , cards.promotypes ( text | values : boxtopper,boosterfun , boosterfun ) , cards.subtypes ( text | values : Human,Cleric , Angel ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.text ( text ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.type ( expansion , commander )\nlegalities.format ( commander )\nAmong the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.\n", "response": "SELECT sets.id FROM sets INNER JOIN set_translations ON sets.id = set_translations.id WHERE set_translations.translation = '\u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248' AND set_translations.language = 'Chinese Simplified' AND sets.type = 'commander' AND sets.isfoilonly = 0 AND sets.isnonfoilonly = 0 ORDER BY sets.totalsetsize DESC LIMIT 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.dueldeck ( text | values : a , b ) , cards.manacost ( text | values : {5}{W}{W} , {4}{W} ) , cards.hasalternativedecklimit ( integer | values : 0 , 1 ) , cards.side ( text | values : a , b ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.id ( 10 )\nIn duels, what are the top 10 cards with the highest uncoverted mana cost?\n", "response": "SELECT name FROM cards ORDER BY manacost DESC LIMIT 10;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable sets , columns = [ sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.type ( text | values : core , masters ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) ]\ntable cards , columns = [ cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.types ( text | values : Creature , Instant ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) ]\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.status ( Legal )\nWhen was the oldest mythic card released and what are its legal play formats?\n", "response": "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid ORDER BY cards.originalreleasedate LIMIT 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.flavortext ( text ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.uuid ( text ) , foreign_data.text ( text ) ]\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.flavortext ( text ) , cards.number ( text | values : 1 , 2 ) , cards.flavorname ( text ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nforeign_data.language ( French )\nset_translations.language ( French )\nHow many cards did Volkan Ba\u00c7\u00b5a illustrated whose foreign language is in French?\n", "response": "SELECT count(*) FROM cards INNER JOIN set_translations ON cards.flavortext = set_translations.translation WHERE cards.artist = 'Volkan Ba\u00c7\u00b5a' AND set_translations.language = 'French';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.uuid ( text ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.rarity ( text | values : uncommon , common ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.flavorname ( text ) , cards.uuid ( text ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.type ( text | values : core , masters ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) , sets.booster ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.status ( Legal )\ncards.rarity ( rare )\ncards.name ( Abundance )\nHow many rare enchantment Abundance cards are there whose play format status are all legal?\n", "response": "SELECT count(cards.id) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Legal' AND cards.rarity = 'rare';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.uuid ( text ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.flavorname ( text ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.type ( text | values : core , masters ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.uuid ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.status ( Banned )\nWhich of the play formats has the highest number of banned status? Indicate the play format and the name of the card.\n", "response": "SELECT ( SELECT legalities.format FROM legalities WHERE legalities.status = 'Banned' GROUP BY legalities.format ORDER BY count(legalities.id) DESC LIMIT 1 ) AS highest , ( SELECT legalities.format FROM legalities WHERE legalities.status = 'Banned' GROUP BY legalities.format ORDER BY count(legalities.id) LIMIT 1 ) AS name;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable set_translations , columns = [ set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.flavortext ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.flavorname ( text ) , cards.text ( text ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nsets.name ( Battlebond )\nsets.mcmname ( Battlebond )\nWhat is the language of the \"Battlebond\" set?\n", "response": "SELECT language FROM set_translations WHERE setcode = '10E';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.tcgplayerproductid ( text | values : 15032 , 15033 ) , cards.number ( text | values : 1 , 2 ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) , cards.hand ( text | values : 1 , 0 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.block ( text | values : Core Set , Mirrodin ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nWho is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.\n", "response": "SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid GROUP BY legalities.format ORDER BY count(*) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable cards , columns = [ cards.frameversion ( text | values : 2003 , 1993 ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.hascontentwarning ( integer | values : 0 , 1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) ]\ntable set_translations , columns = [ set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) ]\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.id ( 1997 )\nlegalities.format ( legacy )\ncards.frameversion ( 1997 )\ncards.artist ( D. Alexander Gregory )\ncards.id ( 1997 )\nrulings.id ( 1997 )\nAmong the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?\n", "response": "SELECT legalities.status FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE cards.frameversion = 1997 AND cards.artist = 'D. Alexander Gregory' AND legalities.format = 'legacy';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.edhrecrank ( integer | comment : rec rank in edh | values : 15650 , 12702 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.setcode ( text | values : 10E , 2ED ) , cards.facename ( text | values : Dusk , Dawn ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.type ( text | values : core , masters ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.mtgocode ( text | comment : magic the gathering online code | values : 10E , 2XM ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.status ( Banned )\nWhich cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.\n", "response": "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecrank = 1;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.text ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable cards , columns = [ cards.setcode ( text | values : 10E , 2ED ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.number ( text | values : 1 , 2 ) , cards.availability ( text | values : mtgo,paper , paper ) ]\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents : None\nWhat is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.\n", "response": "SELECT avg(sets.totalsetsize) FROM sets WHERE strftime('%Y', sets.releasedate) BETWEEN '2012-01-01' AND '2015-12-31';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.bordercolor ( text | values : black , white ) , cards.isonlineonly ( integer | values : 0 , 1 ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.coloridentity ( text | values : W , B ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.uuid ( text ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable sets , columns = [ sets.isonlineonly ( integer | values : 0 , 1 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.type ( text | values : core , masters ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.bordercolor ( black )\ncards.availability ( arena )\nList the artists who illustrated cards with black borders which are available only in arena.\n", "response": "SELECT DISTINCT cards.artist FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.bordercolor = 'black' AND cards.availability = 'arena';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable cards , columns = [ cards.uuid ( text ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.variations ( text ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.isalternative ( integer | values : 0 , 1 ) , cards.cardkingdomfoilid ( text | values : 123094 , 123095 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.block ( text | values : Core Set , Mirrodin ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) ]\ntable foreign_data , columns = [ foreign_data.uuid ( text ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.status ( Restricted , Banned )\nFind the uuid of cards in which the old school format is restricted or banned.\n", "response": "SELECT cards.uuid FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' OR legalities.status = 'Banned';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.availability ( text | values : mtgo,paper , paper ) , cards.printings ( text | values : 10E,JUD,UMA ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.isonlineonly ( integer | values : 0 , 1 ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.uuid ( text ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.isonlineonly ( integer | values : 0 , 1 ) , sets.code ( text | values : 10E , 2ED ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.format ( text | values : commander , duel ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Matthew D. Wilson )\ncards.availability ( paper )\nAmong the card designed by Matthew D. Wilson, how many are available only in the paper?\n", "response": "SELECT count(cards.id) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Matthew D. Wilson' AND cards.availability = 'paper';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable rulings , columns = [ rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) ]\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.originalreleasedate ( text | values : 2012/12/1 , 2006/12/1 ) , cards.isfullart ( integer | values : 0 , 1 ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.releasedate ( date | values : 2007-07-13 , 1993-12-01 ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.mcmid ( integer | comment : magic card market id | values : 74 , 3204 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.format ( text | values : commander , duel ) , legalities.uuid ( text ) ]\ntable foreign_data , columns = [ foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) , foreign_data.multiverseid ( integer | values : 148411 , 150317 ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Kev Walker )\nWhat are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.\n", "response": "SELECT * FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND cards.artist = 'Kev Walker' ORDER BY rulings.date DESC;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable legalities , columns = [ legalities.format ( text | values : commander , duel ) , legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.type ( text | values : core , masters ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.code ( text | values : 10E , 2ED ) ]\ntable cards , columns = [ cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.asciiname ( text | values : El-Hajjaj , Junun Efreet ) , cards.setcode ( text | values : 10E , 2ED ) , cards.side ( text | values : a , b ) , cards.type ( text | values : Creature \u2014 Human Cleric , Creature \u2014 Angel ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable set_translations , columns = [ set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) , set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) ]\nforeign keys :\nlegalities.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nlegalities.status ( Legal )\nsets.name ( Hour of Devastation )\ncards.name ( Hour of Devastation , Devastation )\nList the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.\n", "response": "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON cards.setcode = sets.code WHERE sets.name = 'Hour of Devastation';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable set_translations , columns = [ set_translations.translation ( text | values : \u6838\u5fc3\u7cfb\u5217\u7b2c\u5341\u7248 , Dixi\u00e8me \u00e9dition ) , set_translations.language ( text | values : Chinese Simplified , Chinese Traditional ) , set_translations.id ( integer | primary key | values : 1 , 2 ) , set_translations.setcode ( text | values : 10E , 4ED ) ]\ntable foreign_data , columns = [ foreign_data.language ( text | values : German , Spanish ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.text ( text ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) ]\ntable sets , columns = [ sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.id ( integer | primary key | values : 1 , 2 ) , sets.basesetsize ( integer | values : 383 , 302 ) , sets.totalsetsize ( integer | values : 508 , 302 ) , sets.mcmname ( text | comment : magic card market name | values : Tenth Edition , Double Masters ) , sets.code ( text | values : 10E , 2ED ) ]\ntable rulings , columns = [ rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.text ( text ) , rulings.uuid ( text ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable cards , columns = [ cards.name ( text | values : Ancestor's Chosen , Angel of Mercy ) , cards.setcode ( text | values : 10E , 2ED ) , cards.text ( text ) , cards.number ( text | values : 1 , 2 ) , cards.side ( text | values : a , b ) , cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nset_translations.setcode = sets.code\nrulings.uuid = cards.uuid\nmatched contents :\nset_translations.language ( Japanese , Korean )\nforeign_data.language ( Japanese , Korean )\nFind and list the names of sets which doesn't have Japanese translation but have Korean translation.\n", "response": "SELECT sets.name FROM sets LEFT JOIN set_translations ON sets.code = set_translations.setcode WHERE set_translations.language = 'Korean' AND set_translations.translation IS NULL;\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable cards , columns = [ cards.artist ( text | values : Pete Venters , Volkan Ba\u01f5a ) , cards.frameversion ( text | values : 2003 , 1993 ) , cards.watermark ( text | values : set (HOU) , set (LGN) ) , cards.id ( integer | primary key | comment : unique id number identifying the cards | values : 41138 , 1349 ) , cards.frameeffects ( text | values : legendary , nyxtouched ) , cards.hasalternativedecklimit ( integer | values : 0 , 1 ) ]\ntable legalities , columns = [ legalities.id ( integer | primary key | values : 1 , 2 ) , legalities.status ( text | values : Legal , Banned ) , legalities.uuid ( text ) , legalities.format ( text | values : commander , duel ) ]\ntable rulings , columns = [ rulings.uuid ( text ) , rulings.text ( text ) , rulings.id ( integer | primary key | values : 1 , 2 ) , rulings.date ( date | values : 2007-07-15 , 2007-02-01 ) ]\ntable sets , columns = [ sets.id ( integer | primary key | values : 1 , 2 ) , sets.code ( text | values : 10E , 2ED ) , sets.isfoilonly ( integer | values : 0 , 1 ) , sets.name ( text | values : Tenth Edition , Unlimited Edition ) , sets.isnonfoilonly ( integer | values : 0 , 1 ) , sets.block ( text | values : Core Set , Mirrodin ) ]\ntable foreign_data , columns = [ foreign_data.id ( integer | primary key | values : 1 , 2 ) , foreign_data.name ( text | values : Ausgew\u00e4hlter der Ahnfrau , Elegido de la Antepasada ) , foreign_data.flavortext ( text ) , foreign_data.type ( text | values : Criatura \u2014 Cl\u00e9rigo humano ) , foreign_data.text ( text ) , foreign_data.language ( text | values : German , Spanish ) ]\nforeign keys :\nforeign_data.uuid = cards.uuid\nlegalities.uuid = cards.uuid\nrulings.uuid = cards.uuid\nmatched contents :\ncards.artist ( Allen Williams )\nlegalities.status ( Banned )\nList all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.\n", "response": "SELECT cards.frameversion, cards.watermark FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = 'Allen Williams' AND legalities.status = 'Banned';\t", "n_examples": 0, "db_id": "card_games"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.lasteditordisplayname ( text | values : user28 , user10525 ) , posts.score ( integer | values : 23 , 22 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.displayname ( Jarrod Dixon , Harlan , Jarrod , user , useR , User )\nposts.ownerdisplayname ( User )\nWhich user has a higher reputation, Harlan or Jarrod Dixon?\n", "response": "SELECT displayname FROM users ORDER BY reputation DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.age ( integer | values : 37 , 35 ) , users.views ( integer | values : 0 , 25 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.id ( integer | primary key | values : 1 , 2 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( please )\nbadges.id ( 2014 )\ncomments.id ( 2014 )\nvotes.id ( 2014 )\nposthistory.id ( 2014 )\nPlease list the display names of all the users whose accounts were created in the year 2014.\n", "response": "SELECT users.displayname FROM users WHERE users.creationdate BETWEEN '2014-01-01' AND '2014-12-31';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.websiteurl ( text | values : http://stackoverflow.com ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.accountid ( integer | values : -1 , 2 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditdate ( datetime | values : 2010-08-07 17:56:44.0 , 2011-02-12 05:50:03.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents : None\nHow many users last accessed the website after 2014/9/1?\n", "response": "SELECT count(users.id) FROM users WHERE users.lastaccessdate > '2014-09-01 00:00:00' AND users.lastaccessdate < '2015-09-01 00:00:00';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.commentcount ( integer | values : 1 , 4 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( name , Name , user , useR , User )\nposts.ownerdisplayname ( User )\nposthistory.userdisplayname ( User )\nWhat is the display name of the user who has the most number of views?\n", "response": "SELECT users.displayname FROM users ORDER BY users.views DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userdisplayname ( text | values : user28 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.upvotes ( 100 )\nusers.reputation ( 100 )\nbadges.id ( 100 )\ncomments.id ( 100 )\nposthistory.id ( 100 )\nposthistory.postid ( 100 )\nposthistory.comment ( 100 )\nAmong the users who have more than 100 upvotes, how many of them have more then 1 downvotes?\n", "response": "SELECT count(*) FROM users WHERE users.upvotes > 100 AND users.downvotes > 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.accountid ( integer | values : -1 , 2 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.age ( integer | values : 37 , 35 ) ]\ntable posts , columns = [ posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.id ( 2013 )\nposts.id ( 2013 )\nposts.viewcount ( 2013 )\nvotes.id ( 2013 )\nbadges.userid ( 2013 )\nbadges.id ( 2013 )\ncomments.id ( 2013 )\ncomments.postid ( 2013 )\nHow many users with more than 10 views created their account after the year 2013?\n", "response": "SELECT count(id) FROM users WHERE views > 10;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.parentid ( integer | values : 3 , 7 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposts.ownerdisplayname ( User )\nusers.displayname ( csgillespie , user , useR , User )\nposthistory.userdisplayname ( User )\nHow many posts does the user csgillespie own?\n", "response": "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposts.ownerdisplayname ( User )\nusers.displayname ( csgillespie , please , user , useR , User )\nposthistory.userdisplayname ( User )\nposthistory.comment ( title , Title )\nPlease list the titles of the posts owned by the user csgillespie?\n", "response": "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.acceptedanswerid ( integer | values : 15 , 59 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.aboutme ( text ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents : None\nWho is the owner of the post \"Eliciting priors from experts\"?\n", "response": "SELECT owneruserid FROM posts WHERE title = 'Eliciting priors from experts';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( csgillespie )\nposthistory.comment ( title , Title )\nWhat is the title of the post that is owned by csgillespie and has the highest popularity?\n", "response": "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' ORDER BY posts.viewcount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposts.ownerdisplayname ( User )\nusers.displayname ( name , Name , user , useR , User )\nposthistory.userdisplayname ( User )\nWhat is the display name of the user who is the owner of the most valuable post?\n", "response": "SELECT users.displayname FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN posts ON votes.postid = posts.id GROUP BY users.displayname ORDER BY votes.bountyamount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.text ( text ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( csgillespie )\nWhat is the total number of comments of all the posts owned by csgillespie?\n", "response": "SELECT sum(comments.commentcount) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.ownerdisplayname = 'csgillespie';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.answercount ( integer | values : 5 , 7 ) , posts.acceptedanswerid ( integer | values : 15 , 59 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( csgillespie , Answer )\nFor the post that got the most number of answers owned by csgillespie, how many answers did it get?\n", "response": "SELECT posts.answercount FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie' GROUP BY posts.answercount ORDER BY posts.answercount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.views ( integer | values : 0 , 25 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposts.ownerdisplayname ( User )\nusers.displayname ( name , Name , user , useR , User , example )\nposthistory.userdisplayname ( User )\nposthistory.comment ( Examples , Edited , example )\nWhat is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?\n", "response": "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.title = 'Examples for teaching: Correlation does not mean causation';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.parentid ( integer | values : 3 , 7 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( csgillespie )\nAmong the posts owned by csgillespie, how many of them are root posts?\n", "response": "SELECT count(posts.id) FROM posts WHERE posts.owneruserid = 8;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.body ( text ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.revisionguid ( text ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( please )\nPlease list the display names of all the users who owns a post that is well-finished.\n", "response": "SELECT users.displayname FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE posthistory.posthistorytypeid = 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposts.ownerdisplayname ( User )\nposthistory.userdisplayname ( User )\nAmong the posts owned by an elder user, how many of them have a score of over 19?\n", "response": "SELECT count(DISTINCT posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id INNER JOIN elite ON users.id = elite.user_id WHERE elite.year_id = 2010 AND posts.score > 19;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.location ( text | values : on the server farm , Corvallis, OR ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.displayname ( text | values : Community , Geoff Dalgas ) ]\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.location ( Location )\nWhat is the location of the owner of the post \"Eliciting priors from experts\"?\n", "response": "SELECT users.location FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title = 'Eliciting priors from experts';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable tags , columns = [ tags.tagname ( text | values : bayesian , prior ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.count ( integer | values : 1342 , 168 ) ]\ntable posts , columns = [ posts.body ( text ) , posts.tags ( text ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) ]\ntable posthistory , columns = [ posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable comments , columns = [ comments.text ( text ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\ntags.tagname ( bayesian )\nposthistory.comment ( body )\nFrom which post is the tag \"bayesian\" excerpted from? Please give the body of the post.\n", "response": "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid WHERE tags.tagname = 'bayesian';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable tags , columns = [ tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.count ( integer | values : 1342 , 168 ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.tagname ( text | values : bayesian , prior ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\ntable posts , columns = [ posts.tags ( text ) , posts.body ( text ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.text ( text ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\nposthistory.comment ( body )\nFrom which post is the most popular tag excerpted from? Please give the body of the post.\n", "response": "SELECT posts.body FROM posts INNER JOIN tags ON posts.id = tags.excerptpostid ORDER BY tags.count DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( csgillespie , user , useR , User )\nposthistory.userdisplayname ( User )\nHow many badges has the user csgillespie obtained?\n", "response": "SELECT count(badges.userid) FROM badges WHERE badges.name = 'Teacher' AND badges.userid = 5;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( csgillespie , please )\nPlease list the names of the badges obtained by csgillespie.\n", "response": "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.userid ( 2011 )\nbadges.id ( 2011 )\nusers.id ( 2011 )\nvotes.userid ( 2011 )\nvotes.id ( 2011 )\ncomments.id ( 2011 )\nAmong the badges obtained by csgillespie, how many of them were obtained in the year 2011?\n", "response": "SELECT count(badges.id) FROM badges WHERE strftime('%Y', badges.date) = '2011';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.score ( integer | values : 23 , 22 ) , posts.body ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.displayname ( name , Name , user , useR , User )\nposts.ownerdisplayname ( User )\nWhat is the display name of the user who has obtained the most number of badges?\n", "response": "SELECT displayname FROM users ORDER BY reputation DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposts.ownerdisplayname ( User )\nusers.displayname ( csgillespie , user , useR , User )\nposthistory.userdisplayname ( User )\nWhat is the average score of the posts owned by the user csgillespie?\n", "response": "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'csgillespie';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) ]\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.owneruserid ( integer | values : 8 , 24 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nbadges.userid ( 200 )\nbadges.id ( 200 )\ncomments.id ( 200 )\ncomments.userid ( 200 )\ncomments.postid ( 200 )\nWhat is the average number of badges obtained by a user with over 200 views?\n", "response": "SELECT avg(views) FROM users WHERE views > 200;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.parentid ( integer | values : 3 , 7 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposts.ownerdisplayname ( User )\nposthistory.userdisplayname ( User )\nAmong the posts with a score of over 20, what is the percentage of them being owned by an elder user?\n", "response": "SELECT cast(sum(CASE WHEN posts.score > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / count(posts.owneruserid) FROM posts WHERE posts.score > 20;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.accountid ( integer | values : -1 , 2 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.userid ( 58 )\nbadges.id ( 58 )\ncomments.userid ( 58 )\nHow many votes did the user No.58 take on 2010/7/19?\n", "response": "SELECT count(votes.id) FROM votes WHERE votes.userid = 58 AND votes.creationdate = '2010-07-19';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) ]\ntable posts , columns = [ posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.answercount ( integer | values : 5 , 7 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.score ( integer | values : 23 , 22 ) ]\ntable comments , columns = [ comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable postlinks , columns = [ postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\nforeign keys :\ncomments.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents : None\nIndicate the creation date of the maximum number of votes.\n", "response": "SELECT MAX(creationdate) FROM votes;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable tags , columns = [ tags.tagname ( text | values : bayesian , prior ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.tags ( text ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) , posts.score ( integer | values : 23 , 22 ) , posts.parentid ( integer | values : 3 , 7 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\nforeign keys :\nbadges.userid = users.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\ntags.excerptpostid = posts.id\nmatched contents :\nbadges.name ( Revival )\nGive the number of \"Revival\" badges.\n", "response": "SELECT COUNT(*) FROM badges WHERE name = 'Revival';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.userid ( integer | values : 58 , 6 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents :\nposthistory.comment ( title , Title )\nWhat is the title for the post which got the highest score comment?\n", "response": "SELECT posts.title FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE comments.score = ( SELECT max(score) FROM comments );\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.title ( text | values : What is normality? ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable tags , columns = [ tags.count ( integer | values : 1342 , 168 ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.tagname ( text | values : bayesian , prior ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\nposts.viewcount ( 1910 )\nposts.id ( 1910 )\ncomments.id ( 1910 )\nposthistory.postid ( 1910 )\nposthistory.id ( 1910 )\nFor the post which got 1910 view counts, how many comments does it get?\n", "response": "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.viewcount = 1910;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.favoritecount ( integer | values : 14 , 8 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents :\nposts.id ( 3025 )\nposts.lasteditoruserid ( 3025 )\ncomments.id ( 3025 )\ncomments.userid ( 3025 )\nposthistory.id ( 3025 )\nposthistory.postid ( 3025 )\nposthistory.userid ( 3025 )\nUser No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?\n", "response": "SELECT sum(posts.favoritecount) FROM posts WHERE posts.id = 3025;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.text ( text ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.score ( integer | values : 5 , 0 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posts , columns = [ posts.parentid ( integer | values : 3 , 7 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.body ( text ) , posts.title ( text | values : What is normality? ) ]\ntable posthistory , columns = [ posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents :\nposts.parentid ( 107829 )\nposts.id ( 107829 )\nposthistory.id ( 107829 )\nposthistory.postid ( 107829 )\nGive the only one comment text of the post with parent id 107829.\n", "response": "SELECT text FROM comments WHERE postid = 107829 LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.body ( text ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.acceptedanswerid ( integer | values : 15 , 59 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.revisionguid ( text ) ]\ntable votes , columns = [ votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents :\nposts.id ( 23853 )\nposts.acceptedanswerid ( 23853 )\ncomments.postid ( 23853 )\ncomments.id ( 23853 )\ncomments.userid ( 23853 )\nposthistory.postid ( 23853 )\nposthistory.userid ( 23853 )\nUser No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?\n", "response": "SELECT posts.acceptedanswerid = 23853 FROM posts WHERE posts.id = 23853;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposts.id ( 65041 )\nposts.ownerdisplayname ( User )\nposthistory.postid ( 65041 )\nposthistory.userdisplayname ( User )\ncomments.id ( 65041 )\ncomments.postid ( 65041 )\nFor the owner user of post No. 65041, what is his/her reputation points?\n", "response": "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 65041;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable users , columns = [ users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposts.ownerdisplayname ( User )\nusers.displayname ( Tiago Pasqualini , user , useR , User , name , Name , Tiago )\nposthistory.userdisplayname ( User )\nFor the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?\n", "response": "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Tiago Pasqualini';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.views ( integer | values : 0 , 25 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nvotes.id ( 6347 )\nusers.id ( 6347 )\nusers.displayname ( name , Name , user , useR , User )\ncomments.id ( 6347 )\ncomments.postid ( 6347 )\nbadges.userid ( 6347 )\nbadges.id ( 6347 )\nposthistory.userdisplayname ( User )\nposthistory.id ( 6347 )\nposthistory.postid ( 6347 )\nProvide the display name of the user who made the vote No.6347.\n", "response": "SELECT users.displayname FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.id = 6347;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.tags ( text ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.body ( text ) ]\ntable tags , columns = [ tags.tagname ( text | values : bayesian , prior ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\nforeign keys :\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nvotes.postid = posts.id\nmatched contents :\nposthistory.comment ( data )\nposthistory.text ( Data Visualization )\nGive the number of votes for the post about data visualization.\n", "response": "SELECT votes.bountyamount FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title = 'What is normality?' AND votes.votetypeid = 2;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.postid ( integer | values : 3 , 5 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.tagname ( text | values : bayesian , prior ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nmatched contents :\nusers.displayname ( user , useR , User , name , Name )\nposthistory.userdisplayname ( User )\nFor the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?\n", "response": "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.parentid ( integer | values : 3 , 7 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents : None\nFor the user No.24, how many times is the number of his/her posts compared to his/her votes?\n", "response": "SELECT count(DISTINCT votes.postid) FROM votes INNER JOIN users ON votes.userid = users.id WHERE users.id = 24;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) , posts.score ( integer | values : 23 , 22 ) ]\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.accountid ( integer | values : -1 , 2 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\nforeign keys :\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposthistory.comment ( title , Title )\nHow many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?\n", "response": "SELECT sum(viewcount) FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable posthistory , columns = [ posthistory.text ( text ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.accountid ( integer | values : -1 , 2 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents : None\nWrite the contents of comments with a score of 17.\n", "response": "SELECT * FROM comments WHERE score = 17;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.websiteurl ( text | values : http://stackoverflow.com ) , users.id ( integer | primary key | values : -1 , 2 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.websiteurl ( http://stackoverflow.com/ )\nusers.displayname ( user , useR , User )\nposthistory.userdisplayname ( User )\nWhich user has the website URL listed at 'http://stackoverflow.com'\n", "response": "SELECT * FROM users WHERE websiteurl = 'http://stackoverflow.com';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( SilentGhost , name , Name , user , useR , User )\nposthistory.userdisplayname ( User )\nWhat is the badge name that user 'SilentGhost' obtained?\n", "response": "SELECT name FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'SilentGhost' );\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) , posts.score ( integer | values : 23 , 22 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\ncomments.text ( thank you user93! , Thank you. , thank you! )\nusers.displayname ( name , Name , user , useR , User )\nposthistory.userdisplayname ( User )\nName the user that commented 'thank you user93!'\n", "response": "SELECT users.displayname FROM users INNER JOIN comments ON users.id = comments.userid WHERE comments.text LIKE 'thank you user93!';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posthistory , columns = [ posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.text ( text ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.title ( text | values : What is normality? ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.accountid ( integer | values : -1 , 2 ) , users.aboutme ( text ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposthistory.userdisplayname ( User )\nposts.ownerdisplayname ( User )\nusers.displayname ( A Lion , user , useR , User )\nWrite all comments made by user 'A Lion.'\n", "response": "SELECT comments.text FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'A Lion.';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.text ( text ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposts.ownerdisplayname ( User )\nposthistory.comment ( title , Title )\nWhich user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?\n", "response": "SELECT users.id, users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.title = 'Understanding what Dassault iSight is doing?';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.body ( text ) , posts.answercount ( integer | values : 5 , 7 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posthistory , columns = [ posthistory.text ( text ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.tagname ( text | values : bayesian , prior ) , tags.count ( integer | values : 1342 , 168 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\nposthistory.comment ( title , Title )\ntags.tagname ( boosting )\nWrite all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'\n", "response": "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'How does gentle boosting differ from AdaBoost?';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.name ( Necromancer )\nusers.displayname ( name , Name )\nName 10 users with the badge name 'Necromancer.'\n", "response": "SELECT users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Necromancer';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.aboutme ( text ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nbadges.name ( Editor )\nusers.displayname ( editor , data )\nposthistory.comment ( data , title , Title )\nWho is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'\n", "response": "SELECT posthistory.userdisplayname FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Open source tools for visualizing multi-dimensional data?';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.aboutme ( text ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( Vebjorn Ljosa )\nposthistory.comment ( Edited , title , Title )\nList the title of posts which were edited by Vebjorn Ljosa.\n", "response": "SELECT posts.title FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON users.id = posthistory.userid WHERE users.displayname = 'Vebjorn Ljosa' AND posthistory.posthistorytypeid = 2;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.websiteurl ( text | values : http://stackoverflow.com ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.views ( integer | values : 0 , 25 ) , users.downvotes ( integer | values : 1920 , 0 ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposthistory.userdisplayname ( User )\nposthistory.comment ( Edited )\nWhat is the total score of the posts edited by Yevgeny and include the user's website URL.\n", "response": "SELECT sum(posts.score), users.websiteurl FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON votes.userid = users.id WHERE votes.votetypeid = 2 AND users.websiteurl = 'http://stackoverflow.com';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.acceptedanswerid ( integer | values : 15 , 59 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) , posts.commentcount ( integer | values : 1 , 4 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable posthistory , columns = [ posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.accountid ( integer | values : -1 , 2 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposthistory.comment ( Edited , square , title , Title )\nposthistory.text ( Standard deviation , standard deviation )\nWrite all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'\n", "response": "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'Why square the difference instead of taking the absolute value in standard deviation?';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.tags ( text ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.body ( text ) ]\ntable votes , columns = [ votes.bountyamount ( integer | values : 50 , 25 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable tags , columns = [ tags.tagname ( text | values : bayesian , prior ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.count ( integer | values : 1342 , 168 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.text ( text ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\nforeign keys :\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nvotes.postid = posts.id\nmatched contents :\nposthistory.comment ( data , title , Title )\nHow much is the total bounty amount of the post titled about 'data'\n", "response": "SELECT sum(votes.bountyamount) FROM votes WHERE votes.postid = (SELECT id FROM posts WHERE posts.title = 'data');\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.bountyamount ( integer | values : 50 , 25 ) , votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.tags ( text ) , posts.score ( integer | values : 23 , 22 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) ]\ntable tags , columns = [ tags.tagname ( text | values : bayesian , prior ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.count ( integer | values : 1342 , 168 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\ntags.excerptpostid = posts.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\ntags.tagname ( variance )\ncomments.id ( 50 )\ncomments.postid ( 50 )\nWhich user added a bounty amount of 50 to the post title mentioning variance?\n", "response": "SELECT votes.userid FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE posts.title = 'What is normality?' AND votes.bountyamount = 50;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable tags , columns = [ tags.tagname ( text | values : bayesian , prior ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\ntable posts , columns = [ posts.tags ( text ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.title ( text | values : What is normality? ) , posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posthistory , columns = [ posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\ntags.tagname ( average , scores , humor )\nposthistory.comment ( title , Title )\nCalculate the average view count of posts tagged as 'humor' and write the title and the comments of the posts alongside their scores if applicable.\n", "response": "SELECT avg(viewcount) FROM posts WHERE tags LIKE '%humor%';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.parentid ( integer | values : 3 , 7 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents : None\nGive the total number of comments posted by user ID 13.\n", "response": "SELECT count(comments.id) FROM comments WHERE comments.userid = 13;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userdisplayname ( text | values : user28 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nposthistory.userdisplayname ( User )\nWhich user ID has the highest reputation?\n", "response": "SELECT users.id FROM users ORDER BY users.reputation DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents : None\nWhich user ID has the lowest view?\n", "response": "SELECT users.id FROM users ORDER BY users.views ASC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.accountid ( integer | values : -1 , 2 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.closeddate ( datetime | values : 2010-07-19 20:19:46.0 , 2010-08-05 13:06:12.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nbadges.id ( 2011 )\nbadges.userid ( 2011 )\nbadges.name ( Supporter )\nvotes.userid ( 2011 )\nvotes.id ( 2011 )\nusers.id ( 2011 )\ncomments.id ( 2011 )\nHow many users are awarded with supporter badge during year 2011?\n", "response": "SELECT count(DISTINCT users.id) FROM badges INNER JOIN votes ON badges.id = votes.id INNER JOIN users ON votes.userid = users.id WHERE badges.date = '2011-07-19' AND badges.name = 'Supporter';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.userid ( 5 )\nbadges.id ( 5 )\ncomments.id ( 5 )\ncomments.userid ( 5 )\ncomments.postid ( 5 )\ncomments.score ( 5 )\nposthistory.id ( 5 )\nposthistory.comment ( 5 )\nHow many users are awarded with more than 5 badges?\n", "response": "SELECT count(DISTINCT userid) FROM badges WHERE id > 5;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.aboutme ( text ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.parentid ( integer | values : 3 , 7 ) , posts.tags ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nbadges.name ( Teacher , Supporter )\nusers.location ( New York , York )\nHow many users from New York have a teacher and supporter badge?\n", "response": "SELECT count(*) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher' AND badges.name = 'Supporter';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.views ( integer | values : 0 , 25 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.body ( text ) ]\ntable votes , columns = [ votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\ncomments.id ( 1 )\ncomments.postid ( 1 )\nposthistory.comment ( 1 )\nWhich user created post ID 1 and what is the reputation of this user?\n", "response": "SELECT users.reputation FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.id = 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.accountid ( integer | values : -1 , 2 ) , users.age ( integer | values : 37 , 35 ) ]\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.body ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userdisplayname ( text | values : user28 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.id ( 1000 )\nusers.displayname ( user , useR , User , Per )\nposts.viewcount ( 1000 )\nposts.id ( 1000 )\nposts.ownerdisplayname ( User )\nposthistory.id ( 1000 )\nposthistory.postid ( 1000 )\nposthistory.comment ( 1000 )\nposthistory.userdisplayname ( User )\nWhich user have only one post history per post and having at least 1000 views?\n", "response": "SELECT users.id FROM users INNER JOIN posthistory ON users.id = posthistory.userid GROUP BY users.id HAVING count(posthistory.id) = 1 AND users.views >= 1000;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.score ( integer | values : 23 , 22 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents : None\nWhich users have posted the most comments. List out the user's badge?\n", "response": "SELECT users.displayname, badges.name FROM users INNER JOIN badges ON users.id = badges.userid GROUP BY users.displayname, badges.name ORDER BY count(comments.id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.location ( text | values : on the server farm , Corvallis, OR ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.title ( text | values : What is normality? ) , posts.tags ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.location ( india , INDIA , India )\nbadges.name ( Teacher )\nHow many users from India have the teacher badges?\n", "response": "SELECT count(userid) FROM badges WHERE name = 'Teacher';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) ]\ntable users , columns = [ users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.views ( integer | values : 0 , 25 ) ]\ntable votes , columns = [ votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.id ( 2010 , 2011 )\nbadges.userid ( 2010 , 2011 )\nbadges.name ( Student )\nusers.id ( 2010 , 2011 )\nvotes.id ( 2010 , 2011 )\nvotes.userid ( 2011 )\ncomments.id ( 2010 , 2011 )\nposthistory.id ( 2011 )\nposthistory.userdisplayname ( student )\nposthistory.postid ( 2010 )\nWhat is the percentage difference of student badges given during 2010 and 2011?\n", "response": "SELECT cast(sum(CASE WHEN badges.name = 'Student' THEN 1 ELSE 0 END) AS REAL) * 100 / sum(CASE WHEN badges.name = 'Teacher' THEN 1 ELSE 0 END) AS per FROM badges WHERE badges.date BETWEEN '2010-07-19' AND '2011-07-19';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.text ( text ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.body ( text ) , posts.answercount ( integer | values : 5 , 7 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents :\nposthistory.postid ( 3720 )\nposthistory.id ( 3720 )\nposthistory.comment ( type )\nposts.id ( 3720 )\nposts.viewcount ( 3720 )\ncomments.id ( 3720 )\ncomments.postid ( 3720 )\nvotes.postid ( 3720 )\nWhat are the post history type IDs for post ID 3720 and how many unique users have commented on the post?\n", "response": "SELECT posthistorytypeid, count(DISTINCT userid) FROM posthistory WHERE postid = 3720 GROUP BY posthistorytypeid;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) , posts.title ( text | values : What is normality? ) , posts.score ( integer | values : 23 , 22 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.revisionguid ( text ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.tagname ( text | values : bayesian , prior ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\npostlinks.postid ( 61217 )\npostlinks.relatedpostid ( 61217 )\nposts.id ( 61217 )\nposthistory.postid ( 61217 )\nposthistory.id ( 61217 )\ncomments.id ( 61217 )\ncomments.postid ( 61217 )\nList out all post that are related to post ID 61217 and what is the popularity of this post?\n", "response": "SELECT posts.title , posts.viewcount FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE postlinks.relatedpostid = 61217;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.revisionguid ( text ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.userid ( integer | values : 58 , 6 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents :\npostlinks.postid ( 395 )\nposts.id ( 395 )\ncomments.id ( 395 )\ncomments.postid ( 395 )\nposthistory.id ( 395 )\nposthistory.postid ( 395 )\nposthistory.comment ( link , type , 395 )\nWhat is the score and the link type ID for post ID 395?\n", "response": "SELECT posts.score , postlinks.linktypeid FROM postlinks INNER JOIN posts ON postlinks.postid = posts.id WHERE postlinks.postid = 395;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposts.score ( 60 )\nposts.id ( 60 )\ncomments.postid ( 60 )\ncomments.id ( 60 )\nposthistory.userid ( 60 )\nposthistory.postid ( 60 )\nposthistory.id ( 60 )\nposthistory.userdisplayname ( User )\nList out all post ID with score more than 60 and list out all the user ID that created these post.\n", "response": "SELECT posts.id, users.id FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON votes.userid = users.id WHERE posts.score > 60;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.favoritecount ( integer | values : 14 , 8 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.commentcount ( integer | values : 1 , 4 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.accountid ( integer | values : -1 , 2 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.views ( integer | values : 0 , 25 ) , users.upvotes ( integer | values : 5007 , 3 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposts.id ( 686 )\nvotes.userid ( 2011 )\nvotes.id ( 2011 )\ncomments.userid ( 686 )\ncomments.id ( 686 , 2011 )\ncomments.postid ( 686 )\nusers.id ( 2011 )\nbadges.userid ( 686 , 2011 )\nbadges.id ( 686 , 2011 )\nWhat is the sum of favourite count gained by user ID 686 in 2011?\n", "response": "SELECT SUM(posts.favoritecount) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.userid = 686 AND votes.creationdate = '2011-07-19';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.views ( integer | values : 0 , 25 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.score ( integer | values : 23 , 22 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userdisplayname ( text | values : user28 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.score ( integer | values : 5 , 0 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposthistory.userdisplayname ( User )\nWhat is the average of the up votes and the average user age for users creating more than 10 posts?\n", "response": "SELECT AVG(users.upvotes), AVG(users.age) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.commentcount > 10;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.name ( Announcer )\nHow many users obtained the \"Announcer\" badge?\n", "response": "SELECT count(badges.userid) FROM badges WHERE badges.name = 'Announcer';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable votes , columns = [ votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents : None\nList out the name of badges that users obtained on 7/19/2010 7:39:08 PM.\n", "response": "SELECT name FROM badges WHERE date = '2010-07-19 19:39:08.0';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.tags ( text ) , posts.body ( text ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.tagname ( text | values : bayesian , prior ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.text ( text ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents : None\nHow many positive comments are there on the list?\n", "response": "SELECT count(*) FROM comments WHERE score > 0;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posts , columns = [ posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) , posts.commentcount ( integer | values : 1 , 4 ) ]\ntable posthistory , columns = [ posthistory.text ( text ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\ntable postlinks , columns = [ postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\ntable votes , columns = [ votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents : None\nState the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.\n", "response": "SELECT * FROM comments WHERE creationdate = '2010-07-19 19:25:47.0';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.body ( text ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.count ( integer | values : 1342 , 168 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.tagname ( text | values : bayesian , prior ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\ntags.tagname ( scores )\nHow many posts have a score of 10 on the list?\n", "response": "SELECT count(id) FROM posts WHERE score = 10;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.views ( integer | values : 0 , 25 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.postid ( integer | values : 3 , 5 ) ]\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.title ( text | values : What is normality? ) , posts.score ( integer | values : 23 , 22 ) , posts.body ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents : None\nWhat are the names of badges that users who have the highest reputation obtained?\n", "response": "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.reputation = ( SELECT max(users.reputation) FROM users );\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userdisplayname ( text | values : user28 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents : None\nMention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.\n", "response": "SELECT users.reputation FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.date = '2010-07-19 19:39:08.0';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( Pierre , name , Name , user , useR , User )\nposthistory.userdisplayname ( User )\nWhat is the name of badge that the user whose display name is \"Pierre\" obtained?\n", "response": "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Pierre';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.location ( text | values : on the server farm , Corvallis, OR ) , users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.views ( integer | values : 0 , 25 ) ]\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) ]\ntable votes , columns = [ votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable posthistory , columns = [ posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userdisplayname ( text | values : user28 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.location ( Rochester, NY , NY )\nList out the dates that users who are located in Rochester, NY obtained their badges?\n", "response": "SELECT badges.date FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'Rochester, NY , NY';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.name ( Teacher )\nAmong the users who obtained the \"Teacher\" badge, calculate their percentage of users\n", "response": "SELECT cast(sum(CASE WHEN name = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / count(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Teacher';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.votetypeid ( integer | values : 2 , 5 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.name ( Organizer )\nAmong the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.\n", "response": "SELECT cast(count(users.age) AS REAL) * 100 / ( SELECT count(users.id) FROM users WHERE users.reputation = 1 ), users.displayname FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer' GROUP BY users.displayname ORDER BY users.displayname;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.commentcount ( integer | values : 1 , 4 ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\ntable postlinks , columns = [ postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents : None\nWhat is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM\n", "response": "SELECT comments.score FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:19:56.0';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.text ( text ) , comments.postid ( integer | values : 3 , 5 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) ]\ntable posts , columns = [ posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) , posts.title ( text | values : What is normality? ) , posts.score ( integer | values : 23 , 22 ) ]\ntable posthistory , columns = [ posthistory.text ( text ) , posthistory.comment ( text | values : edited tags ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\ntable postlinks , columns = [ postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) ]\ntable votes , columns = [ votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents : None\nWhat is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?\n", "response": "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.creaiondate = '2010-07-19 19:37:33.0';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.location ( text | values : on the server farm , Corvallis, OR ) , users.age ( integer | values : 37 , 35 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.tagname ( text | values : bayesian , prior ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nmatched contents :\nusers.location ( Vienna, Austria , Austria , vienna , Vienna )\ntags.tagname ( age )\nList out the age of users who located in Vienna, Austria obtained the badge?\n", "response": "SELECT users.age FROM users INNER JOIN badges ON users.id = badges.userid WHERE users.location = 'Vienna, Austria';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.tagname ( text | values : bayesian , prior ) , tags.count ( integer | values : 1342 , 168 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nmatched contents :\nbadges.name ( Supporter )\nHow many adults who obtained the badge Supporter?\n", "response": "SELECT count(users.age) FROM users INNER JOIN badges ON users.accountid = badges.userid WHERE badges.name = 'Supporter';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) ]\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents : None\nState the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.\n", "response": "SELECT views FROM users INNER JOIN badges ON users.id = badges.userid WHERE date = '2010-07-19 07:39:08.0';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.displayname ( text | values : Community , Geoff Dalgas ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.postid ( integer | values : 3 , 5 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.score ( integer | values : 23 , 22 ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.displayname ( name , Name )\nWhat are the name of badges that users who have the lowest reputation obtained?\n", "response": "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.reputation = ( SELECT max(users.reputation) FROM users );\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( Sharpie , name , Name , user , useR , User )\nposthistory.userdisplayname ( User )\nState the name of badge that the user whose display name is \"Sharpie\" obtained.\n", "response": "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Sharpie';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\ntable votes , columns = [ votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.name ( Supporter )\nHow many elders obtained the \"Supporter\" badge?\n", "response": "SELECT count(badges.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Supporter';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.age ( integer | values : 37 , 35 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( name , Name , user , useR , User )\nposthistory.userdisplayname ( User )\nWhat is the name of user with the ID of 30?\n", "response": "SELECT users.displayname FROM users WHERE users.id = 30;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.location ( text | values : on the server farm , Corvallis, OR ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.location ( New York , York )\nHow many users were from New York?\n", "response": "SELECT count(users.id) FROM users WHERE users.location = 'New York';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.views ( integer | values : 0 , 25 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nvotes.userid = users.id\nmatched contents :\nvotes.id ( 2010 )\nbadges.id ( 2010 )\nbadges.userid ( 2010 )\ncomments.id ( 2010 )\nusers.id ( 2010 )\nHow many votes were made in 2010?\n", "response": "SELECT count(*) FROM votes WHERE strftime('%Y', votes.creationdate) = '2010';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents : None\nHow many users were adult?\n", "response": "SELECT count(*) FROM users WHERE age >= 18;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) ]\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents : None\nWhich users have the highest number of views?\n", "response": "SELECT id FROM users ORDER BY views DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.userid ( integer | values : 58 , 6 ) ]\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) ]\ntable comments , columns = [ comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posts , columns = [ posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.viewcount ( integer | values : 1278 , 8198 ) ]\ntable users , columns = [ users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.views ( integer | values : 0 , 25 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nvotes.id ( 2010 , 2011 )\nvotes.userid ( 2011 )\nbadges.id ( 2010 , 2011 )\nbadges.userid ( 2010 , 2011 )\ncomments.id ( 2010 , 2011 )\nposts.id ( 2010 )\nposts.viewcount ( 2011 )\nusers.id ( 2010 , 2011 )\nCalculate the ratio of votes in 2010 and 2011.\n", "response": "SELECT cast(sum(CASE WHEN votes.creationdate = '2010-07-19' THEN 1 ELSE 0 END) AS REAL) / count(*) FROM votes WHERE votes.creationdate = '2010-07-19';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable tags , columns = [ tags.tagname ( text | values : bayesian , prior ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.tags ( text ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.title ( text | values : What is normality? ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.aboutme ( text ) , users.reputation ( integer | values : 1 , 101 ) , users.accountid ( integer | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\ntags.excerptpostid = posts.id\nmatched contents :\nposts.ownerdisplayname ( John )\nusers.displayname ( John Stauffer , name , Name , John )\ncomments.userdisplayname ( John )\nWhat is the name of tags used by John Stauffer's?\n", "response": "SELECT tags.tagname FROM tags INNER JOIN posts ON tags.excerptpostid = posts.id WHERE posts.ownerdisplayname = 'John Stauffer';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.text ( text ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposts.ownerdisplayname ( Daniel )\nusers.displayname ( Daniel Vassallo , daniel )\ncomments.userdisplayname ( Daniel )\nposthistory.userdisplayname ( Daniel )\nHow many posts were created by Daniel Vassallo?\n", "response": "SELECT count(*) FROM posts WHERE ownerdisplayname = 'Daniel Vassallo';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.upvotes ( integer | values : 5007 , 3 ) , users.accountid ( integer | values : -1 , 2 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( Harlan )\nHow many votes were made by Harlan?\n", "response": "SELECT count(*) FROM votes WHERE votes.userid = 58;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.answercount ( integer | values : 5 , 7 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.acceptedanswerid ( integer | values : 15 , 59 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.accountid ( integer | values : -1 , 2 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userdisplayname ( text | values : user28 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents : None\nWhich post by slashnick has the most answers count? State the post ID.\n", "response": "SELECT posts.id FROM posts ORDER BY posts.answercount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.title ( text | values : What is normality? ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.accountid ( integer | values : -1 , 2 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( Harvey Motulsky , Noah Snyder , Harvey , Noah , noah )\nAmong posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?\n", "response": "SELECT posts.title FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Harvey Motulsky' OR users.displayname = 'Noah Snyder' ORDER BY posts.viewcount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.views ( integer | values : 0 , 25 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.score ( integer | values : 23 , 22 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.displayname ( Matt Parker , Parker , Matt , matt )\nposts.ownerdisplayname ( Matt )\ncomments.id ( 4 )\ncomments.postid ( 4 )\ncomments.userdisplayname ( Matt )\ncomments.score ( 4 )\nposthistory.id ( 4 )\nposthistory.postid ( 4 )\nposthistory.userdisplayname ( Matt )\nposthistory.posthistorytypeid ( 4 )\nposthistory.comment ( 4 )\nHow many posts by Matt Parker have more than 4 votes?\n", "response": "SELECT count(id) FROM posts WHERE ownerdisplayname = 'Matt Parker' AND score > 4;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.displayname ( Neil McGuigan , neil , Neil )\nHow many negative comments did Neil McGuigan get in his posts?\n", "response": "SELECT count(comments.score) FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.displayname = 'Neil McGuigan' AND comments.score < 0;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable tags , columns = [ tags.tagname ( text | values : bayesian , prior ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\ntable posts , columns = [ posts.tags ( text ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.aboutme ( text ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userdisplayname ( text | values : user28 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\ntags.excerptpostid = posts.id\nmatched contents :\nusers.displayname ( Mark Meckes , mark , Mark )\nposthistory.comment ( Tags , tags )\nState all the tags used by Mark Meckes in his posts that doesn't have comments.\n", "response": "SELECT tags.tagname FROM tags INNER JOIN posthistory ON tags.id = posthistory.posthistorytypeid WHERE posthistory.userid = 8 AND posthistory.comment = '';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.name ( Organizer )\nusers.displayname ( name , Name )\nList all the name of users that obtained the Organizer Badges.\n", "response": "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Organizer';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.posttypeid ( integer | values : 1 , 2 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.tags ( text ) , posts.body ( text ) , posts.title ( text | values : What is normality? ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.accountid ( integer | values : -1 , 2 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents : None\nBased on posts posted by Community, calculate the percentage of posts that use the R language.\n", "response": "SELECT cast(count(DISTINCT CASE WHEN posts.tags LIKE '%R%' THEN posts.title ELSE NULL END) AS REAL) * 100 / count(DISTINCT posts.title) FROM posts;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) ]\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( mornington , Amos )\nCalculate the difference in view count from post posted by mornington and view count from posts posted by Amos.\n", "response": "SELECT sum(CASE WHEN posts.ownerdisplayname = 'mornington' THEN posts.viewcount ELSE 0 END) - sum(CASE WHEN posts.ownerdisplayname = 'Amos' THEN posts.viewcount ELSE 0 END) FROM posts;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.tagname ( text | values : bayesian , prior ) , tags.count ( integer | values : 1342 , 168 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable votes , columns = [ votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.id ( 2014 )\nbadges.name ( Commentator )\ncomments.id ( 2014 )\nvotes.id ( 2014 )\nHow many users received commentator badges in 2014?\n", "response": "SELECT count(DISTINCT users.id) FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Commentator';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.title ( text | values : What is normality? ) ]\ntable postlinks , columns = [ postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) ]\ntable comments , columns = [ comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.userid ( integer | values : 58 , 6 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents :\nposts.id ( 2010 )\nposthistory.postid ( 2010 )\ncomments.id ( 2010 )\nvotes.id ( 2010 )\nHow many posts were created on 21st July, 2010?\n", "response": "SELECT count(*) FROM posts WHERE creaiondate = '2010-07-21';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.views ( integer | values : 0 , 25 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.upvotes ( integer | values : 5007 , 3 ) ]\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.displayname ( user , useR , User )\nposts.ownerdisplayname ( User )\nWhat are the display names and ages of user who got the highest in views?\n", "response": "SELECT users.displayname, users.age FROM users WHERE users.views = ( SELECT max(views) FROM users );\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.lasteditdate ( datetime | values : 2010-08-07 17:56:44.0 , 2011-02-12 05:50:03.0 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.revisionguid ( text ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents : None\nProvide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".\n", "response": "SELECT posts.lasteditdate, posts.lasteditoruserid FROM posts WHERE posts.title = 'Detecting a given face in a database of facial images';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.owneruserid ( integer | values : 8 , 24 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.text ( text ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents : None\nHow many negative comments were given by user ID 13?\n", "response": "SELECT count(comments.score) FROM comments WHERE comments.userid = 13 AND comments.score = 0;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) ]\ntable users , columns = [ users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.text ( text ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposthistory.comment ( title , Title )\nDescribe the post title which got positive comments and display names of the users who posted those comments.\n", "response": "SELECT posts.title, users.displayname FROM posts INNER JOIN comments ON comments.postid = posts.id INNER JOIN users ON users.id = comments.userid WHERE comments.score > 0;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) ]\ntable users , columns = [ users.location ( text | values : on the server farm , Corvallis, OR ) , users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.title ( text | values : What is normality? ) , posts.tags ( text ) , posts.body ( text ) , posts.score ( integer | values : 23 , 22 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nbadges.userid ( 2011 )\nbadges.id ( 2011 )\nusers.location ( North Pole , Location , north )\nusers.id ( 2011 )\nusers.displayname ( user , useR , User )\nvotes.userid ( 2011 )\nvotes.id ( 2011 )\ncomments.id ( 2011 )\nProvide the badge names received in 2011 for the user whose location is in the North Pole.\n", "response": "SELECT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.location = 'North Pole';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.websiteurl ( text | values : http://stackoverflow.com ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable posts , columns = [ posts.favoritecount ( integer | values : 14 , 8 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.answercount ( integer | values : 5 , 7 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposts.id ( 150 )\ncomments.postid ( 150 )\ncomments.id ( 150 )\nposthistory.postid ( 150 )\nposthistory.id ( 150 )\nposthistory.comment ( 150 )\nProvide the users' display names and available website URLs of the post with favorite count of more than 150.\n", "response": "SELECT users.displayname, users.websiteurl FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount > 150;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.viewcount ( integer | values : 1278 , 8198 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.revisionguid ( text ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.text ( text ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) ]\ntable tags , columns = [ tags.count ( integer | values : 1342 , 168 ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.tagname ( text | values : bayesian , prior ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\nposthistory.text ( Bayesian Statistics )\ntags.tagname ( history , bayesian )\nDescribe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"\n", "response": "SELECT posts.title, posts.creaiondate, posts.lasactivitydate FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'What is the best introductory Bayesian statistics textbook?';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.id ( integer | primary key | values : -1 , 2 ) , users.websiteurl ( text | values : http://stackoverflow.com ) , users.reputation ( integer | values : 1 , 101 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) ]\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.tags ( text ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) , posts.score ( integer | values : 23 , 22 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.location ( Location )\nbadges.name ( outliers )\nDescribe the last accessed date and location of the users who received the outliers badge.\n", "response": "SELECT users.lastaccessdate, users.location FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'outliers';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable postlinks , columns = [ postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.body ( text ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable posthistory , columns = [ posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.revisionguid ( text ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.userid ( integer | values : 13 , 37 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nmatched contents :\nposthistory.comment ( title , Title , data , time )\nProvide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".\n", "response": "SELECT relatedpostid FROM postlinks WHERE postid = (SELECT id FROM posts WHERE title = 'How to tell if something happened in a data set which monitors a value over time');\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nbadges.userid ( 2013 )\nbadges.id ( 2013 )\nposts.id ( 2013 )\nusers.id ( 2013 )\nusers.displayname ( Samuel , samuel , user , useR , User )\ncomments.id ( 2013 )\ncomments.postid ( 2013 )\nvotes.id ( 2013 )\nList the post IDs and badge names of the user Samuel in 2013.\n", "response": "SELECT posts.id, badges.name FROM badges INNER JOIN votes ON badges.id = votes.bountyamount INNER JOIN posts ON votes.postid = posts.id INNER JOIN users ON votes.userid = users.id WHERE users.displayname = 'Samuel' AND posts.creaiondate = '2013-07-19';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.commentcount ( integer | values : 1 , 4 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) ]\ntable users , columns = [ users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.upvotes ( integer | values : 5007 , 3 ) ]\ntable votes , columns = [ votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.displayname ( name , Name )\nWhat is the owner's display name of the most popular post?\n", "response": "SELECT posts.ownerdisplayname FROM posts ORDER BY posts.viewcount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.location ( text | values : on the server farm , Corvallis, OR ) , users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable posts , columns = [ posts.tags ( text ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) ]\ntable tags , columns = [ tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.tagname ( text | values : bayesian , prior ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.count ( integer | values : 1342 , 168 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.text ( text ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\ntags.excerptpostid = posts.id\nmatched contents :\nusers.location ( Location )\nusers.displayname ( name , Name , user , useR , User )\nposts.ownerdisplayname ( User )\nposthistory.userdisplayname ( User )\nMention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.\n", "response": "SELECT users.displayname, users.location FROM posts INNER JOIN tags ON tags.wikipostid = posts.id INNER JOIN posthistory ON posthistory.postid = posts.id INNER JOIN users ON users.id = posts.owneruserid WHERE tags.tagname = 'hypothesis-testing';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable postlinks , columns = [ postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.score ( integer | values : 23 , 22 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.body ( text ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.userid ( integer | values : 13 , 37 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.accountid ( integer | values : -1 , 2 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposthistory.comment ( link , type , principal! , title , Title )\nposthistory.text ( principal component )\nWrite down the related posts titles and link type IDs of the post \"What are principal component scores?\".\n", "response": "SELECT posts.title, postlinks.linktypeid FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.title = 'What are principal component scores?';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.parentid ( integer | values : 3 , 7 ) , posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable users , columns = [ users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( name , Name )\nDescribe the display name of the parent ID for child post with the highest score.\n", "response": "SELECT ownerdisplayname FROM posts ORDER BY score DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.websiteurl ( text | values : http://stackoverflow.com ) , users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.views ( integer | values : 0 , 25 ) ]\ntable votes , columns = [ votes.bountyamount ( integer | values : 50 , 25 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.tags ( text ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.postid ( integer | values : 3 , 5 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.displayname ( user , useR , User )\ncomments.userid ( 8 )\ncomments.score ( 8 )\ncomments.postid ( 8 )\nbadges.userid ( 8 )\nbadges.id ( 8 )\nUnder the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.\n", "response": "SELECT users.displayname, users.websiteurl FROM votes INNER JOIN users ON votes.userid = users.id WHERE votes.votetypeid = 8 ORDER BY votes.bountyamount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.body ( text ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.tagname ( text | values : bayesian , prior ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\nposthistory.id ( 5 )\nposthistory.posthistorytypeid ( 5 )\nposthistory.comment ( 5 , title , Title )\ncomments.postid ( 5 )\ncomments.id ( 5 )\ncomments.score ( 5 )\ncomments.userid ( 5 )\nWhat are the titles of the top 5 posts with the highest popularity?\n", "response": "SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable tags , columns = [ tags.count ( integer | values : 1342 , 168 ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.tagname ( text | values : bayesian , prior ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\ntable posts , columns = [ posts.tags ( text ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.answercount ( integer | values : 5 , 7 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) ]\nforeign keys :\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\nposthistory.comment ( Tags , tags )\nHow many tags have post count between 5,000 to 7,000?\n", "response": "SELECT count(tags.tagname) FROM tags WHERE tags.count BETWEEN 5000 AND 7000;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.bountyamount ( integer | values : 50 , 25 ) , votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\nforeign keys :\ncomments.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents : None\nWhat is the owner user id of the most valuable post?\n", "response": "SELECT posts.owneruserid FROM posts ORDER BY posts.score DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.views ( integer | values : 0 , 25 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) ]\ntable posts , columns = [ posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.tags ( text ) , posts.body ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.postid ( integer | values : 3 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.displayname ( user , useR , User )\nposts.ownerdisplayname ( User )\nHow old is the most influential user?\n", "response": "SELECT users.age FROM users ORDER BY users.views DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) ]\ntable posts , columns = [ posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.body ( text ) , posts.title ( text | values : What is normality? ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents :\nvotes.id ( 2011 )\nvotes.userid ( 2011 )\nposthistory.id ( 2011 , 50 )\nposthistory.postid ( 50 )\nposthistory.userid ( 50 )\npostlinks.postid ( 50 )\npostlinks.relatedpostid ( 50 )\ncomments.id ( 2011 , 50 )\ncomments.postid ( 50 )\nHow many posts with votes that were created in 2011 have a bounty of 50?\n", "response": "SELECT count(*) FROM votes WHERE creationdate = '2011-07-19' AND bountyamount = 50;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nposthistory.userdisplayname ( User )\nWhat is the id of the youngest user?\n", "response": "SELECT id FROM users ORDER BY age DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.tags ( text ) , posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) ]\ntable tags , columns = [ tags.count ( integer | values : 1342 , 168 ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.tagname ( text | values : bayesian , prior ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\ntags.tagname ( scores )\nWhat is the score of the post with the most popular tag?\n", "response": "SELECT t.score FROM ( SELECT tags.tagname, sum(comments.score) FROM tags INNER JOIN comments ON tags.id = comments.tagid GROUP BY tags.tagname ORDER BY sum(comments.score) DESC LIMIT 1 ) t;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.acceptedanswerid ( integer | values : 15 , 59 ) , posts.answercount ( integer | values : 5 , 7 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.viewcount ( integer | values : 1278 , 8198 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nmatched contents :\nposts.id ( 2010 )\nposthistory.postid ( 2010 )\nposthistory.comment ( Links )\ncomments.id ( 2010 )\nbadges.id ( 2010 )\nbadges.userid ( 2010 )\nWhat is the average monthly number of links created in 2010 for posts that have no more than 2 answers?\n", "response": "SELECT cast(sum(postlinks.creationdate) AS REAL) / 12 FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid WHERE posts.answercount < 2;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) , posts.tags ( text ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\nforeign keys :\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents :\nposts.id ( 1465 )\nbadges.id ( 1465 )\nbadges.userid ( 1465 )\nposthistory.id ( 1465 )\nposthistory.postid ( 1465 )\nAmong the posts that were voted by user 1465, what is the id of the most valuable post?\n", "response": "SELECT posts.id FROM votes INNER JOIN posts ON votes.postid = posts.id WHERE votes.userid = 1465 GROUP BY votes.postid ORDER BY sum(votes.bountyamount) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nmatched contents :\nposthistory.comment ( title , Title , link )\nWhat is the title of the post with the oldest post link?\n", "response": "SELECT posts.title FROM posts INNER JOIN postlinks ON posts.id = postlinks.postid ORDER BY postlinks.creationdate ASC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posts , columns = [ posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.score ( integer | values : 23 , 22 ) , posts.body ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.displayname ( name , Name , user , useR , User )\nposts.ownerdisplayname ( User )\nWhat is the display name of the user who acquired the highest amount of badges?\n", "response": "SELECT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id ORDER BY badges.id DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.title ( text | values : What is normality? ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents : None\nWhen did \"chl\" cast its first vote in a post?\n", "response": "SELECT creationdate FROM votes WHERE postid = ( SELECT id FROM posts WHERE title = 'chl' ) ORDER BY creationdate ASC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.views ( integer | values : 0 , 25 ) ]\ntable posts , columns = [ posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) ]\ntable votes , columns = [ votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents : None\nWhat is the date when the youngest user made his or her first post?\n", "response": "SELECT creationdate FROM posts ORDER BY creationdate DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) ]\ntable users , columns = [ users.displayname ( text | values : Community , Geoff Dalgas ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posts , columns = [ posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.tags ( text ) , posts.title ( text | values : What is normality? ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nbadges.name ( Autobiographer )\nusers.displayname ( name , Name , user , useR , User )\nposts.ownerdisplayname ( User )\nposthistory.userdisplayname ( User )\nWhat is the display name of the user who acquired the first Autobiographer badge?\n", "response": "SELECT DISTINCT users.displayname FROM badges INNER JOIN users ON badges.userid = users.id WHERE badges.name = 'Autobiographer';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.location ( text | values : on the server farm , Corvallis, OR ) , users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable posts , columns = [ posts.favoritecount ( integer | values : 14 , 8 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.location ( United Kingdom )\ncomments.id ( 4 )\ncomments.postid ( 4 )\ncomments.score ( 4 )\nbadges.userid ( 4 )\nbadges.id ( 4 )\nAmong the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?\n", "response": "SELECT count(*) FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.favoritecount >= 4;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.views ( integer | values : 0 , 25 ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.score ( integer | values : 23 , 22 ) , posts.body ( text ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents : None\nWhat is the average number of posts voted by the oldest users?\n", "response": "SELECT AVG(posts.viewcount) FROM posts INNER JOIN votes ON posts.id = votes.postid INNER JOIN users ON votes.userid = users.id ORDER BY users.id ASC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.reputation ( integer | values : 1 , 101 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( please , name , Name )\nWho has the highest reputation? Please give the display name.\n", "response": "SELECT users.displayname FROM users WHERE users.reputation = ( SELECT max(users.reputation) FROM users );\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.id ( 2000 , 1000 )\nposts.viewcount ( 2000 , 1000 )\nposts.id ( 2000 , 1000 )\nbadges.userid ( 1000 )\nbadges.id ( 2000 , 1000 )\nvotes.id ( 2000 , 1000 )\nvotes.postid ( 2000 )\ncomments.id ( 2000 )\nHow many users whose reputations are higher than 2000 and the number of views is higher than 1000?\n", "response": "SELECT count(*) FROM users WHERE reputation > 2000 AND views > 1000;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.tagname ( text | values : bayesian , prior ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nmatched contents :\nusers.displayname ( please )\nPlease list all display names of users who are adults.\n", "response": "SELECT users.displayname FROM users WHERE users.age > 18;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposts.id ( 2010 )\nposts.ownerdisplayname ( Jay , jay , Steven )\nusers.id ( 2010 )\nusers.displayname ( Jay Stevens , jay , Jay , steven , Steven )\ncomments.id ( 2010 )\ncomments.userdisplayname ( Jay )\nposthistory.postid ( 2010 )\nposthistory.userdisplayname ( Jay , jay , Steven )\nbadges.userid ( 2010 )\nbadges.id ( 2010 )\nHow many posts did Jay Stevens have in 2010?\n", "response": "SELECT count(posts.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Jay Stevens' AND posts.creaiondate = '2010-07-19 19:12:12.0';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.aboutme ( text ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( Harvey Motulsky , Harvey , please )\nposthistory.comment ( title , Title )\nWhich post by Harvey Motulsky has the most views? Please give the id and title of this post.\n", "response": "SELECT posts.id , posts.title FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid INNER JOIN users ON posthistory.userid = users.id WHERE users.displayname = 'Harvey Motulsky' ORDER BY posts.viewcount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) , posts.tags ( text ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable votes , columns = [ votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.userid ( integer | values : 58 , 6 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\ncomments.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents : None\nWhich post has the highest score? Please give its id and title's name.\n", "response": "SELECT posts.id, posts.title FROM posts ORDER BY posts.score DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.accountid ( integer | values : -1 , 2 ) , users.aboutme ( text ) , users.views ( integer | values : 0 , 25 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( Stephen Turner , stephen , Stephen )\nWhat is the average score of Stephen Turner's posts?\n", "response": "SELECT avg(posts.score) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Stephen Turner';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.score ( integer | values : 5 , 0 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.displayname ( please )\nusers.id ( 20000 , 2011 )\nposts.viewcount ( 2011 )\nposts.id ( 20000 )\nposts.owneruserid ( 20000 )\ncomments.id ( 20000 , 2011 )\nvotes.userid ( 2011 )\nvotes.id ( 20000 , 2011 )\nbadges.userid ( 20000 , 2011 )\nbadges.id ( 2011 )\nPlease list the users' display names whose posts had over 20000 views in 2011.\n", "response": "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE posts.viewcount > 20000 AND YEAR = 2011;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.bountyamount ( integer | values : 50 , 25 ) , votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.userid ( integer | values : 58 , 6 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.title ( text | values : What is normality? ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nvotes.id ( 2010 )\nposts.id ( 2010 )\nusers.id ( 2010 )\nusers.displayname ( please , name , Name )\ncomments.id ( 2010 )\nbadges.id ( 2010 )\nbadges.userid ( 2010 )\nWhich is the most valuable post in 2010? Please give its id and the owner's display name.\n", "response": "SELECT posts.id, posts.ownerdisplayname FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.creationdate = '2010-07-19' ORDER BY votes.bountyamount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable users , columns = [ users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.views ( integer | values : 0 , 25 ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable votes , columns = [ votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) ]\ntable comments , columns = [ comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposts.id ( 1000 )\nposts.viewcount ( 1000 , 2011 )\nusers.id ( 1000 , 2011 )\nvotes.id ( 1000 , 2011 )\nvotes.userid ( 2011 )\nbadges.id ( 1000 , 2011 )\nbadges.userid ( 1000 , 2011 )\ncomments.id ( 2011 )\nWhat is the percentage of posts whose owners had a reputation of over 1000 in 2011?\n", "response": "SELECT COUNT(*) FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.reputation > 1000;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents : None\nIdentify the percentage of teenage users.\n", "response": "SELECT 100.0 * sum(CASE WHEN users.age < 18 THEN 1 ELSE 0 END) / count(*) FROM users;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.score ( integer | values : 5 , 0 ) ]\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposts.title ( Computer game datasets )\nposts.ownerdisplayname ( User )\nusers.displayname ( name , Name , user , useR , User )\nposthistory.userdisplayname ( User )\nIdentify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.\n", "response": "SELECT SUM(posts.viewcount) FROM posts INNER JOIN posthistory ON posts.id = posthistory.postid WHERE posts.title = 'Computer Game Datasets' AND posthistory.userdisplayname = 'User';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.answercount ( integer | values : 5 , 7 ) ]\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.tagname ( text | values : bayesian , prior ) ]\nforeign keys :\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\ntags.excerptpostid = posts.id\nmatched contents :\ntags.tagname ( average )\nIdentify the total number of posts with views above average.\n", "response": "SELECT sum(posts.viewcount) FROM posts WHERE posts.viewcount > (SELECT avg(posts.viewcount) FROM posts);\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.answercount ( integer | values : 5 , 7 ) , posts.viewcount ( integer | values : 1278 , 8198 ) ]\ntable posthistory , columns = [ posthistory.comment ( text | values : edited tags ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents :\nposthistory.comment ( added )\nHow many comments were added to the post with the highest score?\n", "response": "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.score = ( SELECT max(posts.score) FROM posts );\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.body ( text ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.text ( text ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposts.id ( 35000 )\ncomments.id ( 35000 )\nusers.id ( 35000 )\nposthistory.id ( 35000 )\nposthistory.postid ( 35000 )\nposthistory.userid ( 35000 )\nIdentify the number of posts that have been viewed over 35000 times but have received no comments from other users.\n", "response": "SELECT count(*) FROM posts WHERE viewcount > 35000 AND commentcount = 0;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.location ( text | values : on the server farm , Corvallis, OR ) , users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasactivitydate ( datetime | comment : last activity date | values : 2010-09-15 21:08:26.0 , 2012-11-12 09:21:54.0 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable votes , columns = [ votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.location ( Location )\nusers.displayname ( name , Name , user , useR , User )\nposts.id ( 183 )\nposts.ownerdisplayname ( User )\ncomments.id ( 183 )\ncomments.userid ( 183 )\ncomments.postid ( 183 )\nposthistory.id ( 183 )\nposthistory.userid ( 183 )\nposthistory.postid ( 183 )\nposthistory.userdisplayname ( User )\nIdentify the display name and location of the user, who was the last to edit the post with ID 183.\n", "response": "SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.id = 183;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) ]\ntable users , columns = [ users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.lastaccessdate ( datetime | values : 2010-07-19 06:55:26.0 , 2013-11-12 22:07:23.0 ) , users.views ( integer | values : 0 , 25 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( Emmett , user , useR , User , name , Name )\nposthistory.userdisplayname ( User )\nIdentify the latest badge awarded to the user with the display name Emmett.\n", "response": "SELECT * FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'Emmett' ) ORDER BY date DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.views ( integer | values : 0 , 25 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.id ( 5000 )\nvotes.id ( 5000 )\nbadges.userid ( 5000 )\nbadges.id ( 5000 )\ncomments.id ( 5000 )\nposthistory.id ( 5000 )\nposthistory.postid ( 5000 )\nIdentify the number of adult users who have cast over 5000 upvotes.\n", "response": "SELECT count(users.id) FROM users WHERE users.upvotes > 5000;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) ]\ntable users , columns = [ users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( Zolomon , user , useR , User , name , Name )\nposthistory.userdisplayname ( User )\nHow long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.\n", "response": "SELECT SUM(badges.date - users.creationdate) FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Zolomon';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.body ( text ) ]\ntable users , columns = [ users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.accountid ( integer | values : -1 , 2 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable comments , columns = [ comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents : None\nIdentify the number of posts and comments left by the user, who has the latest created user account.\n", "response": "SELECT count(posts.id) , count(comments.id) FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.creationdate DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.text ( text ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) ]\ntable posthistory , columns = [ posthistory.text ( text ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable users , columns = [ users.displayname ( text | values : Community , Geoff Dalgas ) , users.id ( integer | primary key | values : -1 , 2 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) ]\ntable postlinks , columns = [ postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposts.ownerdisplayname ( User )\nposthistory.userdisplayname ( User )\nposthistory.comment ( title , Title , data )\nusers.displayname ( data , name , Name , user , useR , User )\nProvide the text of the latest comment to the post with the title 'Analysing wind data with R' and the display name of the user who left it.\n", "response": "SELECT posthistory.text, users.displayname FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id INNER JOIN users ON posts.owneruserid = users.id WHERE posts.title LIKE 'Analysing wind data with R' ORDER BY posthistory.creationdate DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nbadges.name ( Citizen Patrol )\nHow many users were awarded with 'Citizen Patrol' badge?\n", "response": "SELECT count(*) FROM badges WHERE name = 'Citizen Patrol';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable tags , columns = [ tags.tagname ( text | values : bayesian , prior ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\ntable posts , columns = [ posts.tags ( text ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) , posts.score ( integer | values : 23 , 22 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.accountid ( integer | values : -1 , 2 ) ]\nforeign keys :\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\ntags.excerptpostid = posts.id\nmatched contents :\ntags.tagname ( careers )\nposthistory.comment ( specified )\nCount the number of posts with a tag specified as 'careers'.\n", "response": "SELECT count(posts.id) FROM posts INNER JOIN tags ON posts.tags LIKE '%careers%';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.displayname ( text | values : Community , Geoff Dalgas ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.age ( integer | values : 37 , 35 ) ]\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable comments , columns = [ comments.userdisplayname ( text | values : user28 , Statprof ) , comments.userid ( integer | values : 13 , 37 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.text ( text ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( Jarrod Dixon , Jarrod , user , useR , User , name , Name )\nposts.ownerdisplayname ( User )\nposthistory.userdisplayname ( User )\nWhat is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?\n", "response": "SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.answercount ( integer | values : 5 , 7 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.acceptedanswerid ( integer | values : 15 , 59 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.text ( text ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.views ( integer | values : 0 , 25 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.accountid ( integer | values : -1 , 2 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposts.title ( Clustering 1D data )\nposthistory.comment ( clustering , title , Title , data )\nposthistory.text ( Clustering 1D data )\nHow many comments and answers were left by the users on the post with the title 'Clustering 1D data'?\n", "response": "SELECT count(comments.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.title = 'Clustering 1D data';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.accountid ( integer | values : -1 , 2 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.aboutme ( text ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable badges , columns = [ badges.userid ( integer | values : 5 , 6 ) , badges.name ( text | values : Teacher , Student ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable posthistory , columns = [ posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\nposthistory.userid = users.id\nvotes.userid = users.id\nmatched contents :\nusers.displayname ( IrishStat , user , useR , User )\nposthistory.userdisplayname ( User )\nWhen did the user known as 'IrishStat' create his or her account?\n", "response": "SELECT users.creationdate FROM users WHERE users.displayname = 'IrishStat';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable votes , columns = [ votes.bountyamount ( integer | values : 50 , 25 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) , posts.tags ( text ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\nforeign keys :\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents : None\nIdentify the number of posts that offer a bounty amount over 30.\n", "response": "SELECT count(posts.id) FROM posts INNER JOIN votes ON posts.id = votes.postid WHERE votes.bountyamount > 30;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.comment ( text | values : edited tags ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nposts.ownerdisplayname ( User )\ncomments.postid ( 50 )\ncomments.id ( 50 )\nposthistory.userid ( 50 )\nposthistory.id ( 50 )\nposthistory.postid ( 50 )\nposthistory.userdisplayname ( User )\nAmong all the posts posted by the most influential user, identify the percentage with a score above 50.\n", "response": "SELECT posts.score, users.id FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE posts.score > 50 GROUP BY users.id ORDER BY posts.score DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.body ( text ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.userid ( integer | values : 58 , 6 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nvotes.postid = posts.id\nmatched contents : None\nHow many posts have a score less than 20?\n", "response": "SELECT count(id) FROM posts WHERE score < 20;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable tags , columns = [ tags.count ( integer | values : 1342 , 168 ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.tagname ( text | values : bayesian , prior ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) ]\ntable posts , columns = [ posts.tags ( text ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.answercount ( integer | values : 5 , 7 ) , posts.posttypeid ( integer | values : 1 , 2 ) ]\ntable posthistory , columns = [ posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) ]\nforeign keys :\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\nposthistory.comment ( Tags , tags )\nAmong the tags with tag ID below 15, how many of them have 20 count of posts and below?\n", "response": "SELECT count(*) FROM tags WHERE tags.id < 15 AND tags.count > 20;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable tags , columns = [ tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.tagname ( text | values : bayesian , prior ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.count ( integer | values : 1342 , 168 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.tags ( text ) , posts.title ( text | values : What is normality? ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) , posts.score ( integer | values : 23 , 22 ) ]\ntable postlinks , columns = [ postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.accountid ( integer | values : -1 , 2 ) ]\nforeign keys :\nbadges.userid = users.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\ntags.excerptpostid = posts.id\nmatched contents : None\nWhat is the excerpt post ID and wiki post ID of the tag named sample?\n", "response": "SELECT tags.excerptpostid, tags.wikipostid FROM tags WHERE tags.tagname = 'sample';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.upvotes ( integer | values : 5007 , 3 ) , users.reputation ( integer | values : 1 , 101 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.views ( integer | values : 0 , 25 ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) , posts.tags ( text ) ]\ntable posthistory , columns = [ posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.text ( text ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\ncomments.text ( fine, you win :) )\nposthistory.comment ( WIN )\nGive the user's reputation and up vote number of the user that commented \"fine, you win :)\".\n", "response": "SELECT users.reputation, users.upvotes FROM users INNER JOIN votes ON users.id = votes.userid INNER JOIN comments ON votes.id = comments.id WHERE comments.text = 'fine, you win :)';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.text ( text ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.body ( text ) , posts.score ( integer | values : 23 , 22 ) , posts.acceptedanswerid ( integer | values : 15 , 59 ) ]\ntable posthistory , columns = [ posthistory.text ( text ) , posthistory.comment ( text | values : edited tags ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.displayname ( text | values : Community , Geoff Dalgas ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nposthistory.text ( Linear Regression , linear regression )\nposthistory.comment ( regression )\nGive the texts commented on the post about linear regression.\n", "response": "SELECT posthistory.text FROM posthistory INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'What is normality?';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) ]\ntable users , columns = [ users.views ( integer | values : 0 , 25 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) , users.location ( text | values : on the server farm , Corvallis, OR ) , users.accountid ( integer | values : -1 , 2 ) ]\ntable posthistory , columns = [ posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.text ( text ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\ncomments.postid ( 150 )\ncomments.id ( 100 , 150 )\nposts.viewcount ( 100 , 150 )\nposts.id ( 100 , 150 )\nusers.reputation ( 100 )\nposthistory.comment ( 100 , 150 )\nposthistory.postid ( 100 , 150 )\nposthistory.id ( 100 , 150 )\nAmong the posts with views ranging from 100 to 150, what is the comment with the highest score?\n", "response": "SELECT comments.text FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE posts.viewcount BETWEEN 100 AND 150 ORDER BY comments.score DESC LIMIT 1;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.websiteurl ( text | values : http://stackoverflow.com ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable posts , columns = [ posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.tags ( text ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.creationdate ( datetime | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) , posthistory.comment ( text | values : edited tags ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\ntable postlinks , columns = [ postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.postid ( integer | values : 395 , 548 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents : None\nList the creation date and age of the user that commented with webiste.\n", "response": "SELECT users.creationdate, users.age FROM users INNER JOIN comments ON users.id = comments.userid WHERE users.websiteurl = 'http://stackoverflow.com';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.viewcount ( integer | values : 1278 , 8198 ) , posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.answercount ( integer | values : 5 , 7 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable badges , columns = [ badges.id ( integer | primary key | values : 1 , 2 ) , badges.name ( text | values : Teacher , Student ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) , badges.userid ( integer | values : 5 , 6 ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\nmatched contents :\nposts.score ( 0 )\nposts.commentcount ( 0 )\nposts.answercount ( 0 )\ncomments.postid ( 5 )\ncomments.score ( 0 , 5 )\ncomments.id ( 5 )\ncomments.userid ( 5 )\nposthistory.id ( 5 )\nposthistory.comment ( 5 )\nposthistory.posthistorytypeid ( 5 )\nbadges.id ( 5 )\nbadges.userid ( 5 )\nIn comments with 0 score, how many of the posts have view count lower than 5?\n", "response": "SELECT count(posts.id) FROM comments INNER JOIN posts ON comments.postid = posts.id WHERE comments.score = 0 AND posts.viewcount < 5;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.score ( integer | values : 5 , 0 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.viewcount ( integer | values : 1278 , 8198 ) , posts.answercount ( integer | values : 5 , 7 ) ]\ntable posthistory , columns = [ posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.text ( text ) , posthistory.userid ( integer | values : 8 , 24 ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable tags , columns = [ tags.count ( integer | values : 1342 , 168 ) , tags.id ( integer | primary key | values : 1 , 2 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.tagname ( text | values : bayesian , prior ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\ncomments.postid ( 1 )\ncomments.score ( 1 , 0 )\ncomments.id ( 1 )\nposts.score ( 0 )\nposts.commentcount ( 0 )\nposts.answercount ( 0 )\nposthistory.comment ( 1 )\ntags.tagname ( scores )\nIn posts with 1 comment, how many of the comments have 0 score?\n", "response": "SELECT count(DISTINCT score) FROM comments WHERE score = 0;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.age ( integer | values : 37 , 35 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.accountid ( integer | values : -1 , 2 ) , users.reputation ( integer | values : 1 , 101 ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.views ( integer | values : 0 , 25 ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userid ( integer | values : 13 , 37 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.text ( text ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.creaiondate ( datetime | comment : creation date | values : 2010-07-19 19:12:12.0 , 2010-07-19 19:12:57.0 ) ]\ntable posthistory , columns = [ posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.userdisplayname ( text | values : user28 ) ]\ntable votes , columns = [ votes.userid ( integer | values : 58 , 6 ) , votes.postid ( integer | values : 3 , 2 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\nusers.views ( 0 )\ncomments.score ( 40 , 0 )\ncomments.postid ( 40 )\nposts.score ( 0 )\nposthistory.userid ( 40 )\nposthistory.comment ( 40 )\nposthistory.postid ( 40 )\nposthistory.id ( 40 )\nvotes.bountyamount ( 0 )\nAmong products comments with 0 score, what is the total number of users ages 40 years old?\n", "response": "SELECT count(*) FROM users WHERE age = 40;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable posts , columns = [ posts.title ( text | values : What is normality? ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.body ( text ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) , comments.userid ( integer | values : 13 , 37 ) , comments.creationdate ( datetime | values : 2010-07-19 19:15:52.0 , 2010-07-19 19:16:14.0 ) ]\ntable posthistory , columns = [ posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.comment ( text | values : edited tags ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) , posthistory.text ( text ) , posthistory.revisionguid ( text ) ]\ntable postlinks , columns = [ postlinks.postid ( integer | values : 395 , 548 ) , postlinks.id ( integer | primary key | values : 108 , 145 ) , postlinks.relatedpostid ( integer | values : 173 , 539 ) , postlinks.linktypeid ( integer | values : 1 , 3 ) , postlinks.creationdate ( datetime | values : 2010-07-21 14:47:33.0 , 2010-07-23 16:30:41.0 ) ]\ntable tags , columns = [ tags.id ( integer | primary key | values : 1 , 2 ) , tags.excerptpostid ( integer | values : 20258 , 62158 ) , tags.count ( integer | values : 1342 , 168 ) , tags.wikipostid ( integer | values : 20257 , 62157 ) , tags.tagname ( text | values : bayesian , prior ) ]\nforeign keys :\ncomments.postid = posts.id\nposthistory.postid = posts.id\npostlinks.relatedpostid = posts.id\npostlinks.postid = posts.id\nposts.parentid = posts.id\ntags.excerptpostid = posts.id\nmatched contents :\nposthistory.comment ( title , Title )\ntags.tagname ( likert )\nWhat is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?\n", "response": "SELECT posts.id, comments.text FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.title = 'Group differences on a five point Likert item';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.upvotes ( integer | values : 5007 , 3 ) , users.id ( integer | primary key | values : -1 , 2 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) , users.age ( integer | values : 37 , 35 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) , votes.bountyamount ( integer | values : 50 , 25 ) ]\ntable comments , columns = [ comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.userid ( integer | values : 13 , 37 ) , comments.score ( integer | values : 5 , 0 ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable posts , columns = [ posts.id ( integer | primary key | values : 1 , 2 ) , posts.score ( integer | values : 23 , 22 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) , posts.tags ( text ) ]\ntable posthistory , columns = [ posthistory.comment ( text | values : edited tags ) , posthistory.text ( text ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\ncomments.text ( R is also lazy evaluated. )\nWhat is the up vote number of the user that commented \"R is also lazy evaluated.\"?\n", "response": "SELECT upvotes FROM comments WHERE text = 'R is also lazy evaluated.';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.userid ( integer | values : 13 , 37 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.text ( text ) , comments.score ( integer | values : 5 , 0 ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.accountid ( integer | values : -1 , 2 ) , users.aboutme ( text ) , users.creationdate ( datetime | values : 2010-07-19 06:55:26.0 , 2010-07-19 14:01:36.0 ) , users.views ( integer | values : 0 , 25 ) ]\ntable badges , columns = [ badges.name ( text | values : Teacher , Student ) , badges.userid ( integer | values : 5 , 6 ) , badges.id ( integer | primary key | values : 1 , 2 ) , badges.date ( datetime | values : 2010-07-19 19:39:07.0 , 2010-07-19 19:39:08.0 ) ]\ntable posthistory , columns = [ posthistory.comment ( text | values : edited tags ) , posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.text ( text ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) ]\ntable posts , columns = [ posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.lasteditoruserid ( integer | values : 88 , 183 ) , posts.commentcount ( integer | values : 1 , 4 ) , posts.body ( text ) ]\nforeign keys :\nbadges.userid = users.id\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nmatched contents :\nusers.displayname ( Harvey Motulsky , username , Harvey , user , useR , User )\nposthistory.userdisplayname ( User )\nposts.ownerdisplayname ( User )\nList the comments commented by the user with a username of Harvey Motulsky.\n", "response": "SELECT * FROM comments WHERE userdisplayname = 'Harvey Motulsky';\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.userdisplayname ( text | values : user28 , Statprof ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) ]\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.displayname ( text | values : Community , Geoff Dalgas ) , users.upvotes ( integer | values : 5007 , 3 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.ownerdisplayname ( text | values : user28 , user209 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.title ( text | values : What is normality? ) ]\ntable posthistory , columns = [ posthistory.userdisplayname ( text | values : user28 ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.comment ( text | values : edited tags ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.text ( text ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\ncomments.score ( 1 , 5 , 0 )\ncomments.postid ( 1 , 5 )\ncomments.id ( 1 , 5 )\ncomments.userid ( 5 )\nusers.downvotes ( 0 )\nusers.upvotes ( 0 )\nusers.views ( 0 )\nvotes.bountyamount ( 0 )\nposts.score ( 0 )\nposthistory.comment ( 1 , 5 )\nposthistory.id ( 5 )\nIn comments with score between 1 to 5, list down the display names of the users with 0 down votes.\n", "response": "SELECT users.displayname FROM comments INNER JOIN users ON comments.userid = users.id WHERE comments.score BETWEEN 1 AND 5 AND users.downvotes = 0;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable users , columns = [ users.id ( integer | primary key | values : -1 , 2 ) , users.upvotes ( integer | values : 5007 , 3 ) , users.downvotes ( integer | values : 1920 , 0 ) , users.accountid ( integer | values : -1 , 2 ) , users.views ( integer | values : 0 , 25 ) , users.reputation ( integer | values : 1 , 101 ) ]\ntable comments , columns = [ comments.score ( integer | values : 5 , 0 ) , comments.postid ( integer | values : 3 , 5 ) , comments.id ( integer | primary key | values : 1 , 2 ) , comments.userid ( integer | values : 13 , 37 ) , comments.text ( text ) , comments.userdisplayname ( text | values : user28 , Statprof ) ]\ntable posts , columns = [ posts.score ( integer | values : 23 , 22 ) , posts.id ( integer | primary key | values : 1 , 2 ) , posts.posttypeid ( integer | values : 1 , 2 ) , posts.owneruserid ( integer | values : 8 , 24 ) , posts.title ( text | values : What is normality? ) , posts.body ( text ) ]\ntable votes , columns = [ votes.postid ( integer | values : 3 , 2 ) , votes.userid ( integer | values : 58 , 6 ) , votes.id ( integer | primary key | values : 1 , 2 ) , votes.votetypeid ( integer | values : 2 , 5 ) , votes.bountyamount ( integer | values : 50 , 25 ) , votes.creationdate ( date | values : 2010-07-19 , 2010-07-20 ) ]\ntable posthistory , columns = [ posthistory.comment ( text | values : edited tags ) , posthistory.userid ( integer | values : 8 , 24 ) , posthistory.postid ( integer | values : 1 , 2 ) , posthistory.id ( integer | primary key | values : 1 , 2 ) , posthistory.text ( text ) , posthistory.posthistorytypeid ( integer | values : 2 , 1 ) ]\nforeign keys :\ncomments.userid = users.id\ncomments.postid = posts.id\nposthistory.userid = users.id\nposthistory.postid = posts.id\nposts.parentid = posts.id\nposts.owneruserid = users.id\nposts.lasteditoruserid = users.id\nvotes.userid = users.id\nvotes.postid = posts.id\nmatched contents :\ncomments.score ( 5 )\ncomments.postid ( 5 )\ncomments.id ( 5 )\ncomments.userid ( 5 )\nposthistory.comment ( 5 )\nposthistory.id ( 5 )\nposthistory.posthistorytypeid ( 5 )\nAmong the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?\n", "response": "SELECT cast((sum(CASE WHEN comments.score >= 5 AND comments.score <= 10 THEN users.upvotes ELSE 0 END) * 100 / sum(CASE WHEN comments.score >= 5 AND comments.score <= 10 THEN users.upvotes ELSE 0 END)) AS REAL) FROM comments INNER JOIN users ON comments.userid = users.id WHERE users.upvotes = 0;\t", "n_examples": 0, "db_id": "codebase_community"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.power_name ( text | values : Agility , Accelerated Healing ) , superpower.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( 3-D Man )\nPlease list all the superpowers of 3-D Man.\n", "response": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperpower.power_name ( Super Strength )\nattribute.attribute_name ( Strength , Power )\nHow many superheroes have the super power of \"Super Strength\"?\n", "response": "SELECT count(superhero.superhero_name) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.height_cm ( integer | values : 188 , 203 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.power_name ( text | values : Agility , Accelerated Healing ) , superpower.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperpower.power_name ( Super Strength )\nAmong the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?\n", "response": "SELECT count(superhero.superhero_name) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.id ( 15 )\nsuperhero.race_id ( 15 )\nhero_power.hero_id ( 15 )\nhero_power.power_id ( 15 )\nhero_attribute.attribute_value ( 15 )\nPlease list the full names of all the superheroes with over 15 super powers.\n", "response": "SELECT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero.full_name HAVING COUNT(*) > 15;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\ncolour.colour ( Blue )\nHow many superheroes have blue eyes?\n", "response": "SELECT count(*) FROM superhero WHERE eye_colour_id = 33;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable colour , columns = [ colour.colour ( text | values : No Colour , Amber ) , colour.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.race_id = race.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Apocalypse )\nWhat is the colour of Apocalypse's skin?\n", "response": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.full_name = 'Apocalypse';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperpower.power_name ( Agility )\nattribute.attribute_name ( Power )\nAmong the superheroes with blue eyes, how many of them have the super power of \"Agility\"?\n", "response": "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.eye_colour_id = 9 AND superpower.power_name = 'Agility';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable colour , columns = [ colour.colour ( text | values : No Colour , Amber ) , colour.id ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nmatched contents :\ncolour.colour ( Blue , Blond )\nPlease list the superhero names of all the superheroes that have blue eyes and blond hair.\n", "response": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND superhero.hair_colour_id = colour.id;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( Marvel Comics )\nHow many superheroes are published by Marvel Comics?\n", "response": "SELECT count(DISTINCT superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.height_cm ( integer | values : 188 , 203 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( Marvel Comics )\nPlease give the full name of the tallest hero published by Marvel Comics.\n", "response": "SELECT superhero.full_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.publisher_id = publisher.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Sauron )\nWho is the publisher of Sauron?\n", "response": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.publisher_id = publisher.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nmatched contents :\npublisher.publisher_name ( Marvel Comics )\ncolour.colour ( Blue )\nAmong the superheroes from Marvel Comics, how many of them have blue eyes?\n", "response": "SELECT count(superhero.superhero_name) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.height_cm ( integer | values : 188 , 203 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( Marvel Comics )\nWhat is the average height of the superheroes from Marvel Comics?\n", "response": "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperpower.power_name ( Super Strength )\npublisher.publisher_name ( Marvel Comics )\nAmong the superheroes from Marvel Comics, what is the percentage of those who have the super power of \"Super Strength\"?\n", "response": "SELECT superhero.superhero_name, COUNT(superhero.superhero_name) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Super Strength' GROUP BY superhero.superhero_name ORDER BY COUNT(superhero.superhero_name) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( DC Comics )\nHow many superheroes did DC Comics publish?\n", "response": "SELECT count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.height_cm ( integer | values : 188 , 203 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nWhich publisher published the slowest superhero?\n", "response": "SELECT t.publisher_name FROM ( SELECT publisher.publisher_name, min(superhero.weight_kg) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id GROUP BY publisher.publisher_name ORDER BY min(superhero.weight_kg) DESC LIMIT 1 ) t;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( Marvel Comics )\nHow many gold-eyed superheroes did Marvel Comics publish?\n", "response": "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Blue Beetle , Beetle , Blue Beetle III )\nWhat is the publisher's name of Blue Beetle II?\n", "response": "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\ncolour.colour ( Blond )\nHow many superheroes with blonde hair are there?\n", "response": "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE colour.colour = 'Blond';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nsuperhero.race_id = race.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nWho is the dumbest superhero?\n", "response": "SELECT superhero.superhero_name FROM superhero WHERE superhero.full_name = '<NAME>';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nsuperhero.alignment_id = alignment.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Copycat )\nWhat is Copycat's race?\n", "response": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.attribute_name ( text | values : Intelligence , Strength ) , attribute.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nhero_attribute.attribute_value ( 50 )\nhero_attribute.hero_id ( 50 )\nattribute.attribute_name ( Durability )\nsuperhero.id ( 50 )\nsuperhero.race_id ( 50 )\nsuperpower.id ( 50 )\nsuperpower.power_name ( Durability )\nhero_power.hero_id ( 50 )\nhero_power.power_id ( 50 )\nHow many superheroes have durability of less than 50?\n", "response": "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperpower.power_name ( Death Touch )\nattribute.attribute_name ( Power )\nWhat are the names of the superheroes with the power of death touch?\n", "response": "SELECT DISTINCT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nhero_attribute.hero_id ( 100 )\nhero_attribute.attribute_value ( 100 )\nsuperhero.id ( 100 )\ngender.gender ( Female )\nhero_power.hero_id ( 100 )\nhero_power.power_id ( 100 )\nsuperpower.id ( 100 )\nHow many female superheroes have a strength value of 100?\n", "response": "SELECT count(*) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female' AND superhero.race_id = 1 AND superhero.superhero_name = '3-D Man' AND superhero.publisher_id = 13 AND superhero.alignment_id = 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.power_name ( text | values : Agility , Accelerated Healing ) , superpower.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nWhat is the name of the superhero that has the most powers?\n", "response": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero.superhero_name ORDER BY count(hero_power.power_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nrace.race ( Vampire )\nHow many vampire superheroes are there?\n", "response": "SELECT count(superhero_name) FROM superhero WHERE race_id = 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( Marvel Comics )\nWhat is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.\n", "response": "SELECT cast(count(superhero.superhero_name) AS REAL) * 100/ count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.publisher_id = 13;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( Marvel Comics )\nBetween DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.\n", "response": "SELECT publisher.publisher_name, count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC' INTERSECT SELECT publisher.publisher_name, count(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY publisher.publisher_name ORDER BY count(superhero.id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.publisher_id = publisher.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nsuperhero.alignment_id = alignment.id\nmatched contents :\npublisher.publisher_name ( Star Trek )\nGive the publisher ID of Star Trek.\n", "response": "SELECT publisher.id FROM publisher WHERE publisher_name = 'Star Trek';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nCalculate the average attribute value of all superheroes.\n", "response": "SELECT avg(hero_attribute.attribute_value) FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nWhat is the total number of superheroes without full name?\n", "response": "SELECT count(*) FROM superhero WHERE superhero.full_name IS NULL;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.id ( 75 )\nhero_power.power_id ( 75 )\nhero_attribute.hero_id ( 75 )\nhero_attribute.attribute_value ( 75 )\nWhat is the eye colour of superhero with superhero ID 75?\n", "response": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.id = 75;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.power_name ( text | values : Agility , Accelerated Healing ) , superpower.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Deathlok )\nProvide the superpowers of the superhero called Deathlok.\n", "response": "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Deathlok';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\ngender.gender ( Female )\nWhat is the average weight of all female superheroes?\n", "response": "SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable superhero , columns = [ superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\ngender.gender ( Male )\nList down at least five superpowers of male superheroes.\n", "response": "SELECT DISTINCT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' LIMIT 5;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Alien )\nrace.race ( Alien )\nGive the name of the alien superheroes.\n", "response": "SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = '-';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.height_cm ( integer | values : 188 , 203 ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nmatched contents :\nsuperhero.height_cm ( 170 )\nsuperhero.id ( 170 , 190 )\nAmong the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.\n", "response": "SELECT DISTINCT superhero.superhero_name FROM superhero WHERE superhero.height_cm BETWEEN 170 AND 190 AND superhero.eye_colour_id IS NULL;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nhero_power.power_id = superpower.id\nmatched contents :\nsuperpower.id ( 56 )\nhero_power.power_id ( 56 )\nhero_power.hero_id ( 56 )\nhero_attribute.hero_id ( 56 )\nrace.id ( 56 )\nWhat is the superpower of hero ID 56?\n", "response": "SELECT superpower.power_name FROM superpower INNER JOIN hero_power ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 56;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable race , columns = [ race.race ( text | values : - , Alien ) , race.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nrace.race ( Demi-God )\nList down at least five full name of Demi-God superheroes.\n", "response": "SELECT DISTINCT superhero.full_name FROM superhero WHERE superhero.superhero_name = 'Demi-God' LIMIT 5;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nsuperhero.race_id = race.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nHow many bad superheroes are there?\n", "response": "SELECT count(superhero.superhero_name) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.weight_kg ( 169 )\nsuperhero.id ( 169 )\nhero_attribute.hero_id ( 169 )\nhero_power.hero_id ( 169 )\nIdentify the race of the superhero who weighed 169 kg.\n", "response": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 169;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.height_cm ( integer | values : 188 , 203 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.race_id = race.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.gender_id = gender.id\nsuperhero.eye_colour_id = colour.id\nmatched contents :\nsuperhero.height_cm ( 185 )\nsuperhero.id ( 185 )\nrace.race ( Human )\nProvide the hair colour of the human superhero who is 185 cm tall.\n", "response": "SELECT superhero.hair_colour_id FROM superhero WHERE superhero.height_cm = 185;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable colour , columns = [ colour.colour ( text | values : No Colour , Amber ) , colour.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nWhat is the eye clolour of the heaviest superhero?\n", "response": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id ORDER BY weight_kg DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.height_cm ( integer | values : 188 , 203 ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.height_cm ( 180 )\nsuperhero.id ( 150 , 180 )\npublisher.publisher_name ( Marvel Comics )\nhero_power.hero_id ( 150 )\nhero_power.power_id ( 150 )\nhero_attribute.hero_id ( 150 , 180 )\nIn superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?\n", "response": "SELECT cast(sum(CASE WHEN superhero.height_cm BETWEEN 150 AND 180 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gender , columns = [ gender.gender ( text | values : Male , Female ) , gender.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable race , columns = [ race.race ( text | values : - , Alien ) , race.id ( integer | primary key | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nmatched contents :\ngender.gender ( Male )\nAmong the male superheroes, list the full names of superheroes with weight greater than the 79% average weight of all superheroes.\n", "response": "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'M' AND superhero.weight_kg > ( SELECT avg(weight_kg) FROM superhero WHERE gender.gender = 'M' ) * 79;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superpower , columns = [ superpower.power_name ( text | values : Agility , Accelerated Healing ) , superpower.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nattribute.attribute_name ( Power )\nWhich power do superheroes have the most of?\n", "response": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id GROUP BY superpower.power_name ORDER BY count(hero_attribute.hero_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Abomination )\nIndicate the attribute value of superhero Abomination.\n", "response": "SELECT hero_attribute.attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Abomination';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superpower , columns = [ superpower.power_name ( text | values : Agility , Accelerated Healing ) , superpower.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nhero_power.power_id ( 1 )\nhero_power.hero_id ( 1 )\nhero_attribute.hero_id ( 1 )\nhero_attribute.attribute_id ( 1 )\nattribute.id ( 1 )\nWhat are the superpowers of heroes with ID 1?\n", "response": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.id = 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superpower , columns = [ superpower.power_name ( text | values : Agility , Accelerated Healing ) , superpower.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperpower.power_name ( Stealth )\nattribute.attribute_name ( Power )\nHow many heroes have stealth power?\n", "response": "SELECT count(superhero.id) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Stealth';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.attribute_name ( text | values : Intelligence , Strength ) , attribute.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\nattribute.attribute_name ( Strength )\nWhat is the hero's full name with the highest attribute in strength?\n", "response": "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.race_id = race.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nWhat is the average of superheroes with no skin colour?\n", "response": "SELECT AVG(superhero.full_name) FROM superhero WHERE superhero.skin_colour_id IS NULL;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( Dark Horse Comics )\nHow many superheroes were published by Dark Horse Comics?\n", "response": "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Dark Horse Comics';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( Dark Horse Comics )\nattribute.attribute_name ( Durability )\nWhich superhero has the most durability published by Dark Horse Comics?\n", "response": "SELECT t.superhero_name FROM ( SELECT superhero.superhero_name, sum(hero_attribute.attribute_value) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id GROUP BY superhero.superhero_name ORDER BY sum(hero_attribute.attribute_value) DESC LIMIT 1 ) t;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.publisher_id = publisher.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.gender_id = gender.id\nsuperhero.eye_colour_id = colour.id\nmatched contents :\nsuperhero.full_name ( Abraham Sapien )\nWhat is the eyes colour of Abraham Sapien?\n", "response": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Abraham Sapien';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable superhero , columns = [ superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperpower.power_name ( Flight )\nattribute.attribute_name ( Power )\nList the name of superheroes with flight power.\n", "response": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.id ( integer | primary key | values : 1 , 2 ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable colour , columns = [ colour.colour ( text | values : No Colour , Amber ) , colour.id ( integer | primary key | values : 1 , 2 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.race_id = race.id\nsuperhero.publisher_id = publisher.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.gender_id = gender.id\nsuperhero.eye_colour_id = colour.id\nmatched contents :\npublisher.publisher_name ( Dark Horse Comics )\ngender.gender ( Female )\nList the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.\n", "response": "SELECT superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE race.race = 'Alien' AND gender.gender = 'Female';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.publisher_id = publisher.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.gender_id = gender.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nmatched contents : None\nWhich superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.\n", "response": "SELECT superhero.publisher_name FROM superhero WHERE superhero.eye_colour_id = 9 AND superhero.hair_colour_id = 1 AND superhero.skin_colour_id = 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nsuperhero.race_id = race.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( A-Bomb )\nWhich group does superhero A-Bomb belong to?\n", "response": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'A-Bomb';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.race_id = race.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.gender_id = gender.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nmatched contents :\ncolour.colour ( Blue )\ngender.gender ( Female )\nWhat is the percentage of blue female superheroes among all female superheroes?\n", "response": "SELECT ( SELECT count(*) FROM superhero WHERE gender.gender = 'Female' AND colour.colour = 'Blue' ) / ( SELECT count(*) FROM superhero WHERE gender.gender = 'Female' ) * 100;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.publisher_id = publisher.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nmatched contents :\nsuperhero.full_name ( Charles Chandler )\nProvide the hero name and race of Charles Chandler.\n", "response": "SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON race.id = superhero.race_id WHERE superhero.full_name = 'Charles Chandler';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable gender , columns = [ gender.gender ( text | values : Male , Female ) , gender.id ( integer | primary key | values : 1 , 2 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.id ( 13 )\nsuperhero.superhero_name ( Agent 13 )\nsuperhero.publisher_id ( 13 )\npublisher.id ( 13 )\nhero_power.hero_id ( 13 )\nhero_power.power_id ( 13 )\nhero_attribute.hero_id ( 13 )\nWhat is the gender of Agent 13 hero?\n", "response": "SELECT gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE superhero.id = 13;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.power_name ( text | values : Agility , Accelerated Healing ) , superpower.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperpower.power_name ( Adaptation )\nattribute.attribute_name ( Power )\nProvide superheroes' names who have the adaptation power.\n", "response": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Amazo )\nHow many powers does Amazo hero have?\n", "response": "SELECT count(superpower.power_name) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Amazo';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superpower , columns = [ superpower.power_name ( text | values : Agility , Accelerated Healing ) , superpower.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.full_name ( Hunter Zolomon )\nList the powers of Hunter Zolomon.\n", "response": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.height_cm ( integer | values : 188 , 203 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.gender_id = gender.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nmatched contents :\ncolour.colour ( Amber )\nProvide the heights of the heroes whose eye colours are amber.\n", "response": "SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\ncolour.colour ( Black )\nList the heroes' names whose eyes and hair colours are both black.\n", "response": "SELECT superhero_name FROM superhero WHERE eye_colour_id = 9 AND hair_colour_id = 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.gender_id = gender.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nmatched contents :\ncolour.colour ( Gold )\nProvide the eye colours of the heroes whose skin colours are gold.\n", "response": "SELECT DISTINCT superhero.eye_colour_id FROM superhero INNER JOIN hero_attribute ON hero_attribute.hero_id = superhero.id INNER JOIN attribute ON attribute.id = hero_attribute.attribute_id INNER JOIN colour ON colour.id = superhero.eye_colour_id WHERE colour.colour = 'Gold';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\nrace.race ( Vampire )\nProvide the full names of vampire heroes.\n", "response": "SELECT full_name FROM superhero WHERE race_id = 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable alignment , columns = [ alignment.alignment ( text | values : Good , Bad ) , alignment.id ( integer | primary key | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nalignment.alignment ( Neutral )\nDescribe the names of neutral alignment superheroes.\n", "response": "SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\nattribute.attribute_name ( Strength )\nHow many heroes have the highest attribute value in strength?\n", "response": "SELECT count(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.publisher_id = publisher.id\nsuperhero.gender_id = gender.id\nsuperhero.alignment_id = alignment.id\nmatched contents :\nsuperhero.superhero_name ( Cameron Hicks )\nWhat are the race and alignment of Cameron Hicks?\n", "response": "SELECT race.race, alignment.alignment FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE superhero.full_name = '<NAME>';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.publisher_id = publisher.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( Marvel Comics )\ngender.gender ( Female )\nHow many percent of female heroes were published by Marvel Comics?\n", "response": "SELECT count(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Alien )\nrace.race ( Alien )\nFind the average weight of the heroes who are aliens.\n", "response": "SELECT avg(superhero.weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.full_name ( Charles Chandler , Emil Blonsky )\nCalculate the difference between Emil Blonsky's weight and Charles Chandler's weight.\n", "response": "SELECT cast(superhero.weight_kg AS REAL) - cast(hero_attribute.attribute_value AS REAL) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.full_name = 'Emil Blonsky';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.height_cm ( integer | values : 188 , 203 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nCalculate the average height for each superhero.\n", "response": "SELECT avg(superhero.height_cm) FROM superhero;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superpower , columns = [ superpower.power_name ( text | values : Agility , Accelerated Healing ) , superpower.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Abomination )\nWhat is Abomination's superpower?\n", "response": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable race , columns = [ race.race ( text | values : - , Alien ) , race.id ( integer | primary key | values : 1 , 2 ) ]\ntable gender , columns = [ gender.gender ( text | values : Male , Female ) , gender.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\ngender.gender ( Male )\nAmong the superheroes with the race of god/eternal, how many of them are male\n", "response": "SELECT count(*) FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE race.race = 'god/eternal' AND gender.gender = 'Male';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.height_cm ( integer | values : 188 , 203 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nWhich hero was the fastest?\n", "response": "SELECT superhero.superhero_name FROM superhero INNER JOIN race ON race.id = superhero.race_id ORDER BY superhero.height_cm DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable alignment , columns = [ alignment.alignment ( text | values : Good , Bad ) , alignment.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nalignment.alignment ( Neutral )\nHow many superheroes have a neutral alignment?\n", "response": "SELECT count(alignment.alignment) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable attribute , columns = [ attribute.attribute_name ( text | values : Intelligence , Strength ) , attribute.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( 3-D Man )\nState all of 3-D Man's attributes along with their values.\n", "response": "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\ncolour.colour ( Blue , Brown )\nWhich superheroes have blue eyes with brown hair?\n", "response": "SELECT superhero.superhero_name FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Blue' AND superhero.eye_colour_id = colour.id;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Karate Kid , Hawkman , Speedy )\nWhat is the publisher for Hawkman, Karate Kid and Speedy?\n", "response": "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id WHERE superhero.superhero_name = 'Hawkman' OR superhero.superhero_name = 'Karate Kid' OR superhero.superhero_name = 'Speedy';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nHow many superheroes didn't have any publisher?\n", "response": "SELECT count(*) FROM superhero WHERE publisher_id IS NULL;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\ncolour.colour ( Blue )\nCalculate the percentage of superheroes with blue eyes.\n", "response": "SELECT cast(sum(iif(superhero.eye_colour_id = 9, 1, 0)) AS REAL) * 100 / count(superhero.id) FROM superhero;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gender , columns = [ gender.gender ( text | values : Male , Female ) , gender.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\ngender.gender ( Female , Male )\nFind the ratio between male superheroes and female superheroes.\n", "response": "SELECT cast(sum(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / sum(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.height_cm ( integer | values : 188 , 203 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nWho is the tallest superhero?\n", "response": "SELECT superhero.superhero_name FROM superhero ORDER BY superhero.height_cm DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\nforeign keys :\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nmatched contents :\nsuperpower.power_name ( Cryokinesis )\nattribute.attribute_name ( Power )\nWhat is the power ID of cryokinesis?\n", "response": "SELECT superpower.id FROM superpower WHERE superpower.power_name = 'Cryokinesis';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.id ( 294 )\nhero_power.hero_id ( 294 )\nhero_attribute.hero_id ( 294 )\nProvide the name of superhero with superhero ID 294.\n", "response": "SELECT superhero_name FROM superhero WHERE id = 294;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nList the full names of superheroes with missing weight.\n", "response": "SELECT superhero.full_name FROM superhero WHERE superhero.weight_kg IS NULL;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable colour , columns = [ colour.colour ( text | values : No Colour , Amber ) , colour.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.full_name ( Karen Beecher-Duncan )\nProvide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.\n", "response": "SELECT superhero.eye_colour_id FROM superhero WHERE superhero.full_name = 'Karen Beecher-Duncan';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.power_name ( text | values : Agility , Accelerated Healing ) , superpower.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.full_name ( Helen Parr )\nWhat is the superpowers of the superhero has Helen Parr as their full name?\n", "response": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Helen Parr';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.height_cm ( integer | values : 188 , 203 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nFind the race of the superhero who weighs 108kg and is 188cm tall.\n", "response": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.publisher_id = publisher.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nsuperhero.alignment_id = alignment.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.id ( 38 )\nsuperhero.race_id ( 38 )\nhero_power.hero_id ( 38 )\nhero_power.power_id ( 38 )\nWhat is the publisher name of the superhero ID 38?\n", "response": "SELECT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.id = '38';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nWhat is the race of the superhero with maximum attribute value?\n", "response": "SELECT race.race FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute_value = (SELECT max(attribute_value) FROM attribute);\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Atom IV , Atom )\nGive the alignment and superpowers of the superhero named Atom IV.\n", "response": "SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable colour , columns = [ colour.colour ( text | values : No Colour , Amber ) , colour.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\ncolour.colour ( Blue )\nList down at least five full names of superheroes with blue eyes.\n", "response": "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nCalculate the average attribute value of all neutral superheroes.\n", "response": "SELECT avg(hero_attribute.attribute_value) FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.gender_id = 1 AND superhero.alignment_id = 1 AND superhero.race_id = 1 AND superhero.publisher_id = 13;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.id ( 100 )\nhero_attribute.attribute_value ( 100 )\nhero_attribute.hero_id ( 100 )\nhero_power.hero_id ( 100 )\nhero_power.power_id ( 100 )\nList the skin colour of the superheroes with 100 attribute value.\n", "response": "SELECT superhero.skin_colour_id FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = 100;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\ngender.gender ( Female )\nCount the good female superheroes.\n", "response": "SELECT COUNT(superhero.superhero_name) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nhero_attribute.attribute_value ( 75 , 80 )\nhero_attribute.hero_id ( 75 , 80 )\nsuperhero.id ( 75 , 80 )\nsuperpower.id ( 75 , 80 )\nhero_power.hero_id ( 80 )\nhero_power.power_id ( 75 , 80 )\nProvide the names of superheroes with attribute value between 75 to 80.\n", "response": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable colour , columns = [ colour.colour ( text | values : No Colour , Amber ) , colour.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.race_id = race.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.gender_id = gender.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nmatched contents :\ngender.gender ( Male )\nGive the race of the blue-haired male superhero.\n", "response": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.gender_id = 2 AND superhero.hair_colour_id = 13;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\ngender.gender ( Female )\nAmong the bad superheroes, what is the percentage of female superheroes?\n", "response": "SELECT COUNT(CASE WHEN gender.gender = 'Female' THEN superhero.superhero_name ELSE NULL END) / COUNT(superhero.superhero_name) * 100 FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.hair_colour_id ( integer | values : 13 , 1 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nmatched contents :\nsuperhero.superhero_name ( Data )\ncolour.colour ( Blue )\nIn superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.\n", "response": "SELECT count(superhero.id) - count(superhero.eye_colour_id) FROM superhero WHERE superhero.eye_colour_id IS NULL;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.height_cm ( integer | values : 188 , 203 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Hulk )\nHow strong is the Hulk?\n", "response": "SELECT superhero.weight_kg FROM superhero WHERE superhero.superhero_name = 'Hulk';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Ajax )\nList down Ajax's superpowers.\n", "response": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Ajax';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.race_id = race.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.gender_id = gender.id\nsuperhero.eye_colour_id = colour.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nHow many green-skinned villains are there in the superhero universe?\n", "response": "SELECT count(superhero.id) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE colour.colour = 'Green';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.gender_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable gender , columns = [ gender.gender ( text | values : Male , Female ) , gender.id ( integer | primary key | values : 1 , 2 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.publisher_id = publisher.id\nsuperhero.gender_id = gender.id\nmatched contents :\ngender.gender ( Female )\npublisher.publisher_name ( Marvel Comics )\nHow many female superheroes are in Marvel Comics?\n", "response": "SELECT count(*) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable attribute , columns = [ attribute.attribute_name ( text | values : Intelligence , Strength ) , attribute.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nIdentify superheroes who can control wind and list their names in alphabetical order.\n", "response": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Phoenix )\nsuperpower.power_name ( Phoenix Force )\nIdentify the gender of the superhero who has the ability of Phoenix Force.\n", "response": "SELECT gender.gender FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Phoenix Force';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( DC Comics )\nIdentify the heaviest superhero in DC Comics.\n", "response": "SELECT superhero.full_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.height_cm ( integer | values : 188 , 203 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.publisher_id = publisher.id\nsuperhero.gender_id = gender.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( Dark Horse Comics )\nWhat is the average height of a non-human superhero in Dark Horse Comics?\n", "response": "SELECT avg(height_cm) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE superhero.publisher_id = 13 AND superhero.superhero_name = '3-D Man';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.race_id ( integer | values : 1 , 24 ) , superhero.height_cm ( integer | values : 188 , 203 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.race_id = race.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nCount the fastest superheroes.\n", "response": "SELECT count(superhero.superhero_name) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id ORDER BY superhero.superhero_name ASC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\npublisher.publisher_name ( Marvel Comics )\nWhich publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.\n", "response": "SELECT publisher.publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id GROUP BY publisher.publisher_name ORDER BY count(superhero.id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable attribute , columns = [ attribute.attribute_name ( text | values : Intelligence , Strength ) , attribute.id ( integer | primary key | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Black Panther )\nIdentify the weakest attribute of the Black Panther.\n", "response": "SELECT attribute.attribute_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Abomination )\nWhat is Abomination's eye colour?\n", "response": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.height_cm ( integer | values : 188 , 203 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nName the tallest superhero.\n", "response": "SELECT superhero.superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.full_name ( Charles Chandler )\nName the superhero, otherwise known as Charles Chandler.\n", "response": "SELECT superhero.superhero_name FROM superhero WHERE superhero.id = 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable publisher , columns = [ publisher.publisher_name ( text | values : ABC Studios ) , publisher.id ( integer | primary key | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nsuperhero.gender_id = gender.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\ngender.gender ( Female )\npublisher.publisher_name ( George Lucas )\nAmong all superheroes created by George Lucas, identify the percentage of female superheroes.\n", "response": "SELECT cast(count(CASE WHEN gender = 'F' THEN id ELSE NULL END) AS REAL) * 100 / count(id) FROM superhero WHERE publisher_name = 'George Lucas';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nAmong all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.\n", "response": "SELECT cast(sum(CASE WHEN superhero.alignment_id = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable publisher , columns = [ publisher.id ( integer | primary key | values : 1 , 2 ) , publisher.publisher_name ( text | values : ABC Studios ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\nforeign keys :\nsuperhero.publisher_id = publisher.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nWhat is the total number of superheroes that have John as their first name?\n", "response": "SELECT count(*) FROM superhero WHERE first_name = 'John';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents : None\nGive the hero ID of superhero with the lowest attribute value.\n", "response": "SELECT superhero.id FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id ORDER BY hero_attribute.attribute_value ASC LIMIT 1;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\nforeign keys :\nsuperhero.gender_id = gender.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Alien )\nProvide the full name of the superhero named Alien.\n", "response": "SELECT superhero.full_name FROM superhero WHERE superhero.superhero_name = 'Alien';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.skin_colour_id ( integer | values : 1 , 7 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable attribute , columns = [ attribute.attribute_name ( text | values : Intelligence , Strength ) , attribute.id ( integer | primary key | values : 1 , 2 ) ]\ntable hero_attribute , columns = [ hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nmatched contents :\nsuperhero.id ( 100 )\ncolour.colour ( Brown )\nhero_attribute.hero_id ( 100 )\nhero_attribute.attribute_value ( 100 )\nsuperpower.id ( 100 )\nIn superheroes with weight less than 100, list the full name of the superheroes with brown eyes.\n", "response": "SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Brown' AND superhero.weight_kg < 100;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Aquababy )\nList the attribute value of the superhero named Aquababy.\n", "response": "SELECT attribute_value FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Aquababy';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.weight_kg ( integer | values : 90 , 441 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\ntable race , columns = [ race.id ( integer | primary key | values : 1 , 2 ) , race.race ( text | values : - , Alien ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable gender , columns = [ gender.id ( integer | primary key | values : 1 , 2 ) , gender.gender ( text | values : Male , Female ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\nforeign keys :\nsuperhero.race_id = race.id\nsuperhero.gender_id = gender.id\nsuperhero.alignment_id = alignment.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.race_id ( 40 )\nsuperhero.id ( 40 )\nrace.id ( 40 )\nhero_power.hero_id ( 40 )\nhero_power.power_id ( 40 )\nProvide the weight and race of the superhero with superhero ID 40.\n", "response": "SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40;\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.height_cm ( integer | values : 188 , 203 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.gender_id ( integer | values : 1 , 2 ) ]\ntable alignment , columns = [ alignment.id ( integer | primary key | values : 1 , 2 ) , alignment.alignment ( text | values : Good , Bad ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\nforeign keys :\nsuperhero.alignment_id = alignment.id\nhero_attribute.hero_id = superhero.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nalignment.alignment ( Neutral )\nCalculate the average height of all neutral superheroes.\n", "response": "SELECT avg(superhero.height_cm) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable superhero , columns = [ superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.publisher_id ( integer | values : 13 , 3 ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nattribute.attribute_name ( Power )\nList the hero ID of superheroes have intellegence as their power.\n", "response": "SELECT superhero.id FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.eye_colour_id ( integer | values : 9 , 33 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.race_id ( integer | values : 1 , 24 ) ]\ntable colour , columns = [ colour.id ( integer | primary key | values : 1 , 2 ) , colour.colour ( text | values : No Colour , Amber ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) ]\ntable hero_power , columns = [ hero_power.hero_id ( integer | values : 1 , 2 ) , hero_power.power_id ( integer | values : 1 , 18 ) ]\nforeign keys :\nsuperhero.skin_colour_id = colour.id\nsuperhero.hair_colour_id = colour.id\nsuperhero.eye_colour_id = colour.id\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.hero_id = superhero.id\nmatched contents :\nsuperhero.superhero_name ( Blackwulf )\nGive the eye colour of Blackwulf.\n", "response": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf';\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable superhero , columns = [ superhero.height_cm ( integer | values : 188 , 203 ) , superhero.id ( integer | primary key | values : 1 , 2 ) , superhero.superhero_name ( text | values : 3-D Man , A-Bomb ) , superhero.alignment_id ( integer | values : 1 , 2 ) , superhero.gender_id ( integer | values : 1 , 2 ) , superhero.full_name ( text | values : Charles Chandler , Richard Milhouse Jones ) ]\ntable hero_power , columns = [ hero_power.power_id ( integer | values : 1 , 18 ) , hero_power.hero_id ( integer | values : 1 , 2 ) ]\ntable superpower , columns = [ superpower.id ( integer | primary key | values : 1 , 2 ) , superpower.power_name ( text | values : Agility , Accelerated Healing ) ]\ntable hero_attribute , columns = [ hero_attribute.hero_id ( integer | values : 1 , 2 ) , hero_attribute.attribute_value ( integer | values : 80 , 75 ) , hero_attribute.attribute_id ( integer | values : 1 , 2 ) ]\ntable attribute , columns = [ attribute.id ( integer | primary key | values : 1 , 2 ) , attribute.attribute_name ( text | values : Intelligence , Strength ) ]\nforeign keys :\nhero_attribute.hero_id = superhero.id\nhero_attribute.attribute_id = attribute.id\nhero_power.power_id = superpower.id\nhero_power.hero_id = superhero.id\nmatched contents :\nattribute.attribute_name ( Power )\nList the power of superheroes with height greater than 80% of the average height of all superheroes.\n", "response": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > ( SELECT avg(height_cm) * 0.8 FROM superhero );\t", "n_examples": 0, "db_id": "superhero"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.lap ( integer | values : 16 , 36 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.number ( integer | values : 22 , 3 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) ]\ntable status , columns = [ status.status ( text | values : Finished , Disqualified ) , status.statusid ( integer | primary key | values : 1 , 2 ) ]\ntable qualifying , columns = [ qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.q1 ( text | comment : qualifying 1 | values : 1:26.572 , 1:26.103 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.q3 ( text | comment : qualifying 3 | values : 1:26.714 , 1:26.869 ) , qualifying.q2 ( text | comment : qualifying 2 | values : 1:25.187 , 1:25.315 ) ]\nforeign keys :\npitstops.driverid = drivers.driverid\nqualifying.driverid = drivers.driverid\nresults.statusid = status.statusid\nresults.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nPlease list the reference names of the drivers who are eliminated in the first period in race number 18.\n", "response": "SELECT drivers.driverref FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 18 AND results.statusid = 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.number ( integer | values : 22 , 3 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.surname ( Driver )\ndrivers.driverref ( driver )\nWhat is the surname of the driver with the best lap time in race number 19 in the second period?\n", "response": "SELECT drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.round = 2 AND races.raceid = 19 ORDER BY laptimes.milliseconds DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.location ( Shanghai )\ncircuits.circuitref ( shanghai )\nPlease list the year during which the race is held on circuits in Shanghai.\n", "response": "SELECT year FROM races INNER JOIN circuits ON circuits.circuitid = races.circuitid WHERE circuits.location = 'Shanghai';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.url ( text ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.url ( text ) , seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents : None\nWhere can the introduction of the races held on Circuit de Barcelona-Catalunya be found?\n", "response": "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.country ( Germany )\nPlease give the name of the race held on the circuits in Germany.\n", "response": "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Germany';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) , constructors.nationality ( text | values : British , German ) ]\ntable circuits , columns = [ circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.name ( text ) , circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) ]\ntable constructorstandings , columns = [ constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.positiontext ( text | values : 1 , 3 ) , constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) ]\ntable results , columns = [ results.position ( integer | values : 1 , 2 ) , results.constructorid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.positiontext ( text | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) , results.number ( integer | values : 22 , 3 ) ]\ntable constructorresults , columns = [ constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.status ( text | values : D ) , constructorresults.raceid ( integer | values : 18 , 19 ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nconstructorstandings.constructorid = constructors.constructorid\nresults.constructorid = constructors.constructorid\nmatched contents :\nconstructors.name ( Renault )\nconstructors.constructorref ( renault )\nPlease list the positions of the circuits built by the constructor Renault.\n", "response": "SELECT constructorstandings.positiontext FROM constructorstandings INNER JOIN circuits ON circuits.circuitid = constructorstandings.constructorid WHERE constructors.name = 'Renault';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.year ( integer | values : 2009 , 2008 ) , races.url ( text ) , races.circuitid ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) ]\ntable seasons , columns = [ seasons.url ( text ) , seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) ]\ntable constructors , columns = [ constructors.url ( text ) , constructors.nationality ( text | values : British , German ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\npitstops.raceid = races.raceid\nmatched contents :\nraces.year ( 2010 )\nseasons.year ( 2010 )\nHow many races in the year 2010 are held on grand prixs outside Asia and Europe?\n", "response": "SELECT count(races.circuitid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid INNER JOIN seasons ON circuits.year = seasons.year WHERE seasons.year = 2010 AND circuits.country != 'Australia' AND circuits.country != 'Europe';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.country ( Spain )\nPlease give the names of the races held on the circuits in Spain.\n", "response": "SELECT DISTINCT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Spain';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.round ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.url ( text ) ]\ntable seasons , columns = [ seasons.url ( text ) , seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) ]\ntable pitstops , columns = [ pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.name ( Australian Grand Prix )\nWhat is the location coordinates of the circuits for Australian grand prix?\n", "response": "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Australian Grand Prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.name ( text ) , circuits.url ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.url ( text ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable seasons , columns = [ seasons.url ( text ) , seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.circuitref ( sepang )\nWhere can I find the information about the races held on Sepang International Circuit?\n", "response": "SELECT circuits.name, races.name, seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.circuitref = 'sepang';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) , results.laps ( integer | values : 58 , 57 ) , results.number ( integer | values : 22 , 3 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\ncircuits.circuitref ( sepang )\nPlease list the time of the races held on Sepang International Circuit.\n", "response": "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.circuitref = 'sepang';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.position ( integer | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) , results.laps ( integer | values : 58 , 57 ) , results.number ( integer | values : 22 , 3 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\ncircuits.location ( Abu Dhabi )\nraces.name ( Abu Dhabi Grand Prix )\nGive the coordinate position for Abu Dhabi Grand Prix.\n", "response": "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Abu Dhabi Grand Prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable constructors , columns = [ constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.name ( text | values : AFM , AGS ) , constructors.nationality ( text | values : British , German ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) ]\ntable constructorresults , columns = [ constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.status ( text | values : D ) ]\ntable results , columns = [ results.constructorid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.points ( real | values : 10.0 , 8.0 ) , results.number ( integer | values : 22 , 3 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable constructorstandings , columns = [ constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.wins ( integer | values : 1 , 0 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.url ( text ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nconstructorresults.raceid = races.raceid\nconstructorstandings.constructorid = constructors.constructorid\nconstructorstandings.raceid = races.raceid\nresults.constructorid = constructors.constructorid\nresults.raceid = races.raceid\nmatched contents :\nconstructors.constructorid ( 24 , 1 )\nconstructorresults.constructorid ( 24 , 1 )\nconstructorresults.raceid ( 24 , 1 )\nconstructorresults.constructorresultsid ( 24 , 1 )\nconstructorstandings.constructorid ( 24 , 1 )\nconstructorstandings.raceid ( 1 )\nconstructorstandings.constructorstandingsid ( 24 , 1 )\nconstructorstandings.position ( 1 )\nconstructorstandings.wins ( 1 )\nWhich country is the constructor which got 1 point in the race No. 24 from?\n", "response": "SELECT constructors.nationality FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructorresults.raceid = 24 AND constructorresults.points = 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable qualifying , columns = [ qualifying.q1 ( text | comment : qualifying 1 | values : 1:26.572 , 1:26.103 ) , qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.number ( integer | values : 22 , 4 ) , qualifying.constructorid ( integer | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nqualifying.raceid ( 354 )\nqualifying.qualifyid ( 354 )\ndrivers.driverid ( 354 )\ndrivers.driverref ( senna )\ndrivers.surname ( Senna )\ndrivers.forename ( Bruno )\nraces.raceid ( 354 )\ndriverstandings.driverid ( 354 )\ndriverstandings.raceid ( 354 )\nWhat's Bruno Senna's Q1 result in the qualifying race No. 354?\n", "response": "SELECT qualifying.q1 FROM qualifying INNER JOIN results ON qualifying.qualifyid = results.resultid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.raceid = 354 AND drivers.forename = 'Bruno' AND drivers.surname = 'Senna';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable qualifying , columns = [ qualifying.q2 ( text | comment : qualifying 2 | values : 1:25.187 , 1:25.315 ) , qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.number ( integer | values : 22 , 4 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.q1 ( text | comment : qualifying 1 | values : 1:26.572 , 1:26.103 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.nationality ( text | values : British , German ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.url ( text ) , races.year ( integer | values : 2009 , 2008 ) ]\ntable results , columns = [ results.time ( text | values : 1:34:50.616 , +5.478 ) , results.driverid ( integer | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) ]\nforeign keys :\nqualifying.constructorid = constructors.constructorid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nresults.constructorid = constructors.constructorid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nqualifying.qualifyid ( 355 )\nqualifying.raceid ( 355 )\ndrivers.driverid ( 355 )\ndrivers.driverref ( driver )\nFor the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?\n", "response": "SELECT drivers.nationality FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q2 = '0:01:40' AND qualifying.number = 355;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable qualifying , columns = [ qualifying.q3 ( text | comment : qualifying 3 | values : 1:26.714 , 1:26.869 ) , qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.number ( integer | values : 22 , 4 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.q1 ( text | comment : qualifying 1 | values : 1:26.572 , 1:26.103 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.nationality ( text | values : British , German ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\ntable results , columns = [ results.number ( integer | values : 22 , 3 ) , results.driverid ( integer | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nqualifying.driverid = drivers.driverid\nresults.driverid = drivers.driverid\nmatched contents :\nqualifying.qualifyid ( 903 )\nqualifying.raceid ( 903 )\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nlaptimes.raceid ( 903 )\npitstops.raceid ( 903 )\nresults.raceid ( 903 )\nWhat is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?\n", "response": "SELECT number FROM results WHERE driverid = (SELECT driverid FROM qualifying WHERE qualifyid = 903) AND time = '0:01:54';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.driverid ( integer | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.laps ( integer | values : 58 , 57 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\ntable status , columns = [ status.status ( text | values : Finished , Disqualified ) , status.statusid ( integer | primary key | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\nforeign keys :\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.statusid = status.statusid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Bahrain Grand Prix )\nraces.year ( 2007 )\nresults.resultid ( 2007 )\nstatus.status ( Finished )\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nFor the Bahrain Grand Prix in 2007, how many drivers not finished the game?\n", "response": "SELECT count(DISTINCT driverid) FROM results WHERE statusid = 11;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.url ( text ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.number ( integer | values : 22 , 3 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.constructorid ( integer | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.points ( real | values : 10.0 , 8.0 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\nlaptimes.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\nraces.raceid ( 901 )\nresults.raceid ( 901 )\nconstructorresults.raceid ( 901 )\nconstructorresults.constructorresultsid ( 901 )\nlaptimes.raceid ( 901 )\nShow me the season page of year when the race No. 901 took place.\n", "response": "SELECT * FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.driverid ( integer | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.number ( integer | values : 22 , 3 ) , results.laps ( integer | values : 58 , 57 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.url ( text ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) ]\nforeign keys :\nconstructorresults.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nFor the race happened on 2015/11/29, how many drivers finished the game?\n", "response": "SELECT count(driverid) FROM pitstops INNER JOIN results ON pitstops.driverid = results.driverid WHERE pitstops.raceid = 841 AND pitstops.lap = 16;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverid ( 592 )\ndrivers.surname ( Driver )\ndrivers.driverref ( driver )\nresults.raceid ( 592 )\nresults.driverid ( 592 )\nraces.raceid ( 592 )\ndriverstandings.driverid ( 592 )\ndriverstandings.raceid ( 592 )\nFor all the drivers who finished the game in race No. 592, who is the oldest?\n", "response": "SELECT drivers.forename FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 592 ORDER BY drivers.dob ASC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.url ( text ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) , drivers.number ( integer | values : 44 , 6 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.raceid ( integer | values : 18 , 19 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.driverid ( integer | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.resultid ( integer | primary key | values : 1 , 2 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.url ( text ) , races.circuitid ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverid ( 161 )\nlaptimes.raceid ( 161 )\ndriverstandings.driverid ( 161 )\ndriverstandings.raceid ( 161 )\ndriverstandings.driverstandingsid ( 161 )\nWho was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.\n", "response": "SELECT drivers.url FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.time = '0:01:27' AND laptimes.raceid = '161';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.nationality ( text | values : British , German ) , drivers.number ( integer | values : 44 , 6 ) , drivers.url ( text ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.fastestlapspeed ( text | values : 218.300 , 217.586 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.url ( text ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver , speed )\nresults.raceid ( 933 )\nlaptimes.raceid ( 933 )\nraces.raceid ( 933 )\npitstops.raceid ( 933 )\nFor the driver who set the fastest lap speed in race No.933, where does he come from?\n", "response": "SELECT drivers.driverref FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE laptimes.raceid = 933 ORDER BY laptimes.milliseconds DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.url ( text ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable seasons , columns = [ seasons.url ( text ) , seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.name ( Malaysian Grand Prix )\nWhere is Malaysian Grand Prix held? Give the location coordinates.\n", "response": "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Malaysian Grand Prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable constructors , columns = [ constructors.url ( text ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.name ( text | values : AFM , AGS ) , constructors.nationality ( text | values : British , German ) ]\ntable results , columns = [ results.constructorid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.points ( real | values : 10.0 , 8.0 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable constructorresults , columns = [ constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.status ( text | values : D ) ]\ntable constructorstandings , columns = [ constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.wins ( integer | values : 1 , 0 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.url ( text ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nconstructorresults.raceid = races.raceid\nconstructorstandings.constructorid = constructors.constructorid\nconstructorstandings.raceid = races.raceid\nresults.constructorid = constructors.constructorid\nresults.raceid = races.raceid\nmatched contents :\nconstructors.constructorid ( 9 )\nconstructorresults.constructorid ( 9 )\nconstructorresults.raceid ( 9 )\nconstructorresults.constructorresultsid ( 9 )\nconstructorstandings.constructorid ( 9 )\nconstructorstandings.raceid ( 9 )\nconstructorstandings.constructorstandingsid ( 9 )\nconstructorstandings.position ( 9 )\nFor the constructor which got the highest point in the race No. 9 , what is its introduction website?\n", "response": "SELECT constructors.url FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE results.raceid = 9 ORDER BY results.points DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable qualifying , columns = [ qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.q1 ( text | comment : qualifying 1 | values : 1:26.572 , 1:26.103 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.number ( integer | values : 22 , 4 ) , qualifying.q2 ( text | comment : qualifying 2 | values : 1:25.187 , 1:25.315 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nqualifying.raceid ( 345 )\nqualifying.qualifyid ( 345 )\ndrivers.driverid ( 345 )\ndrivers.driverref ( grassi , lucas )\ndrivers.forename ( Lucas )\ndrivers.surname ( di Grassi , Lucas )\nraces.raceid ( 345 )\ndriverstandings.driverid ( 345 )\ndriverstandings.raceid ( 345 )\nWhat's Lucas di Grassi's Q1 result in the race No. 345?\n", "response": "SELECT q1 FROM qualifying WHERE raceid = 345 AND number = 22;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.nationality ( text | values : British , German ) , drivers.url ( text ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) ]\ntable qualifying , columns = [ qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.q2 ( text | comment : qualifying 2 | values : 1:25.187 , 1:25.315 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.q1 ( text | comment : qualifying 1 | values : 1:26.572 , 1:26.103 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.number ( integer | values : 22 , 4 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.url ( text ) , races.year ( integer | values : 2009 , 2008 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.number ( integer | values : 22 , 3 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\nforeign keys :\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverid ( 347 )\ndrivers.driverref ( driver )\nqualifying.raceid ( 347 )\nqualifying.qualifyid ( 347 )\nraces.raceid ( 347 )\nFor the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?\n", "response": "SELECT drivers.forename FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.q2 = '0:01:15' AND qualifying.raceid = '347';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable qualifying , columns = [ qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.q3 ( text | comment : qualifying 3 | values : 1:26.714 , 1:26.869 ) , qualifying.number ( integer | values : 22 , 4 ) , qualifying.q2 ( text | comment : qualifying 2 | values : 1:25.187 , 1:25.315 ) , qualifying.q1 ( text | comment : qualifying 1 | values : 1:26.572 , 1:26.103 ) ]\ntable drivers , columns = [ drivers.code ( text | values : HAM , HEI ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.nationality ( text | values : British , German ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.number ( integer | values : 22 , 3 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverid ( 45 )\ndrivers.number ( 45 )\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nIn the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?\n", "response": "SELECT drivers.code FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid WHERE qualifying.number = 45 AND qualifying.q3 = '0:01:33';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverid ( 743 )\ndrivers.surname ( McLaren )\ndrivers.forename ( Bruce )\ndrivers.driverref ( mclaren )\nresults.driverid ( 743 )\nraces.raceid ( 743 )\nWhat is the actual finish time for Bruce McLaren in the race No.743?\n", "response": "SELECT time FROM laptimes WHERE driverid = 743 AND raceid = 743 ORDER BY lap DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.position ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) ]\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) , constructors.nationality ( text | values : British , German ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.constructorid = constructors.constructorid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( San Marino Grand Prix )\nraces.year ( 2006 )\nresults.resultid ( 2006 )\nWho finished second in the San Marino Grand Prix in 2006?\n", "response": "SELECT drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON races.raceid = results.raceid WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 AND results.position = 2;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.url ( text ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.number ( integer | values : 22 , 3 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.constructorid ( integer | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.points ( real | values : 10.0 , 8.0 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\nlaptimes.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\nraces.raceid ( 901 )\nresults.raceid ( 901 )\nconstructorresults.raceid ( 901 )\nconstructorresults.constructorresultsid ( 901 )\nlaptimes.raceid ( 901 )\nShow me the season page of year when the race No. 901 took place.\n", "response": "SELECT * FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.raceid = 901;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.driverid ( integer | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.number ( integer | values : 22 , 3 ) , results.laps ( integer | values : 58 , 57 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.url ( text ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) ]\nforeign keys :\nconstructorresults.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nFor the race happened in 2015/11/29, how many drivers finished the game?\n", "response": "SELECT count(driverid) FROM pitstops INNER JOIN results ON pitstops.raceid = results.raceid WHERE pitstops.raceid = 841 AND pitstops.lap = 16 AND pitstops.stop = 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.surname ( Driver )\ndrivers.driverref ( driver )\nresults.raceid ( 872 )\nraces.raceid ( 872 )\npitstops.raceid ( 872 )\ndriverstandings.raceid ( 872 )\nFor all the drivers who finished the game in race No. 872, who is the youngest?\n", "response": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.raceid = 872 ORDER BY drivers.dob DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlap ( integer | values : 39 , 41 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverid ( 348 )\ndrivers.surname ( Driver )\ndrivers.driverref ( driver )\nlaptimes.raceid ( 348 )\nraces.raceid ( 348 )\nWho was the driver that got the best lap time in the race No. 348? Give his full name.\n", "response": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.raceid = 348 ORDER BY laptimes.milliseconds DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.nationality ( text | values : British , German ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.fastestlapspeed ( text | values : 218.300 , 217.586 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nresults.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( driver , speed )\nFor the driver who set the fastest lap speed, what is his nationality?\n", "response": "SELECT drivers.nationality FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlapspeed IS NOT NULL ORDER BY results.fastestlapspeed DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlapspeed ( text | values : 218.300 , 217.586 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlap ( integer | values : 39 , 41 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nresults.raceid ( 853 )\ndrivers.driverref ( resta , speed )\ndrivers.forename ( Paul )\ndrivers.surname ( di Resta , Speed )\nlaptimes.raceid ( 853 )\nraces.raceid ( 853 )\ndriverstandings.raceid ( 853 )\nPaul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?\n", "response": "SELECT sum(results.fastestlapspeed) / sum(results.laps) FROM results WHERE results.raceid = 853;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.laps ( integer | values : 58 , 57 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.number ( integer | values : 44 , 6 ) , drivers.url ( text ) , drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\nFor the drivers who took part in the race in 1983/7/16, what's their race completion rate?\n", "response": "SELECT AVG(results.milliseconds) FROM results INNER JOIN pitstops ON results.raceid = pitstops.raceid WHERE pitstops.raceid = 841 AND pitstops.stop = 1 AND pitstops.lap = 16 AND pitstops.time BETWEEN '1983-07-16 06:00:00' AND '1983-07-16 09:00:00';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.circuitid ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.name ( Singapore Grand Prix )\ncircuits.country ( Singapore )\nWhich year was the first Singapore Grand Prix?\n", "response": "SELECT seasons.year FROM seasons INNER JOIN races ON seasons.year = races.year WHERE races.name = 'Singapore Grand Prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.status ( text | values : D ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\nforeign keys :\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.year ( 2005 )\nseasons.year ( 2005 )\nconstructorresults.constructorresultsid ( 2005 )\nHow many races were there in 2005? Name all the races in descending order.\n", "response": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.constructorid ( integer | values : 1 , 2 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.status ( text | values : D ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) ]\ntable status , columns = [ status.statusid ( integer | primary key | values : 1 , 2 ) , status.status ( text | values : Finished , Disqualified ) ]\nforeign keys :\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\nresults.statusid = status.statusid\nresults.raceid = races.raceid\nmatched contents : None\nName the first race recorded. What are the other races that happened within the same month and year of that race.\n", "response": "SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year = 2009 AND races.date = '2009-03-29';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.raceid ( integer | primary key | values : 837 , 833 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.status ( text | values : D ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.year ( 1999 )\nseasons.year ( 1999 )\nconstructorresults.constructorresultsid ( 1999 )\nState the name and date of the last round of race in year 1999.\n", "response": "SELECT name, date FROM races WHERE year = 1999 ORDER BY date DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.year ( integer | values : 2009 , 2008 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\nforeign keys :\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents : None\nWhich year has the most number of races?\n", "response": "SELECT year FROM races GROUP BY year ORDER BY count(raceid) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) , races.url ( text ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.url ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.year ( 2017 , 2000 )\nseasons.year ( 2017 , 2000 )\nName the races in year 2017 that are not hosted in year 2000.\n", "response": "SELECT races.name FROM races INNER JOIN seasons ON races.year = seasons.year WHERE seasons.year <> 2000;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) ]\ntable circuits , columns = [ circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.name ( European Grand Prix )\nIn which country was the first European Grand Prix hosted? Name the circuit and location.\n", "response": "SELECT circuits.name, circuits.location FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'European Grand Prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.url ( text ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.name ( Brands Hatch )\nraces.name ( British Grand Prix )\nWhen was the last f1 season whereby Brands Hatch hosted the British Grand Prix?\n", "response": "SELECT seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Brands Hatch' AND races.name = 'British Grand Prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.url ( text ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.url ( text ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable drivers , columns = [ drivers.nationality ( text | values : British , German ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.url ( text ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.number ( integer | values : 44 , 6 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nmatched contents :\ncircuits.name ( Silverstone Circuit )\ncircuits.circuitref ( silverstone )\ncircuits.location ( Silverstone )\nHow many seasons has Silverstone Circuit hosted the United Kindom grand prix?\n", "response": "SELECT count(seasons.year) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'United Kindom grand prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.circuitid ( integer | values : 1 , 2 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.positionorder ( integer | values : 1 , 2 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.positiontext ( text | values : 1 , 2 ) , results.position ( integer | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) , drivers.number ( integer | values : 44 , 6 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.positiontext ( text | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Singapore Grand Prix )\nraces.year ( 2010 )\nresults.resultid ( 2010 )\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\ncircuits.country ( Singapore )\nName all drivers in the 2010 Singapore Grand Prix order by their position stands.\n", "response": "SELECT drivers.driverref, driverstandings.position FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE driverstandings.raceid = 837 AND driverstandings.position = 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) ]\ntable results , columns = [ results.points ( real | values : 10.0 , 8.0 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.raceid ( integer | values : 18 , 19 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable constructorresults , columns = [ constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.status ( text | values : D ) ]\ntable constructorstandings , columns = [ constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.wins ( integer | values : 1 , 0 ) , constructorstandings.position ( integer | values : 1 , 3 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nresults.driverid = drivers.driverid\nmatched contents :\ndrivers.surname ( Driver )\ndrivers.driverref ( driver )\nState the driver with the most points scored. Find his full name with that points.\n", "response": "SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid ORDER BY results.points DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.points ( real | values : 10.0 , 8.0 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Chinese Grand Prix )\nraces.year ( 2017 )\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nresults.resultid ( 2017 )\ncircuits.circuitid ( 3 )\nName the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.\n", "response": "SELECT drivers.forename, results.points FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON races.raceid = results.raceid WHERE races.name = 'Chinese Grand Prix' AND races.year = 2017 ORDER BY results.points DESC LIMIT 3;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nWhat is the best lap time recorded? List the driver and race with such recorded lap time.\n", "response": "SELECT laptimes.driverid, races.name FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid ORDER BY laptimes.milliseconds DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Chinese Grand Prix )\nraces.year ( 2009 )\ndrivers.driverref ( vettel )\ndrivers.forename ( Sebastian )\ndrivers.surname ( Vettel )\nresults.resultid ( 2009 )\nWhat is the average lap time for Sebastian Vettel in the 2009 Chinese Grand Prix?\n", "response": "SELECT avg(laptimes.time) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.name = 'Chinese Grand Prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.url ( text ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.url ( text ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( hamilton )\nraces.year ( 2010 )\nseasons.year ( 2010 )\nCalculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.\n", "response": "SELECT cast(count(pitstops.driverid) AS REAL) * 100 / count(drivers.driverid) FROM drivers INNER JOIN circuits ON drivers.driverref = circuits.circuitref INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year INNER JOIN pitstops ON races.raceid = pitstops.raceid WHERE drivers.driverref = 'hamilton' AND circuits.circuitref = 'f1' AND seasons.year = 2010 AND pitstops.stop = 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.nationality ( text | values : British , German ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.number ( integer | values : 44 , 6 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.constructorid ( integer | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) ]\ntable constructorresults , columns = [ constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.status ( text | values : D ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\ndriverstandings.driverid = drivers.driverid\nresults.constructorid = constructors.constructorid\nresults.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nName the driver with the most winning. Mention his nationality and what is his average point scores.\n", "response": "SELECT drivers.driverref, drivers.nationality, avg(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid GROUP BY drivers.driverref, drivers.nationality ORDER BY avg(results.points) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.nationality ( text | values : British , German ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.url ( text ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.nationality ( Japanese )\ndrivers.surname ( Driver )\ndrivers.driverref ( driver )\nconstructors.nationality ( Japanese )\nHow old is the youngest Japanese driver? What is his name?\n", "response": "SELECT drivers.dob FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY drivers.dob DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.circuitid ( 4 )\nraces.year ( 1990 , 2000 )\nseasons.year ( 1990 , 2000 )\nList circuits which host 4 f1 races from year 1990 to 2000.\n", "response": "SELECT circuits.circuitid FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.year BETWEEN 1990 AND 2000;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.name ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.year ( 2006 )\ncircuits.country ( USA )\nseasons.year ( 2006 )\nList circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.\n", "response": "SELECT circuits.name, races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = 2006;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.name ( text ) , circuits.url ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.url ( text ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.url ( text ) , seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.year ( 2005 )\nseasons.year ( 2005 )\nName the races along with its circuit name and location for f1 races hosted in September 2005.\n", "response": "SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON circuits.circuitid = races.circuitid WHERE races.year = 2005 AND circuits.circuitref = 'f1' AND races.date = '2005-09-09';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.statusid ( integer | values : 1 , 11 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.surname ( Yoong )\ndrivers.forename ( Alex )\ndrivers.driverref ( yoong )\ncircuits.circuitid ( 10 )\nWhich race was Alex Yoong in when he was in track number less than 10?\n", "response": "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Alex' AND results.number < 10;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.statusid ( integer | values : 1 , 11 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ncircuits.circuitref ( sepang )\ndrivers.forename ( Michael )\ndrivers.surname ( Schumacher )\nHow many times did Michael Schumacher won from races hosted in Sepang International Circuit?\n", "response": "SELECT count(results.driverid) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' AND races.circuitid = 23;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.round ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.year = seasons.year\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.forename ( Michael )\ndrivers.surname ( Schumacher )\nState the race and year of race in which Michael Schumacher had his fastest lap.\n", "response": "SELECT races.name, seasons.year FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN seasons ON races.year = seasons.year WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY laptimes.milliseconds DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) ]\ntable races , columns = [ races.year ( integer | values : 2009 , 2008 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.year = seasons.year\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nresults.resultid ( 2000 )\ndrivers.forename ( Eddie )\ndrivers.surname ( Irvine )\ndrivers.driverref ( irvine )\nraces.year ( 2000 )\nseasons.year ( 2000 )\nWhat is Eddie Irvine's average points scored in year 2000?\n", "response": "SELECT avg(results.points) FROM results INNER JOIN seasons ON results.raceid = seasons.year WHERE seasons.year = 2000;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.points ( real | values : 10.0 , 8.0 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable driverstandings , columns = [ driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable constructorresults , columns = [ constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.status ( text | values : D ) ]\nforeign keys :\nconstructorresults.raceid = races.raceid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.forename ( Lewis )\ndrivers.driverref ( hamilton , lewis )\ndrivers.surname ( Hamilton , Lewis )\nWhich was Lewis Hamilton first race? What was his points recorded for his first race event?\n", "response": "SELECT races.name, results.points FROM results INNER JOIN races ON results.raceid = races.raceid WHERE results.driverid = '452' AND races.date = '2009-03-29';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) ]\ntable races , columns = [ races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.circuitid ( integer | values : 1 , 2 ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.points ( real | values : 10.0 , 8.0 ) , results.laps ( integer | values : 58 , 57 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\nraces.year ( 2017 )\nseasons.year ( 2017 )\nresults.resultid ( 2017 )\nconstructorresults.constructorresultsid ( 2017 )\nList all races in 2017 and the hosting country order by date of the event.\n", "response": "SELECT * FROM races WHERE year = 2017 ORDER BY date;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.alt ( integer ) ]\ntable laptimes , columns = [ laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents : None\nWhat is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.\n", "response": "SELECT races.name, races.year, circuits.location FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN circuits ON circuits.circuitid = races.circuitid GROUP BY races.name, races.year, circuits.location ORDER BY count(laptimes.lap) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.round ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.url ( text ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.country ( Germany )\nraces.name ( European Grand Prix )\nAmong all European Grand Prix races, what is the percentage of the races were hosted in Germany?\n", "response": "SELECT circuits.country, count(*) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Germany' GROUP BY circuits.country ORDER BY count(*) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) , circuits.name ( text ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.alt ( integer ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) ]\ntable pitstops , columns = [ pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) ]\ntable races , columns = [ races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.url ( text ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) ]\ntable constructorstandings , columns = [ constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.wins ( integer | values : 1 , 0 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.positiontext ( text | values : 1 , 3 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nconstructorstandings.raceid = races.raceid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.location ( Silverstone )\ncircuits.name ( Silverstone Circuit )\ncircuits.circuitref ( silverstone )\nWhat's the location coordinates of Silverstone Circuit?\n", "response": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) , circuits.name ( text ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) ]\ntable pitstops , columns = [ pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) ]\ntable races , columns = [ races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\ntable constructorstandings , columns = [ constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.wins ( integer | values : 1 , 0 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.positiontext ( text | values : 1 , 3 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nconstructorstandings.raceid = races.raceid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.name ( Silverstone Circuit , Hockenheimring , Hungaroring )\ncircuits.location ( Silverstone )\ncircuits.circuitref ( hockenheimring , silverstone , hungaroring )\nWhich of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?\n", "response": "SELECT circuits.location FROM circuits WHERE circuits.location IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY circuits.lat DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) , circuits.url ( text ) ]\ntable races , columns = [ races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.url ( text ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.url ( text ) , constructors.nationality ( text | values : British , German ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) ]\ntable pitstops , columns = [ pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.name ( Marina Bay Street Circuit )\ncircuits.location ( Marina Bay )\nWhat's the reference name of Marina Bay Street Circuit?\n", "response": "SELECT circuits.circuitref FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.alt ( integer ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.name ( text ) , circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) ]\ntable seasons , columns = [ seasons.url ( text ) , seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) ]\ntable pitstops , columns = [ pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) ]\ntable races , columns = [ races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.url ( text ) , races.year ( integer | values : 2009 , 2008 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.round ( integer | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents : None\nIn which country can I find the circuit with the highest altitude?\n", "response": "SELECT circuits.country FROM circuits ORDER BY circuits.alt DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.code ( text | values : HAM , HEI ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.nationality ( text | values : British , German ) ]\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.nationality ( text | values : British , German ) , constructors.url ( text ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nHow many drivers don't have a code?\n", "response": "SELECT count(*) FROM drivers WHERE code = '';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.nationality ( text | values : British , German ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) ]\ntable races , columns = [ races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.circuitid ( integer | values : 1 , 2 ) , races.url ( text ) , races.round ( integer | values : 1 , 2 ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.url ( text ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\nWhich country is the oldest driver from?\n", "response": "SELECT drivers.nationality FROM drivers WHERE drivers.nationality IS NOT NULL ORDER BY drivers.dob LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.nationality ( text | values : British , German ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.url ( text ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.surname ( Driver )\ndrivers.nationality ( Italian )\ndrivers.driverref ( driver )\nconstructors.nationality ( Italian )\nPlease list the surnames of all the Italian drivers.\n", "response": "SELECT drivers.surname FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'Italian';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.url ( text ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.nationality ( text | values : British , German ) ]\ntable constructors , columns = [ constructors.url ( text ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.nationality ( text | values : British , German ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) ]\ntable seasons , columns = [ seasons.url ( text ) , seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.surname ( Davidson )\ndrivers.driverref ( davidson )\ndrivers.forename ( Anthony )\nWhich website should I go to if I want to know more about Anthony Davidson?\n", "response": "SELECT drivers.url FROM drivers WHERE drivers.forename = 'Anthony' AND drivers.surname = 'Davidson';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.code ( text | values : HAM , HEI ) , drivers.number ( integer | values : 44 , 6 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.url ( text ) , constructors.nationality ( text | values : British , German ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( hamilton , lewis )\ndrivers.surname ( Hamilton , Lewis )\ndrivers.forename ( Lewis )\nWhat's Lewis Hamilton's reference name?\n", "response": "SELECT driverref FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.raceid ( integer | primary key | values : 837 , 833 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.name ( Spanish Grand Prix )\nraces.year ( 2009 )\nseasons.year ( 2009 )\nWhich circuit did the 2009 Spanish Grand Prix use?\n", "response": "SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.name = 'Spanish Grand Prix' AND races.year = '2009';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.alt ( integer ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.name ( Silverstone Circuit )\ncircuits.circuitref ( silverstone )\ncircuits.location ( Silverstone )\nPlease list all the years that Silverstone Circuit was used in a Formula_1 race.\n", "response": "SELECT DISTINCT seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.name = 'Silverstone Circuit';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) , races.url ( text ) , races.year ( integer | values : 2009 , 2008 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.name ( Silverstone Circuit )\ncircuits.circuitref ( silverstone )\ncircuits.location ( Silverstone )\nPlease give more information about the Formula_1 races that used the Silverstone Circuit.\n", "response": "SELECT circuits.name, races.name, seasons.year FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid INNER JOIN seasons ON races.year = seasons.year WHERE circuits.circuitref = 'silverstone';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.laps ( integer | values : 58 , 57 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.status ( text | values : D ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nconstructorresults.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\ncircuits.location ( Abu Dhabi )\nraces.year ( 2010 )\nresults.resultid ( 2010 )\nconstructorresults.constructorresultsid ( 2010 )\nWhat time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?\n", "response": "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Abu Dhabi' AND races.year = 2010 AND races.time = '06:00:00';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.url ( text ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.number ( integer | values : 22 , 3 ) , results.points ( real | values : 10.0 , 8.0 ) , results.constructorid ( integer | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\ncircuits.country ( Italy )\nHow many Formula_1 races took place on the circuits in Italy?\n", "response": "SELECT count(races.circuitid) FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.country = 'Italy';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) , results.number ( integer | values : 22 , 3 ) , results.laps ( integer | values : 58 , 57 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nconstructorresults.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents : None\nPlease list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.\n", "response": "SELECT DISTINCT races.date FROM races INNER JOIN circuits ON circuits.circuitid = races.circuitid WHERE circuits.circuitref = 'sepang';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.url ( text ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.url ( text ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.url ( text ) , seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.year ( 2009 )\nraces.name ( Spanish Grand Prix )\nseasons.year ( 2009 )\nPlease give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.\n", "response": "SELECT circuits.url FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE races.year = 2009 AND circuits.name = 'Spanish Grand Prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.driverid ( integer | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nresults.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\ndrivers.surname ( Hamilton , Lewis )\nWhat's the fastest lap time ever in a race for Lewis Hamilton?\n", "response": "SELECT fastestlaptime FROM laptimes INNER JOIN results ON laptimes.raceid = results.raceid WHERE laptimes.driverid = ( SELECT driverid FROM drivers WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ) ORDER BY laptimes.milliseconds DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.number ( integer | values : 44 , 6 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.fastestlapspeed ( text | values : 218.300 , 217.586 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.surname ( Driver , Speed )\ndrivers.driverref ( driver , speed )\nWhich driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.\n", "response": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE results.fastestlapspeed = (SELECT max(results.fastestlapspeed) FROM results);\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) , drivers.forename ( text | values : Lewis , Nick ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.position ( integer | values : 1 , 2 ) , results.rank ( integer | values : 2 , 3 ) , results.positionorder ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.positiontext ( text | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\nraces.name ( Australian Grand Prix )\nraces.year ( 2008 )\nresults.resultid ( 2008 )\nWhich driver ranked the first in the Australian Grand Prix in 2008? Please give his reference name.\n", "response": "SELECT drivers.driverref FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid WHERE driverstandings.raceid = 18 AND driverstandings.position = 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable qualifying , columns = [ qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.number ( integer | values : 22 , 4 ) , qualifying.position ( integer | values : 1 , 2 ) , qualifying.constructorid ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\ndrivers.surname ( Hamilton , Lewis )\nPlease list the Formula_1 races that Lewis Hamilton participated.\n", "response": "SELECT races.name FROM races INNER JOIN results ON races.raceid = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.rank ( integer | values : 2 , 3 ) , results.position ( integer | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.positiontext ( text | values : 1 , 2 ) ]\ntable constructorstandings , columns = [ constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.wins ( integer | values : 1 , 0 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.positiontext ( text | values : 1 , 3 ) ]\nforeign keys :\nconstructorstandings.raceid = races.raceid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\ndrivers.surname ( Hamilton , Lewis )\nIn which Formula_1 race did Lewis Hamilton rank the highest?\n", "response": "SELECT constructorstandings.raceid FROM constructorstandings INNER JOIN driverstandings ON constructorstandings.constructorstandingsid = driverstandings.constructorstandingsid WHERE driverstandings.wins = 1 ORDER BY constructorstandings.points DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.fastestlapspeed ( text | values : 218.300 , 217.586 ) , results.laps ( integer | values : 58 , 57 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.url ( text ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Spanish Grand Prix )\nraces.year ( 2009 )\nresults.resultid ( 2009 )\ndrivers.driverref ( speed , driver )\ndrivers.surname ( Speed , Driver )\nWhat was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?\n", "response": "SELECT fastestlapspeed FROM results WHERE raceid = 18 ORDER BY fastestlapspeed DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.statusid ( integer | values : 1 , 11 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\nraces.year = seasons.year\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\ndrivers.surname ( Hamilton , Lewis )\nIn which years did Lewis Hamilton participate in a Formula_1 race?\n", "response": "SELECT seasons.year FROM seasons INNER JOIN results ON seasons.year = results.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.rank ( integer | values : 2 , 3 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.position ( integer | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.positiontext ( text | values : 1 , 2 ) ]\ntable qualifying , columns = [ qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.position ( integer | values : 1 , 2 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.number ( integer | values : 22 , 4 ) , qualifying.constructorid ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Australian Grand Prix )\nraces.year ( 2008 )\nresults.resultid ( 2008 )\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\nqualifying.qualifyid ( 2008 )\nWhat was Lewis Hamilton's final rank in the 2008 Australian Grand Prix?\n", "response": "SELECT rank FROM results WHERE driverid = 452 AND raceid = 18;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.grid ( integer | values : 1 , 5 ) , results.number ( integer | values : 22 , 3 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.position ( integer | values : 1 , 2 ) ]\ntable qualifying , columns = [ qualifying.number ( integer | values : 22 , 4 ) , qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.position ( integer | values : 1 , 2 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.constructorid ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.surname ( Driver )\ndrivers.driverref ( driver )\nraces.name ( Australian Grand Prix )\nraces.year ( 2008 )\nresults.resultid ( 2008 )\nqualifying.qualifyid ( 2008 )\nWhich driver was in the no. 4 grid formation when starting the race in 2008's Australian Grand Prix? Please give his forename and surname.\n", "response": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON results.driverid = drivers.driverid INNER JOIN races ON races.raceid = results.raceid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 AND results.grid = 4;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.driverid ( integer | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.laps ( integer | values : 58 , 57 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.url ( text ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) ]\nforeign keys :\nconstructorresults.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Australian Grand Prix )\nraces.year ( 2008 )\nresults.resultid ( 2008 )\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nconstructorresults.constructorresultsid ( 2008 )\nHow many drivers managed to finish the race in the 2008 Australian Grand Prix?\n", "response": "SELECT count(driverid) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN results ON pitstops.raceid = results.raceid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.laps ( integer | values : 58 , 57 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Australian Grand Prix )\nraces.year ( 2008 )\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\ndrivers.surname ( Hamilton , Lewis )\nresults.resultid ( 2008 )\nWhich was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?\n", "response": "SELECT results.fastestlap FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.raceid = 837;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.position ( integer | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.rank ( integer | values : 2 , 3 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.driverid ( integer | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\ntable driverstandings , columns = [ driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.positiontext ( text | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) ]\nforeign keys :\ndriverstandings.raceid = races.raceid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Australian Grand Prix )\nraces.year ( 2008 )\nresults.resultid ( 2008 )\nWhat's the finish time for the driver who ranked second in 2008's Australian Grand Prix?\n", "response": "SELECT results.time FROM results INNER JOIN driverstandings ON results.driverid = driverstandings.driverid WHERE driverstandings.position = 2 ORDER BY results.time DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.url ( text ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.url ( text ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.constructorid ( integer | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) ]\ntable driverstandings , columns = [ driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.url ( text ) , seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) ]\nforeign keys :\nraces.year = seasons.year\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Australian Grand Prix )\nraces.year ( 2008 )\nresults.resultid ( 2008 )\nseasons.year ( 2008 )\nWho was the champion of 2008's Australian Grand Prix and where can I know more about him?\n", "response": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ORDER BY results.points DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.nationality ( text | values : British , German ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.url ( text ) , drivers.code ( text | values : HAM , HEI ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.circuitid ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.nationality ( Australian )\ndrivers.driverref ( driver )\nraces.name ( Australian Grand Prix )\nraces.year ( 2008 )\nresults.resultid ( 2008 )\ncircuits.country ( USA )\nseasons.year ( 2008 )\nHow many drivers from the USA participated in the 2008 Australian Grand Prix?\n", "response": "SELECT count(results.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON races.raceid = results.raceid INNER JOIN circuits ON circuits.circuitid = races.circuitid WHERE circuits.country = 'USA' AND races.year = 2008;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) , drivers.nationality ( text | values : British , German ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.statusid ( integer | values : 1 , 11 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\nraces.year = seasons.year\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Australian Grand Prix )\nraces.year ( 2008 )\ndrivers.driverref ( driver )\ndrivers.nationality ( Australian )\nresults.resultid ( 2008 )\nseasons.year ( 2008 )\nAmong the drivers that finished the race in the 2008 Australian Grand Prix, how many of them have participated in Formula_1 races?\n", "response": "SELECT count(results.driverid) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Formula 1' AND results.statusid = 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.circuitid ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable driverstandings , columns = [ driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable constructorresults , columns = [ constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.status ( text | values : D ) ]\nforeign keys :\nconstructorresults.raceid = races.raceid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\ndrivers.surname ( Hamilton , Lewis )\nHow many points did Lewis Hamilton get in total in all the Formula_1 races he participated?\n", "response": "SELECT sum(results.points) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.laps ( integer | values : 58 , 57 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\ndrivers.surname ( Hamilton , Lewis )\nWhat is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?\n", "response": "SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.laps ( integer | values : 58 , 57 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.driverid ( integer | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.url ( text ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Australian Grand Prix )\nraces.year ( 2008 )\nresults.resultid ( 2008 )\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nWhat is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?\n", "response": "SELECT cast(count(drivers.driverid) AS REAL) / count(races.raceid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.year = 2008;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.driverid ( integer | values : 1 , 2 ) , results.position ( integer | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.positionorder ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.positiontext ( text | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.url ( text ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Australian Grand Prix )\nraces.year ( 2008 )\nresults.resultid ( 2008 )\ndrivers.driverref ( driver )\nHow much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?\n", "response": "SELECT ROUND((results.fastestlaptime / results.milliseconds) * 100, 2) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE races.name = 'Australian Grand Prix' AND races.year = 2008 ORDER BY results.fastestlaptime DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable pitstops , columns = [ pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) ]\ntable laptimes , columns = [ laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.country ( Australia )\nHow many circuits are there in Melbourne, Australia?\n", "response": "SELECT count(circuitid) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.alt ( integer ) , circuits.name ( text ) ]\ntable pitstops , columns = [ pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) ]\ntable races , columns = [ races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.round ( integer | values : 1 , 2 ) , races.url ( text ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\ntable constructorstandings , columns = [ constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.wins ( integer | values : 1 , 0 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.positiontext ( text | values : 1 , 3 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nconstructorstandings.raceid = races.raceid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents : None\nPlease list the location coordinates of the US circuits.\n", "response": "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'United States';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.nationality ( text | values : British , German ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.url ( text ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.nationality ( British )\ndrivers.driverref ( driver )\nconstructors.nationality ( British )\nHow many British drivers were born after 1980?\n", "response": "SELECT count(driverid) FROM drivers WHERE dob > '1980-01-01' AND nationality = 'British';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) ]\ntable constructorstandings , columns = [ constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.wins ( integer | values : 1 , 0 ) ]\ntable constructorresults , columns = [ constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.status ( text | values : D ) ]\ntable results , columns = [ results.points ( real | values : 10.0 , 8.0 ) , results.constructorid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.alt ( integer ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nconstructorstandings.constructorid = constructors.constructorid\nresults.constructorid = constructors.constructorid\nmatched contents :\nconstructors.nationality ( British )\nWhat are the average points of British constructors?\n", "response": "SELECT avg(constructorresults.points) FROM constructorresults INNER JOIN constructors ON constructorresults.constructorid = constructors.constructorid WHERE constructors.nationality = 'British';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) , constructors.nationality ( text | values : British , German ) ]\ntable constructorstandings , columns = [ constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.wins ( integer | values : 1 , 0 ) ]\ntable constructorresults , columns = [ constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.status ( text | values : D ) ]\ntable results , columns = [ results.points ( real | values : 10.0 , 8.0 ) , results.constructorid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) ]\ntable driverstandings , columns = [ driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nconstructorstandings.constructorid = constructors.constructorid\nresults.constructorid = constructors.constructorid\nmatched contents : None\nWhich constructor has the highest point?\n", "response": "SELECT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid ORDER BY constructorstandings.points DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) , constructors.nationality ( text | values : British , German ) ]\ntable constructorresults , columns = [ constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.status ( text | values : D ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.constructorid ( integer | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable constructorstandings , columns = [ constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.wins ( integer | values : 1 , 0 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nconstructorresults.raceid = races.raceid\nconstructorstandings.constructorid = constructors.constructorid\nconstructorstandings.raceid = races.raceid\nresults.constructorid = constructors.constructorid\nresults.raceid = races.raceid\nmatched contents :\nconstructorresults.raceid ( 291 )\nconstructorresults.constructorresultsid ( 291 )\nresults.number ( 0 )\nconstructorstandings.raceid ( 291 )\nconstructorstandings.wins ( 0 )\nraces.raceid ( 291 )\nPlease list the constructor names with 0 points at race 291.\n", "response": "SELECT constructors.name FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN results ON constructorresults.raceid = results.raceid WHERE results.points = 0;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) ]\ntable constructorresults , columns = [ constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.status ( text | values : D ) ]\ntable results , columns = [ results.constructorid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) , results.raceid ( integer | values : 18 , 19 ) , results.statusid ( integer | values : 1 , 11 ) , results.number ( integer | values : 22 , 3 ) ]\ntable constructorstandings , columns = [ constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.wins ( integer | values : 1 , 0 ) , constructorstandings.position ( integer | values : 1 , 3 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.url ( text ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nconstructorresults.raceid = races.raceid\nconstructorstandings.constructorid = constructors.constructorid\nconstructorstandings.raceid = races.raceid\nresults.constructorid = constructors.constructorid\nresults.raceid = races.raceid\nmatched contents :\nconstructors.nationality ( Japanese )\nconstructors.constructorid ( 2 )\nconstructorresults.constructorid ( 2 )\nconstructorresults.constructorresultsid ( 2 )\nconstructorresults.raceid ( 2 )\nresults.number ( 0 )\nconstructorstandings.constructorid ( 2 )\nconstructorstandings.constructorstandingsid ( 2 )\nconstructorstandings.raceid ( 2 )\nconstructorstandings.wins ( 0 )\nconstructorstandings.position ( 2 )\nHow many Japanese constructors have 0 points in 2 races?\n", "response": "SELECT count(*) FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN races ON races.raceid = constructorresults.raceid WHERE constructors.nationality = 'Japanese' AND constructorresults.points = 0 AND races.year = 2009;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.nationality ( text | values : British , German ) , constructors.url ( text ) ]\ntable results , columns = [ results.constructorid ( integer | values : 1 , 2 ) , results.rank ( integer | values : 2 , 3 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.positionorder ( integer | values : 1 , 2 ) , results.position ( integer | values : 1 , 2 ) , results.positiontext ( text | values : 1 , 2 ) ]\ntable constructorresults , columns = [ constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.raceid ( integer | values : 18 , 19 ) ]\ntable constructorstandings , columns = [ constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.positiontext ( text | values : 1 , 3 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) ]\ntable driverstandings , columns = [ driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.positiontext ( text | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.driverid ( integer | values : 1 , 2 ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nconstructorstandings.constructorid = constructors.constructorid\nresults.constructorid = constructors.constructorid\nmatched contents :\nconstructors.constructorid ( 1 )\nconstructorresults.constructorid ( 1 )\nconstructorresults.constructorresultsid ( 1 )\nconstructorresults.raceid ( 1 )\nconstructorstandings.constructorid ( 1 )\nconstructorstandings.position ( 1 )\nconstructorstandings.constructorstandingsid ( 1 )\nconstructorstandings.positiontext ( 1 )\nconstructorstandings.raceid ( 1 )\nWhich constructors have been ranked 1?\n", "response": "SELECT DISTINCT constructors.name FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE results.rank = 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.constructorid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.driverid ( integer | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) ]\ntable constructorresults , columns = [ constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) ]\ntable laptimes , columns = [ laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nresults.constructorid = constructors.constructorid\nmatched contents :\nconstructors.nationality ( French )\nconstructors.constructorid ( 50 )\nconstructorresults.constructorid ( 50 )\nconstructorresults.constructorresultsid ( 50 )\nconstructorresults.raceid ( 50 )\ncircuits.circuitid ( 50 )\nHow many French constructors have a lap number of over 50?\n", "response": "SELECT count(constructors.constructorid) FROM constructors INNER JOIN results ON constructors.constructorid = results.constructorid WHERE constructors.nationality = 'French' AND results.laps > 50;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.nationality ( text | values : British , German ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.number ( integer | values : 44 , 6 ) , drivers.url ( text ) ]\ntable races , columns = [ races.year ( integer | values : 2009 , 2008 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.year = seasons.year\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.nationality ( Japanese )\ndrivers.driverref ( driver )\nraces.year ( 2007 , 2009 )\nresults.resultid ( 2007 , 2009 )\nseasons.year ( 2007 , 2009 )\nPlease calculate the race completion percentage of Japanese drivers from 2007 to 2009.\n", "response": "SELECT cast(sum(CASE WHEN drivers.nationality = 'Japanese' THEN 1 ELSE 0 END) * 100 / count(*) AS REAL) FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid INNER JOIN races ON pitstops.raceid = races.raceid WHERE races.year BETWEEN 2007 AND 2009;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable results , columns = [ results.time ( text | values : 1:34:50.616 , +5.478 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) , results.driverid ( integer | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.raceid ( integer | values : 18 , 19 ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable driverstandings , columns = [ driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.positiontext ( text | values : 1 , 2 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) ]\ntable races , columns = [ races.time ( text | values : 06:00:00 , 09:00:00 ) , races.year ( integer | values : 2009 , 2008 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents : None\nWhat is the average time in seconds of champion for each year?\n", "response": "SELECT cast(avg(results.milliseconds) AS REAL) / count(races.year) FROM results INNER JOIN races ON results.raceid = races.raceid GROUP BY races.year;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.rank ( integer | values : 2 , 3 ) , results.positionorder ( integer | values : 1 , 2 ) , results.position ( integer | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.positiontext ( text | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) ]\ntable status , columns = [ status.status ( text | values : Finished , Disqualified ) , status.statusid ( integer | primary key | values : 1 , 2 ) ]\ntable constructorresults , columns = [ constructorresults.status ( text | values : D ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nresults.statusid = status.statusid\nresults.driverid = drivers.driverid\nmatched contents :\ndrivers.surname ( Driver )\ndrivers.driverref ( driver )\nresults.resultid ( 1975 )\nconstructorresults.constructorresultsid ( 1975 , 2 )\nconstructorresults.raceid ( 2 )\nconstructorresults.constructorid ( 2 )\nWhich drivers born after 1975 have been ranked 2? Please give their forenames and surnames.\n", "response": "SELECT DISTINCT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE drivers.dob > 1975 AND results.rank = 2;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.nationality ( text | values : British , German ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) ]\ntable status , columns = [ status.statusid ( integer | primary key | values : 1 , 2 ) , status.status ( text | values : Finished , Disqualified ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable constructorresults , columns = [ constructorresults.status ( text | values : D ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.url ( text ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) , races.circuitid ( integer | values : 1 , 2 ) ]\nforeign keys :\nconstructorresults.raceid = races.raceid\nresults.statusid = status.statusid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.nationality ( Italian )\ndrivers.driverref ( driver )\nstatus.status ( Finished )\nHow many Italian drivers haven't finished the race?\n", "response": "SELECT count(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Finished' AND drivers.nationality = 'Italian';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.driverid ( integer | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlapspeed ( text | values : 218.300 , 217.586 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nresults.driverid = drivers.driverid\nmatched contents :\ndrivers.surname ( Driver )\ndrivers.driverref ( driver )\nWhich driver has the fastest lap time? Please give their forenames and surnames.\n", "response": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid ORDER BY laptimes.milliseconds DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.number ( integer | values : 22 , 3 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) ]\ntable driverstandings , columns = [ driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nresults.resultid ( 2009 )\nraces.year ( 2009 )\nWhat is the fastest lap number of the champion in 2009?\n", "response": "SELECT fastestlap FROM results WHERE raceid = 837 ORDER BY fastestlap DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlapspeed ( text | values : 218.300 , 217.586 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Spanish Grand Prix )\nraces.year ( 2009 )\nresults.resultid ( 2009 )\nWhat is the average of fastest lap speed in the 2009 Spanish Grand Prix race?\n", "response": "SELECT AVG(results.fastestlapspeed) FROM results INNER JOIN races ON results.raceid = races.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.time ( text | values : 1:34:50.616 , +5.478 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable pitstops , columns = [ pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents : None\nWhich race has the shortest actual finishing time? Please give the name and year.\n", "response": "SELECT name, year FROM races ORDER BY time DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.number ( integer | values : 22 , 3 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverid ( 50 )\ndrivers.driverref ( driver )\nraces.year ( 2000 , 2005 , 1985 )\nresults.resultid ( 2000 , 2005 , 1985 )\nFrom 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?\n", "response": "SELECT percent FROM results WHERE year BETWEEN 2000 AND 2005 AND laps > 50;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.nationality ( text | values : British , German ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable races , columns = [ races.time ( text | values : 06:00:00 , 09:00:00 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.url ( text ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.laps ( integer | values : 58 , 57 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.milliseconds ( integer | values : 5690616 , 5696094 ) , results.resultid ( integer | primary key | values : 1 , 2 ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.nationality ( French )\ndrivers.driverref ( driver )\nHow many French drivers who obtain the laptime less than 02:00.00?\n", "response": "SELECT count(drivers.driverid) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE laptimes.time < '02:00:00';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.code ( text | values : HAM , HEI ) , drivers.nationality ( text | values : British , German ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.url ( text ) , drivers.number ( integer | values : 44 , 6 ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.url ( text ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( driver )\ncircuits.circuitref ( americas )\nList out the code for drivers who have nationality in America.\n", "response": "SELECT drivers.code FROM drivers WHERE drivers.nationality = 'British';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.year ( integer | values : 2009 , 2008 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) ]\nforeign keys :\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\nraces.year ( 2009 )\nseasons.year ( 2009 )\nconstructorresults.constructorresultsid ( 2009 )\nList out the Id number of races which were hold in 2009.\n", "response": "SELECT races.raceid FROM races WHERE races.year = 2009;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.url ( text ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.status ( text | values : D ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nHow many driver participated in race ID number 18?\n", "response": "SELECT count(results.driverid) FROM results WHERE results.raceid = 18;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.nationality ( text | values : British , German ) , drivers.code ( text | values : HAM , HEI ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( driver )\nconstructors.constructorid ( 3 )\nState code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?\n", "response": "SELECT count(nationality) FROM drivers WHERE nationality = 'Netherland' ORDER BY count(nationality) DESC LIMIT 3;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) ]\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.nationality ( text | values : British , German ) , constructors.url ( text ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( kubica )\ndrivers.surname ( Kubica )\ndrivers.forename ( Robert )\nWhat is reference name of Robert Kubica?\n", "response": "SELECT driverref FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.nationality ( text | values : British , German ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) , circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.url ( text ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.nationality ( Australian )\ndrivers.driverref ( driver )\nconstructors.nationality ( Australian )\nHow many Australian drivers who were born in 1980?\n", "response": "SELECT count(driverid) FROM drivers WHERE dob BETWEEN '1980-01-01' AND '1989-12-31' AND nationality = 'Australian';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.nationality ( text | values : British , German ) , drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\nresults.driverid = drivers.driverid\nmatched contents :\ndrivers.nationality ( German )\ndrivers.driverref ( driver )\ncircuits.circuitid ( 3 )\nList out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.\n", "response": "SELECT drivers.driverref, drivers.nationality, min(laptimes.milliseconds) FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY drivers.driverref, drivers.nationality ORDER BY min(laptimes.milliseconds) LIMIT 3;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.nationality ( text | values : British , German ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.nationality ( German )\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nconstructors.nationality ( German )\nPlease state the reference name of the oldest German driver.\n", "response": "SELECT drivers.driverref FROM drivers WHERE drivers.nationality = 'German' ORDER BY drivers.dob LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.code ( text | values : HAM , HEI ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.raceid ( integer | values : 18 , 19 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.resultid ( integer | primary key | values : 1 , 2 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nresults.resultid ( 1971 )\nraces.year ( 1971 )\nWhich drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.\n", "response": "SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON races.raceid = results.raceid WHERE races.year = 1971 AND results.fastestlaptime = '1:27.452';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.nationality ( text | values : British , German ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) ]\ntable laptimes , columns = [ laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.driverid ( integer | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) ]\ntable races , columns = [ races.time ( text | values : 06:00:00 , 09:00:00 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.url ( text ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.url ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.nationality ( Spanish )\ndrivers.driverref ( driver )\nresults.resultid ( 1982 )\nraces.year ( 1982 )\ncircuits.circuitid ( 10 )\nList out top 10 Spanish drivers who were born before 1982 and have the latest lap time.\n", "response": "SELECT drivers.driverref, laptimes.time FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.dob < 1982 ORDER BY laptimes.milliseconds DESC LIMIT 10;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\nforeign keys :\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents : None\nState the racing year which has the fastest lap time?\n", "response": "SELECT seasons.year FROM seasons INNER JOIN results ON seasons.year = results.raceid WHERE results.fastestlaptime IS NOT NULL ORDER BY results.fastestlaptime ASC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.fastestlapspeed ( text | values : 218.300 , 217.586 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.fastestlap ( integer | values : 39 , 41 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\nforeign keys :\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents : None\nWhich year has the lowest speed of lap time?\n", "response": "SELECT seasons.year FROM seasons INNER JOIN laptimes ON seasons.year = laptimes.raceid ORDER BY laptimes.milliseconds ASC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.laps ( integer | values : 58 , 57 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.raceid ( integer | values : 18 , 19 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.url ( text ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\nresults.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nList the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.\n", "response": "SELECT driverid FROM drivers ORDER BY fastestlaptime DESC LIMIT 5;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.statusid ( integer | values : 1 , 11 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.driverid ( integer | values : 1 , 2 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable status , columns = [ status.statusid ( integer | primary key | values : 1 , 2 ) , status.status ( text | values : Finished , Disqualified ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.status ( text | values : D ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) ]\ntable qualifying , columns = [ qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.number ( integer | values : 22 , 4 ) , qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.constructorid ( integer | values : 1 , 2 ) , qualifying.q3 ( text | comment : qualifying 3 | values : 1:26.714 , 1:26.869 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\nforeign keys :\nconstructorresults.raceid = races.raceid\nqualifying.raceid = races.raceid\nresults.statusid = status.statusid\nresults.raceid = races.raceid\nmatched contents :\nstatus.status ( Disqualified )\nconstructorresults.raceid ( 100 , 50 )\nconstructorresults.constructorresultsid ( 100 , 50 )\nconstructorresults.constructorid ( 100 , 50 )\nFrom race no. 50 to 100, how many finishers have been disqualified?\n", "response": "SELECT count(DISTINCT results.driverid) FROM results INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Disqualified' AND results.raceid BETWEEN 50 AND 100;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.country ( Austria )\nHow many times the circuits were held in Austria? Please give their location and coordinates.\n", "response": "SELECT circuits.location, circuits.lat, circuits.lng FROM circuits WHERE circuits.country = 'Austria';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.number ( integer | values : 22 , 3 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.driverid ( integer | values : 1 , 2 ) , results.constructorid ( integer | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.status ( text | values : D ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable qualifying , columns = [ qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.number ( integer | values : 22 , 4 ) , qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.constructorid ( integer | values : 1 , 2 ) , qualifying.position ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\nqualifying.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents : None\nWhat race number has the most finishers?\n", "response": "SELECT number FROM results GROUP BY number ORDER BY count(number) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.nationality ( text | values : British , German ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) ]\ntable qualifying , columns = [ qualifying.q2 ( text | comment : qualifying 2 | values : 1:25.187 , 1:25.315 ) , qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.number ( integer | values : 22 , 4 ) , qualifying.q1 ( text | comment : qualifying 1 | values : 1:26.572 , 1:26.103 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.url ( text ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.url ( text ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nqualifying.constructorid = constructors.constructorid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\nconstructors.constructorid ( 23 )\nList the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.\n", "response": "SELECT drivers.driverref, drivers.nationality, drivers.dob FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.raceid = 23 AND qualifying.q2 = '1:25.187';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable races , columns = [ races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) ]\ntable qualifying , columns = [ qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.q1 ( text | comment : qualifying 1 | values : 1:26.572 , 1:26.103 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.q2 ( text | comment : qualifying 2 | values : 1:25.187 , 1:25.315 ) , qualifying.q3 ( text | comment : qualifying 3 | values : 1:26.714 , 1:26.869 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\nforeign keys :\nraces.year = seasons.year\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nOn what year did the youngest driver had his first qualifying race? State the name, date and time of the race.\n", "response": "SELECT races.name, races.date, races.time FROM races INNER JOIN qualifying ON races.raceid = qualifying.raceid INNER JOIN drivers ON qualifying.driverid = drivers.driverid ORDER BY drivers.dob DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.nationality ( text | values : British , German ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) ]\ntable status , columns = [ status.statusid ( integer | primary key | values : 1 , 2 ) , status.status ( text | values : Finished , Disqualified ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable qualifying , columns = [ qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.number ( integer | values : 22 , 4 ) , qualifying.constructorid ( integer | values : 1 , 2 ) , qualifying.position ( integer | values : 1 , 2 ) ]\ntable constructorresults , columns = [ constructorresults.status ( text | values : D ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) ]\nforeign keys :\nqualifying.driverid = drivers.driverid\nresults.statusid = status.statusid\nresults.driverid = drivers.driverid\nmatched contents :\ndrivers.nationality ( American )\ndrivers.driverref ( driver )\nstatus.status ( Disqualified )\nHow many American drivers have been disqualified from the race.\n", "response": "SELECT count(results.driverid) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE results.statusid = 'Disqualified' AND drivers.nationality = 'American';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.url ( text ) , constructors.nationality ( text | values : British , German ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable constructorresults , columns = [ constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.status ( text | values : D ) , constructorresults.raceid ( integer | values : 18 , 19 ) ]\ntable constructorstandings , columns = [ constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.wins ( integer | values : 1 , 0 ) , constructorstandings.position ( integer | values : 1 , 3 ) ]\ntable results , columns = [ results.points ( real | values : 10.0 , 8.0 ) , results.constructorid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.nationality ( text | values : British , German ) , drivers.url ( text ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nconstructorstandings.constructorid = constructors.constructorid\nresults.constructorid = constructors.constructorid\nresults.driverid = drivers.driverid\nmatched contents :\nconstructors.nationality ( Italian )\ndrivers.nationality ( Italian )\nWhich of the Italian constructor got the highest point to date? Give its introduction website?\n", "response": "SELECT constructors.name, constructors.url FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid WHERE constructors.nationality = 'Italian' ORDER BY constructorresults.points DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable constructors , columns = [ constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.url ( text ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.nationality ( text | values : British , German ) ]\ntable constructorresults , columns = [ constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.status ( text | values : D ) ]\ntable results , columns = [ results.constructorid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) , results.raceid ( integer | values : 18 , 19 ) , results.statusid ( integer | values : 1 , 11 ) , results.number ( integer | values : 22 , 3 ) ]\ntable constructorstandings , columns = [ constructorstandings.wins ( integer | values : 1 , 0 ) , constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.position ( integer | values : 1 , 3 ) ]\ntable driverstandings , columns = [ driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nconstructorstandings.constructorid = constructors.constructorid\nresults.constructorid = constructors.constructorid\nmatched contents : None\nWhat is the website of the constructor who tallied the most total wins.\n", "response": "SELECT constructors.url FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.url ORDER BY sum(constructorstandings.wins) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) , drivers.number ( integer | values : 44 , 6 ) , drivers.url ( text ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( French Grand Prix )\ndrivers.driverref ( driver )\nAmong the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.\n", "response": "SELECT drivers.driverref FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid INNER JOIN results ON laptimes.raceid = results.raceid WHERE races.name = 'French Grand Prix' AND results.laps = 3 ORDER BY laptimes.milliseconds ASC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laptimes , columns = [ laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.circuitid ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.milliseconds ( integer | values : 5690616 , 5696094 ) , results.raceid ( integer | values : 18 , 19 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.laps ( integer | values : 58 , 57 ) , results.resultid ( integer | primary key | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.url ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents : None\nIn which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.\n", "response": "SELECT laptimes.milliseconds FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid WHERE laptimes.position = 1 AND laptimes.lap = 1 ORDER BY laptimes.milliseconds DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.circuitid ( integer | values : 1 , 2 ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( United States Grand Prix )\nraces.year ( 2006 )\nresults.resultid ( 2006 )\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\ncircuits.circuitid ( 10 )\nWhat is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?\n", "response": "SELECT avg(laptimes.time) FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE races.name = 'United States Grand Prix' AND races.year = 2006 ORDER BY avg(laptimes.time) DESC LIMIT 10;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.nationality ( text | values : British , German ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.url ( text ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.nationality ( German )\ndrivers.driverref ( driver )\ncircuits.circuitid ( 5 )\nconstructors.nationality ( German )\nconstructors.constructorid ( 5 )\nList down top 5 German drivers who has the shortest average pit stop duration and were born between 1980-1985.\n", "response": "SELECT drivers.driverref, drivers.forename, pitstops.duration FROM drivers INNER JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' ORDER BY pitstops.duration ASC LIMIT 5;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.round ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.driverid ( integer | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.number ( integer | values : 44 , 6 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable driverstandings , columns = [ driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Canadian Grand Prix )\nraces.year ( 2008 )\nresults.resultid ( 2008 )\nWho is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.\n", "response": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON races.raceid = results.raceid WHERE races.name = 'Canadian Grand Prix' AND races.year = 2008 ORDER BY results.time DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.url ( text ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable constructors , columns = [ constructors.url ( text ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.name ( text | values : AFM , AGS ) , constructors.nationality ( text | values : British , German ) ]\ntable driverstandings , columns = [ driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.constructorid ( integer | values : 1 , 2 ) , results.driverid ( integer | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.points ( real | values : 10.0 , 8.0 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.status ( text | values : D ) ]\nforeign keys :\nconstructorresults.constructorid = constructors.constructorid\nconstructorresults.raceid = races.raceid\ndriverstandings.raceid = races.raceid\nresults.constructorid = constructors.constructorid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Singapore Grand Prix )\nraces.year ( 2009 )\nresults.resultid ( 2009 )\nconstructorresults.constructorresultsid ( 2009 )\nWhat is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.\n", "response": "SELECT constructors.constructorref FROM constructors INNER JOIN driverstandings ON constructors.constructorid = driverstandings.driverid WHERE driverstandings.raceid = 18 AND driverstandings.wins = 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.nationality ( text | values : British , German ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) , circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.url ( text ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.nationality ( Austrian )\ndrivers.surname ( Driver )\ndrivers.driverref ( driver )\nconstructors.nationality ( Austrian )\nWhat is the full name and date of birth of Austrian drivers born between 1981 and 1991?\n", "response": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND drivers.dob BETWEEN '1981-01-01' AND '1991-12-31';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.nationality ( text | values : British , German ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.url ( text ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.name ( text ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) , circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.nationality ( German )\ndrivers.surname ( Driver )\ndrivers.driverref ( driver )\nconstructors.nationality ( German )\nFind the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.\n", "response": "SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY drivers.dob DESC;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.name ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.url ( text ) ]\ntable pitstops , columns = [ pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) ]\ntable constructorstandings , columns = [ constructorstandings.wins ( integer | values : 1 , 0 ) , constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.constructorid ( integer | values : 1 , 2 ) , constructorstandings.positiontext ( text | values : 1 , 3 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nconstructorstandings.raceid = races.raceid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents :\ncircuits.name ( Hungaroring )\nIn which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?\n", "response": "SELECT circuits.location, circuits.country, circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Hungaroring';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable constructors , columns = [ constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.name ( text | values : AFM , AGS ) , constructors.nationality ( text | values : British , German ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.url ( text ) ]\ntable constructorresults , columns = [ constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.status ( text | values : D ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.constructorid ( integer | values : 1 , 2 ) , results.points ( real | values : 10.0 , 8.0 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) , results.number ( integer | values : 22 , 3 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nconstructorresults.constructorid = constructors.constructorid\nconstructorresults.raceid = races.raceid\nresults.constructorid = constructors.constructorid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Monaco Grand Prix )\nraces.year ( 1980 , 2010 )\nconstructorresults.constructorresultsid ( 1980 , 2010 )\nresults.resultid ( 1980 , 2010 )\ncircuits.circuitref ( monaco )\ncircuits.country ( Monaco )\nWhich constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.\n", "response": "SELECT constructors.name, constructors.nationality, constructorresults.points FROM constructors INNER JOIN constructorresults ON constructors.constructorid = constructorresults.constructorid INNER JOIN races ON races.raceid = constructorresults.raceid WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 ORDER BY constructorresults.points DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.url ( text ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.url ( text ) , drivers.code ( text | values : HAM , HEI ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.points ( real | values : 10.0 , 8.0 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Turkish Grand Prix )\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\nWhat is the average score of Lewis Hamilton among all the Turkish Grand Prix?\n", "response": "SELECT avg(results.points) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND races.name = 'Turkish Grand Prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.year ( integer | values : 2009 , 2008 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.statusid ( integer | values : 1 , 11 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.points ( real | values : 10.0 , 8.0 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.status ( text | values : D ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) ]\nforeign keys :\nraces.year = seasons.year\nconstructorresults.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\nconstructorresults.raceid ( 10 )\nconstructorresults.constructorresultsid ( 10 )\nconstructorresults.constructorid ( 10 )\nWhat is the annual average number of races held during the first 10 years of the 21st century?\n", "response": "SELECT avg(races.year) FROM races WHERE strftime('%Y', races.date) BETWEEN '2000' AND '2017';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.nationality ( text | values : British , German ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.forename ( text | values : Lewis , Nick ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.url ( text ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( driver )\nWhich citizenship do the vast majority of the drivers hold?\n", "response": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable results , columns = [ results.points ( real | values : 10.0 , 8.0 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.position ( integer | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.url ( text ) ]\ntable constructorresults , columns = [ constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.status ( text | values : D ) ]\ntable constructorstandings , columns = [ constructorstandings.points ( real | values : 14.0 , 8.0 ) , constructorstandings.wins ( integer | values : 1 , 0 ) , constructorstandings.constructorstandingsid ( integer | primary key | values : 1 , 2 ) , constructorstandings.raceid ( integer | values : 18 , 19 ) , constructorstandings.position ( integer | values : 1 , 3 ) , constructorstandings.constructorid ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nresults.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nIn terms of number of points acquired, how many victories did the driver who ranked 91st acquired?\n", "response": "SELECT count(results.points) FROM results WHERE results.position = 91;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.fastestlapspeed ( text | values : 218.300 , 217.586 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.resultid ( integer | primary key | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.url ( text ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( speed )\ndrivers.surname ( Speed )\nIn terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?\n", "response": "SELECT races.name FROM races INNER JOIN laptimes ON races.raceid = laptimes.raceid INNER JOIN results ON laptimes.raceid = results.raceid ORDER BY results.fastestlapspeed DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) , circuits.url ( text ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.url ( text ) , races.raceid ( integer | primary key | values : 837 , 833 ) ]\ntable seasons , columns = [ seasons.url ( text ) , seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nmatched contents : None\nWhich racetrack hosted the most recent race? Indicate the full location.\n", "response": "SELECT circuits.location FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid ORDER BY races.date DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) ]\ntable qualifying , columns = [ qualifying.driverid ( integer | values : 1 , 9 ) , qualifying.q3 ( text | comment : qualifying 3 | values : 1:26.714 , 1:26.869 ) , qualifying.qualifyid ( integer | primary key | values : 1 , 2 ) , qualifying.raceid ( integer | values : 18 , 19 ) , qualifying.position ( integer | values : 1 , 2 ) , qualifying.q2 ( text | comment : qualifying 2 | values : 1:25.187 , 1:25.315 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.rank ( integer | values : 2 , 3 ) , results.position ( integer | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nqualifying.driverid = drivers.driverid\nqualifying.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nqualifying.qualifyid ( 2008 )\ncircuits.name ( Marina Bay Street Circuit )\ncircuits.location ( Marina Bay )\nraces.year ( 2008 )\nresults.resultid ( 2008 )\nWhat is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?\n", "response": "SELECT drivers.forename || ' ' || drivers.surname FROM drivers INNER JOIN qualifying ON drivers.driverid = qualifying.driverid INNER JOIN races ON qualifying.raceid = races.raceid WHERE races.circuitid = 23 AND races.round = 3 AND races.year = 2008 AND qualifying.rank = 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.nationality ( text | values : British , German ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.url ( text ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable constructors , columns = [ constructors.nationality ( text | values : British , German ) , constructors.name ( text | values : AFM , AGS ) , constructors.url ( text ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nmatched contents : None\nAs of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.\n", "response": "SELECT drivers.forename , drivers.surname , drivers.nationality , races.name FROM drivers INNER JOIN races ON drivers.driverid = races.raceid ORDER BY drivers.dob LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable results , columns = [ results.raceid ( integer | values : 18 , 19 ) , results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) , results.statusid ( integer | values : 1 , 11 ) , results.constructorid ( integer | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Canadian Grand Prix )\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nHow many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?\n", "response": "SELECT count(results.resultid) FROM results INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.number = ( SELECT max(drivers.number) FROM drivers );\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.dob ( date | comment : date of birth | values : 1985-01-07 , 1977-05-10 ) , drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.statusid ( integer | values : 1 , 11 ) , results.constructorid ( integer | values : 1 , 2 ) , results.number ( integer | values : 22 , 3 ) ]\ntable driverstandings , columns = [ driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable constructorresults , columns = [ constructorresults.raceid ( integer | values : 18 , 19 ) , constructorresults.constructorresultsid ( integer | primary key | values : 1 , 2 ) , constructorresults.points ( real | values : 14.0 , 8.0 ) , constructorresults.constructorid ( integer | values : 1 , 2 ) , constructorresults.status ( text | values : D ) ]\nforeign keys :\nconstructorresults.raceid = races.raceid\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents : None\nHow many wins was achieved by the oldest racer? Indicate his/her full name.\n", "response": "SELECT drivers.forename || ' ' || drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid ORDER BY driverstandings.wins DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable pitstops , columns = [ pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.url ( text ) ]\ntable laptimes , columns = [ laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.url ( text ) , constructors.nationality ( text | values : British , German ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nWhat was the longest time a driver had ever spent at a pit stop?\n", "response": "SELECT max(laptimes.milliseconds) FROM laptimes INNER JOIN pitstops ON laptimes.raceid = pitstops.raceid WHERE laptimes.driverid = 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laptimes , columns = [ laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlapspeed ( text | values : 218.300 , 217.586 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) , circuits.url ( text ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents : None\nAmong all the lap records set on various circuits, what is the time for the fastest one?\n", "response": "SELECT results.time FROM results INNER JOIN circuits ON results.circuitid = circuits.circuitid WHERE results.fastestlap IS NOT NULL ORDER BY results.milliseconds DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) ]\ntable constructors , columns = [ constructors.name ( text | values : AFM , AGS ) , constructors.url ( text ) , constructors.nationality ( text | values : British , German ) , constructors.constructorref ( text | comment : constructor reference name | values : mclaren , bmw_sauber ) , constructors.constructorid ( integer | primary key | values : 147 , 39 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\nlaptimes.driverid = drivers.driverid\npitstops.driverid = drivers.driverid\nmatched contents :\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\ndrivers.surname ( Hamilton , Lewis )\nWhat was the longest time that Lewis Hamilton had spent at a pit stop?\n", "response": "SELECT max(pitstops.milliseconds) FROM pitstops INNER JOIN drivers ON pitstops.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) , races.circuitid ( integer | values : 1 , 2 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.number ( integer | values : 44 , 6 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable laptimes , columns = [ laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\nforeign keys :\nraces.year = seasons.year\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nmatched contents :\nraces.name ( Australian Grand Prix )\nraces.year ( 2011 )\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\nseasons.year ( 2011 )\nDuring which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?\n", "response": "SELECT pitstops.lap FROM pitstops INNER JOIN laptimes ON pitstops.driverid = laptimes.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.driverref = 'hamilton' AND races.name = 'Australian Grand Prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.year ( integer | values : 2009 , 2008 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable pitstops , columns = [ pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.lap ( integer | values : 16 , 36 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.url ( text ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\ntable circuits , columns = [ circuits.name ( text ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.url ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.alt ( integer ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nmatched contents :\nraces.year ( 2011 )\nraces.name ( Australian Grand Prix )\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nseasons.year ( 2011 )\nPlease list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.\n", "response": "SELECT pitstops.time FROM pitstops INNER JOIN drivers ON drivers.driverid = pitstops.driverid INNER JOIN races ON races.raceid = pitstops.raceid WHERE races.year = 2011;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.circuitid ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\ndrivers.surname ( Hamilton , Lewis )\nWhat is the lap record set by Lewis Hamilton in a Formula_1 race?\n", "response": "SELECT * FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.surname ( text | values : Hamilton , Heidfeld ) , drivers.code ( text | values : HAM , HEI ) , drivers.number ( integer | values : 44 , 6 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.circuitid ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable driverstandings , columns = [ driverstandings.driverid ( integer | values : 1 , 2 ) , driverstandings.raceid ( integer | comment : constructor reference name | values : 18 , 19 ) , driverstandings.driverstandingsid ( integer | primary key | values : 1 , 2 ) , driverstandings.wins ( integer | values : 1 , 0 ) , driverstandings.points ( real | values : 10.0 , 8.0 ) , driverstandings.position ( integer | values : 1 , 2 ) ]\nforeign keys :\ndriverstandings.driverid = drivers.driverid\ndriverstandings.raceid = races.raceid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( driver )\ndrivers.surname ( Driver )\nWhich driver created the shortest lap time ever record in a Formula_1 race? Please give his full name.\n", "response": "SELECT drivers.forename, drivers.surname FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid ORDER BY laptimes.milliseconds ASC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) , circuits.name ( text ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) ]\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.number ( integer | values : 44 , 6 ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.code ( text | values : HAM , HEI ) , drivers.url ( text ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) ]\ntable results , columns = [ results.driverid ( integer | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.laps ( integer | values : 58 , 57 ) , results.position ( integer | values : 1 , 2 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\nWhat was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?\n", "response": "SELECT laptimes.position FROM laptimes INNER JOIN drivers ON laptimes.driverid = drivers.driverid INNER JOIN races ON laptimes.raceid = races.raceid WHERE drivers.forename = 'Lewis' AND drivers.code = 'HAM' AND races.name = 'Formula_1' ORDER BY laptimes.milliseconds DESC LIMIT 1;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.country ( text | values : Malaysia , Bahrain ) , circuits.alt ( integer ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) , races.year ( integer | values : 2009 , 2008 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) ]\ntable laptimes , columns = [ laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Austrian Grand Prix )\nWhat is the lap record for the Austrian Grand Prix Circuit?\n", "response": "SELECT * FROM laptimes WHERE raceid = 18;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.alt ( integer ) ]\ntable laptimes , columns = [ laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.raceid ( integer | values : 18 , 19 ) , results.fastestlapspeed ( text | values : 218.300 , 217.586 ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.round ( integer | values : 1 , 2 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.year ( integer | values : 2009 , 2008 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\ncircuits.country ( Italy )\nPlease list the lap records for the circuits in Italy.\n", "response": "SELECT * FROM laptimes WHERE circuits.country = 'Italy';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) ]\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\ntable laptimes , columns = [ laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) ]\ntable seasons , columns = [ seasons.year ( integer | primary key | comment : race id | values : 1950 , 1951 ) , seasons.url ( text ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nraces.year = seasons.year\nlaptimes.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Austrian Grand Prix )\nIn which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?\n", "response": "SELECT races.name FROM circuits INNER JOIN races ON circuits.circuitid = races.circuitid WHERE circuits.name = 'Formula 1' AND races.name = 'Austrian Grand Prix';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.url ( text ) , circuits.country ( text | values : Malaysia , Bahrain ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.raceid ( integer | values : 18 , 19 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.driverid ( integer | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) ]\ntable laptimes , columns = [ laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\nraces.name ( Austrian Grand Prix )\nIn the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?\n", "response": "SELECT strftime('%J', laptimes.time) - strftime('%J', pitstops.time) AS duration FROM pitstops INNER JOIN laptimes ON pitstops.raceid = laptimes.raceid WHERE pitstops.driverid = 1 AND pitstops.raceid = 18;\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.lat ( real | comment : latitude | values : 2.76083 , 26.0325 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.name ( text ) , circuits.alt ( integer ) ]\ntable results , columns = [ results.laps ( integer | values : 58 , 57 ) , results.fastestlap ( integer | values : 39 , 41 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.raceid ( integer | values : 18 , 19 ) ]\ntable laptimes , columns = [ laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.lap ( integer | values : 16 , 36 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\nlaptimes.time ( 1:29.488 )\nPlease list the location coordinates of the circuits whose lap record is 1:29.488.\n", "response": "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN laptimes ON circuits.circuitid = laptimes.raceid WHERE laptimes.time = '1:29.488';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable drivers , columns = [ drivers.driverid ( integer | primary key | values : 452 , 625 ) , drivers.driverref ( text | comment : driver reference name | values : hamilton , heidfeld ) , drivers.forename ( text | values : Lewis , Nick ) , drivers.number ( integer | values : 44 , 6 ) , drivers.code ( text | values : HAM , HEI ) , drivers.surname ( text | values : Hamilton , Heidfeld ) ]\ntable pitstops , columns = [ pitstops.driverid ( integer | primary key | values : 1 , 2 ) , pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) ]\ntable races , columns = [ races.raceid ( integer | primary key | values : 837 , 833 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.year ( integer | values : 2009 , 2008 ) , races.date ( date | values : 2009-03-29 , 2009-04-05 ) , races.round ( integer | values : 1 , 2 ) ]\ntable results , columns = [ results.milliseconds ( integer | values : 5690616 , 5696094 ) , results.driverid ( integer | values : 1 , 2 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.raceid ( integer | values : 18 , 19 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.statusid ( integer | values : 1 , 11 ) ]\ntable laptimes , columns = [ laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\nforeign keys :\nlaptimes.driverid = drivers.driverid\nlaptimes.raceid = races.raceid\npitstops.driverid = drivers.driverid\npitstops.raceid = races.raceid\nresults.driverid = drivers.driverid\nresults.raceid = races.raceid\nmatched contents :\ndrivers.driverref ( hamilton , lewis )\ndrivers.forename ( Lewis )\ndrivers.surname ( Hamilton , Lewis )\nWhat was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?\n", "response": "SELECT avg(laptimes.milliseconds) FROM laptimes INNER JOIN pitstops ON laptimes.driverid = pitstops.driverid INNER JOIN results ON results.raceid = pitstops.raceid INNER JOIN races ON races.raceid = results.raceid WHERE pitstops.driverid = 1 AND races.name = 'Formula_1';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable circuits , columns = [ circuits.country ( text | values : Malaysia , Bahrain ) , circuits.circuitid ( integer | primary key | values : 23 , 61 ) , circuits.location ( text | values : Kuala Lumpur , Sakhir ) , circuits.name ( text ) , circuits.circuitref ( text | comment : circuit reference name | values : sepang , bahrain ) , circuits.lng ( real | comment : longitude | values : 101.738 , 50.5106 ) ]\ntable laptimes , columns = [ laptimes.milliseconds ( integer | values : 109088 , 93740 ) , laptimes.lap ( integer | primary key | values : 1 , 2 ) , laptimes.time ( text | values : 1:49.088 , 1:33.740 ) , laptimes.raceid ( integer | primary key | values : 1 , 2 ) , laptimes.driverid ( integer | primary key | values : 1 , 2 ) , laptimes.position ( integer | values : 13 , 12 ) ]\ntable results , columns = [ results.milliseconds ( integer | values : 5690616 , 5696094 ) , results.laps ( integer | values : 58 , 57 ) , results.time ( text | values : 1:34:50.616 , +5.478 ) , results.resultid ( integer | primary key | values : 1 , 2 ) , results.fastestlaptime ( text | values : 1:27.452 , 1:27.739 ) , results.fastestlap ( integer | values : 39 , 41 ) ]\ntable races , columns = [ races.circuitid ( integer | values : 1 , 2 ) , races.name ( text | values : Australian Grand Prix , Malaysian Grand Prix ) , races.raceid ( integer | primary key | values : 837 , 833 ) , races.time ( text | values : 06:00:00 , 09:00:00 ) , races.year ( integer | values : 2009 , 2008 ) , races.round ( integer | values : 1 , 2 ) ]\ntable pitstops , columns = [ pitstops.milliseconds ( integer | values : 23227 , 23199 ) , pitstops.lap ( integer | values : 16 , 36 ) , pitstops.time ( text | values : 17:28:24 , 17:59:29 ) , pitstops.raceid ( integer | primary key | values : 841 , 842 ) , pitstops.stop ( integer | primary key | values : 1 , 2 ) , pitstops.duration ( text | values : 23.227 , 23.199 ) ]\nforeign keys :\nraces.circuitid = circuits.circuitid\nlaptimes.raceid = races.raceid\npitstops.raceid = races.raceid\nresults.raceid = races.raceid\nmatched contents :\ncircuits.country ( Italy )\nWhat is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?\n", "response": "SELECT cast(avg(laptimes.milliseconds) AS REAL) FROM laptimes INNER JOIN circuits ON laptimes.circuitid = circuits.circuitid WHERE circuits.country = 'Italy';\t", "n_examples": 0, "db_id": "formula_1"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.gbh ( real | values : 1.78 , 1.85 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhich player has the highest overall rating? Indicate the player's api id.\n", "response": "SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.overall_rating DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.height ( integer | values : 182.88 , 170.18 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.home_player_y10 ( integer | values : 10 , 7 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_y6 ( integer | values : 7 , 3 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) ]\ntable player_attributes , columns = [ player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhat is the height of the tallest player? Indicate his name.\n", "response": "SELECT player.player_name FROM player ORDER BY height DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player_attributes , columns = [ player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.preferred_foot ( text | values : right , left ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) ]\ntable match , columns = [ match.psa ( real | values : 1.76 , 2.96 ) , match.shoton ( text ) , match.goal ( text ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.foulcommit ( text ) , match.whh ( real | values : 1.7 , 1.83 ) ]\ntable player , columns = [ player.player_api_id ( integer | values : 2625 , 2752 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhat is the preferred foot when attacking of the player with the lowest potential?\n", "response": "SELECT preferred_foot FROM player_attributes WHERE potential = (SELECT min(potential) FROM player_attributes);\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.defensive_work_rate ( text | values : medium , high ) , player_attributes.attacking_work_rate ( text | values : medium , high ) ]\ntable match , columns = [ match.away_player_9 ( integer | values : 106013 , 42153 ) , match.away_player_11 ( integer | values : 46552 , 38782 ) , match.away_player_10 ( integer | values : 38383 , 32690 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.possession ( text ) , match.whh ( real | values : 1.7 , 1.83 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defenceaggression ( integer | values : 55 , 44 ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nplayer.id ( 60 , 65 )\nAmong the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?\n", "response": "SELECT count(player.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating BETWEEN 60 AND 65 AND player_attributes.attacking_work_rate = 'high';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.cross ( text ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.home_player_x1 ( integer | values : 1 , 2 ) , match.home_player_x2 ( integer | values : 2 , 4 ) ]\ntable player_attributes , columns = [ player_attributes.crossing ( integer | values : 49 , 48 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.heading_accuracy ( integer | values : 71 , 70 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.chancecreationcrossingclass ( text | values : Normal , Lots ) , team_attributes.chancecreationcrossing ( integer | values : 65 , 63 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWho are the top 5 players who perform better in crossing actions? Indicate their player id.\n", "response": "SELECT player_attributes.player_api_id FROM player_attributes ORDER BY player_attributes.overall_rating DESC LIMIT 5;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.season ( text | values : 2008/2009 , 2009/2010 ) , match.goal ( text ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.home_team_goal ( integer | values : 1 , 0 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.crossing ( integer | values : 49 , 48 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents :\nmatch.id ( 2016 )\nplayer_attributes.id ( 2016 )\nWhich league had the most goals in the 2016 season?\n", "response": "SELECT league.name FROM match INNER JOIN league ON match.league_id = league.id WHERE match.season = '2016' GROUP BY league.name ORDER BY count(match.goal) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.season ( text | values : 2008/2009 , 2009/2010 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable team_attributes , columns = [ team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defenceteamwidth ( integer | values : 45 , 54 ) , team_attributes.defenceteamwidthclass ( text | values : Normal , Wide ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\nforeign keys :\nleague.country_id = country.id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nmatch.id ( 2016 )\nWhich home team had lost the fewest matches in the 2016 season?\n", "response": "SELECT home_team_api_id FROM match WHERE home_team_api_id NOT IN (SELECT away_team_api_id FROM match) GROUP BY home_team_api_id ORDER BY count(home_team_api_id) LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.height ( integer | values : 182.88 , 170.18 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) ]\ntable player_attributes , columns = [ player_attributes.penalties ( integer | values : 48 , 47 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.foulcommit ( text ) , match.psd ( real | values : 3.82 , 3.52 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.psh ( real | values : 5.1 , 2.48 ) , match.home_player_y10 ( integer | values : 10 , 7 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defenceteamwidth ( integer | values : 45 , 54 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nmatch.home_player_y10 ( 10 )\nIndicate the full names of the top 10 players with the highest number of penalties.\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.penalties DESC LIMIT 10;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.season ( text | values : 2008/2009 , 2009/2010 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.id ( integer | primary key | values : 4769 , 4770 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) ]\nforeign keys :\nleague.country_id = country.id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nmatch.id ( 2010 )\nleague.name ( Scotland Premier League )\ncountry.name ( Scotland )\nIn Scotland Premier League, which away team won the most during the 2010 season?\n", "response": "SELECT away_team_api_id FROM match WHERE season = '2010' GROUP BY away_team_api_id ORDER BY count(away_team_api_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team_attributes , columns = [ team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.buildupplayspeedclass ( text | values : Balanced , Fast ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.buildupplaypassing ( integer | values : 50 , 56 ) ]\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.possession ( text ) , match.psa ( real | values : 1.76 , 2.96 ) , match.whh ( real | values : 1.7 , 1.83 ) ]\ntable team , columns = [ team.team_api_id ( integer | values : 1601 , 1773 ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.attacking_work_rate ( text | values : medium , high ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.crossing ( integer | values : 49 , 48 ) , player_attributes.finishing ( integer | values : 44 , 43 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents : None\nWhat are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?\n", "response": "SELECT team.team_long_name, team_attributes.buildupplayspeed FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id ORDER BY team_attributes.buildupplayspeed DESC LIMIT 4;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.season ( text | values : 2008/2009 , 2009/2010 ) , match.vch ( real | values : 1.65 , 2.0 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.match_api_id ( integer | values : 483129 , 483130 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.reactions ( integer | values : 47 , 46 ) , player_attributes.penalties ( integer | values : 48 , 47 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents :\nmatch.id ( 2016 )\nplayer_attributes.id ( 2016 )\nWhich League had the most matches end as draw in the 2016 season?\n", "response": "SELECT league.name FROM match INNER JOIN league ON match.league_id = league.id WHERE match.season = '2016/2017' AND match.vch = 'D' GROUP BY league.name ORDER BY count(match.id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player_attributes , columns = [ player_attributes.sprint_speed ( integer | values : 64 , 78 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.acceleration ( integer | values : 60 , 79 ) ]\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.away_player_11 ( integer | values : 46552 , 38782 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_y10 ( integer | values : 10 , 7 ) , match.home_player_y2 ( integer | values : 3 , 0 ) , match.home_player_y6 ( integer | values : 7 , 3 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer_attributes.id ( 2013 , 2015 , 97 )\nplayer_attributes.acceleration ( 97 )\nplayer.id ( 2013 , 2015 , 97 )\nteam_attributes.team_fifa_api_id ( 2013 )\nAt present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.\n", "response": "SELECT player.birthday FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.sprint_speed < 97 AND player_attributes.date BETWEEN '2013' AND '2015';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.b365h ( real | values : 1.73 , 1.95 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.away_player_11 ( integer | values : 46552 , 38782 ) , match.b365d ( real | values : 3.4 , 3.2 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.buildupplayspeedclass ( text | values : Balanced , Fast ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.buildupplaypassing ( integer | values : 50 , 56 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.sprint_speed ( integer | values : 64 , 78 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.stamina ( integer | values : 54 , 79 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nGive the name of the league with the highest matches of all time and how many matches were played in the said league.\n", "response": "SELECT league.name, count(match.id) FROM league INNER JOIN match ON league.id = match.league_id GROUP BY league.name ORDER BY count(match.id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.height ( integer | values : 182.88 , 170.18 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_y10 ( integer | values : 10 , 7 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_y3 ( integer | values : 3 , 5 ) , match.home_player_y4 ( integer | values : 3 , 5 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 1990 , 1995 )\nplayer_attributes.id ( 1990 , 1995 )\nWhat is the average height of players born between 1990 and 1995?\n", "response": "SELECT avg(player.height) FROM player WHERE cast(strftime('%Y', player.birthday) AS INT) BETWEEN 1990 AND 1995;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.psa ( real | values : 1.76 , 2.96 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable player , columns = [ player.player_api_id ( integer | values : 2625 , 2752 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nmatch.id ( 2010 )\nplayer_attributes.id ( 2010 )\nplayer.id ( 2010 )\nList the players' api id who had the highest above average overall ratings in 2010.\n", "response": "SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT max(overall_rating) FROM player_attributes WHERE date = '2010-01-01');\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team_attributes , columns = [ team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.buildupplayspeedclass ( text | values : Balanced , Fast ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.buildupplaypassing ( integer | values : 50 , 56 ) ]\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.possession ( text ) , match.psa ( real | values : 1.76 , 2.96 ) , match.whh ( real | values : 1.7 , 1.83 ) ]\ntable team , columns = [ team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.penalties ( integer | values : 48 , 47 ) , player_attributes.vision ( integer | values : 54 , 53 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents : None\nGive the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.\n", "response": "SELECT team_fifa_api_id FROM team_attributes WHERE buildupplayspeed > 50 AND buildupplayspeed < 60;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.possession ( text ) , match.season ( text | values : 2008/2009 , 2009/2010 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.buildupplaypassing ( integer | values : 50 , 56 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.buildupplaypassingclass ( text | values : Mixed , Long ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.vision ( integer | values : 54 , 53 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nmatch.id ( 2012 )\nteam_attributes.buildupplaypassingclass ( Long )\nplayer_attributes.id ( 2012 )\nList the long name of teams with above-average build-up play passing in 2012.\n", "response": "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaypassingclass = 'Mixed';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.preferred_foot ( text | values : right , left ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.lbd ( real | values : 3.3 , 3.2 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_y2 ( integer | values : 3 , 0 ) , match.home_player_y3 ( integer | values : 3 , 5 ) , match.home_player_y4 ( integer | values : 3 , 5 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 1987 , 1992 )\nplayer_attributes.preferred_foot ( left )\nplayer_attributes.id ( 1987 , 1992 )\nCalculate the percentage of players who prefer left foot, who were born between 1987 and 1992.\n", "response": "SELECT cast(sum(CASE WHEN player_attributes.preferred_foot = 'left' AND player.birthday BETWEEN '1987-01-01' AND '1992-12-31' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.goal ( text ) , match.season ( text | values : 2008/2009 , 2009/2010 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.home_team_goal ( integer | values : 1 , 0 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable player_attributes , columns = [ player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.gk_kicking ( integer | comment : goalkeep kicking | values : 10 , 9 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nleague.country_id = country.id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nList the top 5 leagues in ascending order of the number of goals made in all seasons combined.\n", "response": "SELECT league.name, sum(match.goal) FROM match INNER JOIN league ON match.league_id = league.id GROUP BY league.name ORDER BY sum(match.goal) DESC LIMIT 5;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.long_shots ( integer | values : 35 , 34 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.shot_power ( integer | values : 55 , 54 ) , player_attributes.long_passing ( integer | values : 64 , 63 ) ]\ntable match , columns = [ match.shoton ( text ) , match.bsh ( real | values : 1.73 , 1.91 ) , match.shotoff ( text ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.psh ( real | values : 5.1 , 2.48 ) , match.home_player_4 ( integer | values : 38312 , 67959 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.chancecreationshooting ( integer | values : 55 , 64 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Ahmed Samir Farag , Samir )\nFind the average number of long-shot done by Ahmed Samir Farag.\n", "response": "SELECT avg(player_attributes.long_shots) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Ahmed Samir Farag';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.height ( integer | values : 182.88 , 170.18 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.heading_accuracy ( integer | values : 71 , 70 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.free_kick_accuracy ( integer | values : 39 , 38 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable match , columns = [ match.home_player_x10 ( integer | values : 4 , 6 ) , match.home_player_10 ( integer | values : 38801 , 38423 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_4 ( integer | values : 38312 , 67959 ) , match.home_player_6 ( integer | values : 36393 , 46004 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 180 )\nplayer_attributes.id ( 180 )\nteam_attributes.id ( 180 )\nteam_attributes.team_fifa_api_id ( 180 )\nList the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.heading_accuracy > 180 ORDER BY player_attributes.heading_accuracy DESC LIMIT 10;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.season ( text | values : 2008/2009 , 2009/2010 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.possession ( text ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) , team_attributes.buildupplaydribblingclass ( text | values : Little , Normal ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.buildupplaydribbling ( integer | values : 48 , 41 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable player_attributes , columns = [ player_attributes.dribbling ( integer | values : 51 , 50 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nmatch.id ( 2014 )\nteam_attributes.chancecreationpassingclass ( Normal )\nteam_attributes.buildupplaydribblingclass ( Normal )\nplayer_attributes.id ( 2014 )\nFor the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.\n", "response": "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaydribblingclass = 'Normal' AND team_attributes.chancecreationpassing < ( SELECT avg(chancecreationpassing) FROM team_attributes WHERE team_attributes.buildupplaydribblingclass = 'Normal' AND team_attributes.date = '2014-02-18' ) ORDER BY chancecreationpassing DESC;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.season ( text | values : 2008/2009 , 2009/2010 ) , match.goal ( text ) , match.home_team_goal ( integer | values : 1 , 0 ) , match.away_team_goal ( integer | values : 1 , 0 ) , match.id ( integer | primary key | values : 4769 , 4770 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.buildupplaypassing ( integer | values : 50 , 56 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nmatch.season ( 2009/2010 )\nList the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.\n", "response": "SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.home_team_goal > match.away_team_goal AND match.season = '2009/2010';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.team_short_name ( text | values : GEN , BAC ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) ]\ntable match , columns = [ match.whh ( real | values : 1.7 , 1.83 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.sjh ( real | values : 1.9 , 1.95 ) , match.home_team_goal ( integer | values : 1 , 0 ) , match.whd ( real | values : 3.3 , 3.25 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defenceteamwidth ( integer | values : 45 , 54 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.reactions ( integer | values : 47 , 46 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.finishing ( integer | values : 44 , 43 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_long_name ( Queens Park Rangers , Rangers )\nWhat is the short name of the football team Queens Park Rangers?\n", "response": "SELECT team.team_short_name FROM team WHERE team.team_long_name = 'Queens Park Rangers';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_y2 ( integer | values : 3 , 0 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_y3 ( integer | values : 3 , 5 ) , match.home_player_y4 ( integer | values : 3 , 5 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 1970 )\nplayer_attributes.id ( 1970 )\nList the football players with a birthyear of 1970 and a birthmonth of October.\n", "response": "SELECT player.player_name FROM player WHERE player.birthday = '1970-10-01';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.attacking_work_rate ( text | values : medium , high ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.defensive_work_rate ( text | values : medium , high ) ]\ntable match , columns = [ match.goal ( text ) , match.shoton ( text ) , match.possession ( text ) , match.shotoff ( text ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_4 ( integer | values : 38312 , 67959 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Franco Zennaro )\nWhat is the attacking work rate of the football playerr Franco Zennaro?\n", "response": "SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Franco Zennaro';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.away_player_11 ( integer | values : 46552 , 38782 ) , match.possession ( text ) , match.whd ( real | values : 3.3 , 3.25 ) ]\ntable team_attributes , columns = [ team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.defenceteamwidth ( integer | values : 45 , 54 ) , team_attributes.defenceteamwidthclass ( text | values : Normal , Wide ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\ntable player_attributes , columns = [ player_attributes.positioning ( integer | values : 45 , 44 ) , player_attributes.short_passing ( integer | values : 61 , 60 ) , player_attributes.long_passing ( integer | values : 64 , 63 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.agility ( integer | values : 59 , 78 ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_long_name ( ADO Den Haag )\nteam.team_short_name ( DEN )\nWhat is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?\n", "response": "SELECT team_attributes.defenceteamwidth FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'ADO Den Haag' AND team_attributes.defenceteamwidthclass = 'Wide';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.heading_accuracy ( integer | values : 71 , 70 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) ]\ntable match , columns = [ match.match_api_id ( integer | values : 483129 , 483130 ) , match.goal ( text ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.home_team_goal ( integer | values : 1 , 0 ) , match.shoton ( text ) , match.away_team_goal ( integer | values : 1 , 0 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Francois Affolter )\nWhat is the football player Francois Affolter header's finishing rate on 18/09/2014?\n", "response": "SELECT finishing FROM player_attributes WHERE date = '2014-09-18' AND player_api_id = 505942;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.home_player_y11 ( integer | values : 10 , 11 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.gbd ( real | values : 3.25 , 3.2 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Gabriel Tamas , Gabriel )\nplayer.id ( 2011 )\nplayer_attributes.id ( 2011 )\nWhat is the overall rating of the football player Gabriel Tamas in year 2011?\n", "response": "SELECT player_attributes.overall_rating FROM player_attributes WHERE player_attributes.player_api_id = 2011 AND player_attributes.date = '2011-02-18';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.season ( text | values : 2008/2009 , 2009/2010 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.country_id ( integer | values : 1 , 1729 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.penalties ( integer | values : 48 , 47 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.finishing ( integer | values : 44 , 43 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents :\nmatch.season ( 2015/2016 )\nleague.name ( Scotland Premier League )\ncountry.name ( Scotland )\nHow many matches in the 2015/2016 season were held in Scotland Premier League ?\n", "response": "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Scotland Premier League' AND match.season = '2015/2016';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player_attributes , columns = [ player_attributes.preferred_foot ( text | values : right , left ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.attacking_work_rate ( text | values : medium , high ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) ]\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.home_player_y1 ( integer | values : 1 , 3 ) , match.shoton ( text ) , match.goal ( text ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhat is the preferred foot when attacking of the youngest football player?\n", "response": "SELECT preferred_foot FROM player_attributes ORDER BY date DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable match , columns = [ match.goal ( text ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.gba ( real | values : 4.0 , 3.75 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.shotoff ( text ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nList all the football player with the highest potential score.\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.weight ( integer | values : 187 , 146 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.preferred_foot ( text | values : right , left ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.attacking_work_rate ( text | values : medium , high ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.lbh ( real | values : 1.8 , 1.9 ) , match.goal ( text ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.lbd ( real | values : 3.3 , 3.2 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.psa ( real | values : 1.76 , 2.96 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.weight ( 130 )\nplayer.id ( 130 )\nplayer_attributes.preferred_foot ( left )\nplayer_attributes.id ( 130 )\nteam_attributes.id ( 130 )\nAmong all the players whose weight is under 130, how many of them preferred foot in attacking is left?\n", "response": "SELECT count(player.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.weight < 130 AND player_attributes.preferred_foot = 'left';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.team_short_name ( text | values : GEN , BAC ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\ntable team_attributes , columns = [ team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.chancecreationshootingclass ( text | values : Normal , Lots ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) ]\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.possession ( text ) , match.away_player_11 ( integer | values : 46552 , 38782 ) , match.id ( integer | primary key | values : 4769 , 4770 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.reactions ( integer | values : 47 , 46 ) , player_attributes.penalties ( integer | values : 48 , 47 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam_attributes.chancecreationpassingclass ( Risky )\nList the football teams that has a chance creation passing class of Risky. Inidcate its short name only.\n", "response": "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Risky';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.defensive_work_rate ( text | values : medium , high ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.attacking_work_rate ( text | values : medium , high ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.foulcommit ( text ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.possession ( text ) , match.whh ( real | values : 1.7 , 1.83 ) , match.whd ( real | values : 3.3 , 3.25 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) , team_attributes.defenceaggressionclass ( text | values : Press , Double ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( David Wilson )\nWhat is the defensive work rate of the football player David Wilson ?\n", "response": "SELECT player_attributes.defensive_work_rate FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.whh ( real | values : 1.7 , 1.83 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhen is the birthday of the football player who has the highest overall rating?\n", "response": "SELECT player.birthday FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = ( SELECT max(overall_rating) FROM player_attributes );\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable league , columns = [ league.country_id ( integer | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.id ( integer | primary key | values : 1 , 1729 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable match , columns = [ match.country_id ( integer | values : 1 , 1729 ) , match.league_id ( integer | values : 1 , 1729 ) , match.vca ( real | values : 4.5 , 3.25 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.vch ( real | values : 1.65 , 2.0 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.reactions ( integer | values : 47 , 46 ) , player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.penalties ( integer | values : 48 , 47 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents :\ncountry.name ( Netherlands )\nWhat is the name of the football league in the country of Netherlands?\n", "response": "SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Netherlands';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.country_id ( integer | values : 1 , 1729 ) , match.season ( text | values : 2008/2009 , 2009/2010 ) , match.goal ( text ) , match.home_team_goal ( integer | values : 1 , 0 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.gba ( real | values : 4.0 , 3.75 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable league , columns = [ league.country_id ( integer | values : 1 , 1729 ) , league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) ]\nforeign keys :\nleague.country_id = country.id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nmatch.season ( 2010/2011 )\ncountry.name ( Poland )\nCalculate the average home team goal in the 2010/2011 season in the country of Poland.\n", "response": "SELECT avg(home_team_goal) FROM match WHERE season = '2010/2011' AND country_id = 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.height ( integer | values : 182.88 , 170.18 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.heading_accuracy ( integer | values : 71 , 70 ) ]\ntable match , columns = [ match.goal ( text ) , match.shoton ( text ) , match.shotoff ( text ) , match.card ( text | values : <card /> ) , match.possession ( text ) , match.bsa ( real | values : 4.2 , 3.6 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWho has the highest average finishing rate between the highest and shortest football player?\n", "response": "SELECT player.player_name, avg(player_attributes.finishing) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id GROUP BY player.player_name ORDER BY avg(player_attributes.finishing) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.height ( integer | values : 182.88 , 170.18 ) , player.weight ( integer | values : 187 , 146 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.gba ( real | values : 4.0 , 3.75 ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.bsh ( real | values : 1.73 , 1.91 ) , match.b365h ( real | values : 1.73 , 1.95 ) , match.b365d ( real | values : 3.4 , 3.2 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 180 )\nplayer_attributes.id ( 180 )\nteam_attributes.id ( 180 )\nteam_attributes.team_fifa_api_id ( 180 )\nPlease list player names which are higher than 180.\n", "response": "SELECT player_name FROM player WHERE height > 180;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.b365d ( real | values : 3.4 , 3.2 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_y10 ( integer | values : 10 , 7 ) , match.home_player_y11 ( integer | values : 10 , 11 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 1990 )\nmatch.id ( 1990 )\nplayer_attributes.id ( 1990 )\nHow many players were born after 1990?\n", "response": "SELECT count(player_api_id) FROM player WHERE birthday > '1990-01-01';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.weight ( integer | values : 187 , 146 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable match , columns = [ match.lbh ( real | values : 1.8 , 1.9 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.bsh ( real | values : 1.73 , 1.91 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.bsd ( real | values : 3.4 , 3.25 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.stamina ( integer | values : 54 , 79 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.weight ( 170 )\nplayer.id ( 170 )\nplayer_attributes.id ( 170 )\nteam_attributes.id ( 170 )\nHow many players whose first names are Adam and weigh more than 170?\n", "response": "SELECT count(player.player_name) FROM player WHERE player.player_name = 'Adam' AND player.weight > 170;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.bwh ( real | values : 1.75 , 1.8 ) , match.match_api_id ( integer | values : 483129 , 483130 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 2008 , 2010 , 80 )\nplayer.player_fifa_api_id ( 80 )\nplayer_attributes.id ( 2008 , 2010 )\nmatch.id ( 2008 , 2010 , 80 )\nWhich players had an overall rating of over 80 from 2008 to 2010? Please list player names.\n", "response": "SELECT DISTINCT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating > 80 AND player_attributes.date BETWEEN '2008-01-01' AND '2010-12-31';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.finishing ( integer | values : 44 , 43 ) ]\ntable match , columns = [ match.goal ( text ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.away_player_11 ( integer | values : 46552 , 38782 ) , match.gba ( real | values : 4.0 , 3.75 ) , match.away_player_1 ( integer | values : 34480 , 37937 ) , match.gbd ( real | values : 3.25 , 3.2 ) ]\ntable team_attributes , columns = [ team_attributes.chancecreationshootingclass ( text | values : Normal , Lots ) , team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) , team_attributes.chancecreationshooting ( integer | values : 55 , 64 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.chancecreationpositioningclass ( text | values : Organised , Free Form ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Aaron Doran )\nWhat is Aaron Doran's potential score?\n", "response": "SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Doran';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player_attributes , columns = [ player_attributes.preferred_foot ( text | values : right , left ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) ]\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.height ( integer | values : 182.88 , 170.18 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.b365h ( real | values : 1.73 , 1.95 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.bsh ( real | values : 1.73 , 1.91 ) , match.b365d ( real | values : 3.4 , 3.2 ) , match.psa ( real | values : 1.76 , 2.96 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer_attributes.preferred_foot ( left )\nList out of players whose preferred foot is left.\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.psa ( real | values : 1.76 , 2.96 ) ]\ntable team_attributes , columns = [ team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.buildupplayspeedclass ( text | values : Balanced , Fast ) , team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable player_attributes , columns = [ player_attributes.sprint_speed ( integer | values : 64 , 78 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.acceleration ( integer | values : 60 , 79 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.agility ( integer | values : 59 , 78 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam_attributes.buildupplayspeedclass ( Fast )\nPlease list all team names which the speed class is fast.\n", "response": "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Fast';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable team_attributes , columns = [ team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.buildupplaypassingclass ( text | values : Mixed , Long ) ]\ntable match , columns = [ match.possession ( text ) , match.b365h ( real | values : 1.73 , 1.95 ) , match.b365d ( real | values : 3.4 , 3.2 ) , match.cross ( text ) , match.corner ( text ) , match.home_team_goal ( integer | values : 1 , 0 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.long_passing ( integer | values : 64 , 63 ) , player_attributes.short_passing ( integer | values : 61 , 60 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.crossing ( integer | values : 49 , 48 ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_short_name ( CLB )\nWhat is the passing class of CLB team?\n", "response": "SELECT team_attributes.chancecreationpassingclass FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_short_name = 'CLB';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.team_short_name ( text | values : GEN , BAC ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.possession ( text ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.b365h ( real | values : 1.73 , 1.95 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.home_team_goal ( integer | values : 1 , 0 ) ]\ntable team_attributes , columns = [ team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.buildupplaypassing ( integer | values : 50 , 56 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.buildupplaypassingclass ( text | values : Mixed , Long ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.penalties ( integer | values : 48 , 47 ) , player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.vision ( integer | values : 54 , 53 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam_attributes.buildupplaypassingclass ( Short )\nWhich teams have build up play passing more than 70? Please list their short names.\n", "response": "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplaypassing > 70;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.id ( integer | primary key | values : 4769 , 4770 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable player , columns = [ player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nmatch.id ( 2010 , 2015 , 170 )\nplayer_attributes.id ( 2010 , 2015 , 170 )\nplayer.id ( 2010 , 2015 , 170 )\nplayer.weight ( 170 )\nteam_attributes.id ( 170 )\nFrom 2010 to 2015, what was the average overall rating of players who are higher than 170?\n", "response": "SELECT avg(player_attributes.overall_rating) FROM player_attributes WHERE player_attributes.overall_rating > 170;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.height ( integer | values : 182.88 , 170.18 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.b365h ( real | values : 1.73 , 1.95 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.lbh ( real | values : 1.8 , 1.9 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_y6 ( integer | values : 7 , 3 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhich football player has the shortest height?\n", "response": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable league , columns = [ league.country_id ( integer | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.id ( integer | primary key | values : 1 , 1729 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable match , columns = [ match.country_id ( integer | values : 1 , 1729 ) , match.league_id ( integer | values : 1 , 1729 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.vca ( real | values : 4.5 , 3.25 ) , match.season ( text | values : 2008/2009 , 2009/2010 ) , match.possession ( text ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defenceaggression ( integer | values : 55 , 44 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\nforeign keys :\nleague.country_id = country.id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nleague.name ( Italy Serie A )\ncountry.name ( Italy )\nWhich country is the league Italy Serie A from?\n", "response": "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Italy Serie A';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.team_short_name ( text | values : GEN , BAC ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\ntable team_attributes , columns = [ team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.buildupplaydribbling ( integer | values : 48 , 41 ) , team_attributes.buildupplaypassing ( integer | values : 50 , 56 ) , team_attributes.buildupplayspeedclass ( text | values : Balanced , Fast ) ]\ntable match , columns = [ match.possession ( text ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.country_id ( integer | values : 1 , 1729 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.away_player_6 ( integer | values : 38798 , 37202 ) , match.bwd ( real | values : 3.35 , 3.3 ) ]\ntable player_attributes , columns = [ player_attributes.dribbling ( integer | values : 51 , 50 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.short_passing ( integer | values : 61 , 60 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.long_passing ( integer | values : 64 , 63 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nmatch.id ( 31 , 53 , 32 )\nplayer_attributes.dribbling ( 53 )\nList the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.\n", "response": "SELECT team.team_short_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeed = 31 AND team_attributes.buildupplaydribbling = 53 AND team_attributes.buildupplaypassing = 32;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.foulcommit ( text ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.whh ( real | values : 1.7 , 1.83 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Aaron Doran )\nWhat is the average overall rating of the football player Aaron Doran?\n", "response": "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.gba ( real | values : 4.0 , 3.75 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.lba ( real | values : 3.75 , 3.5 ) , match.match_api_id ( integer | values : 483129 , 483130 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.penalties ( integer | values : 48 , 47 ) , player_attributes.finishing ( integer | values : 44 , 43 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents :\nmatch.id ( 2008 )\nleague.id ( 1 )\nleague.name ( Germany 1. Bundesliga )\nleague.country_id ( 1 )\ncountry.name ( Germany )\ncountry.id ( 1 )\nplayer_attributes.id ( 2008 )\nHow many matches were held in the league Germany 1. Bundesliga from August to October 2008?\n", "response": "SELECT count(match.id) FROM `match` INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Germany 1. Bundesliga' AND match.date BETWEEN '2008-08-01' AND '2008-10-31';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.team_short_name ( text | values : GEN , BAC ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\ntable match , columns = [ match.home_team_goal ( integer | values : 1 , 0 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.goal ( text ) , match.gba ( real | values : 4.0 , 3.75 ) , match.match_api_id ( integer | values : 483129 , 483130 ) ]\ntable team_attributes , columns = [ team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.penalties ( integer | values : 48 , 47 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents : None\nList all the short name of the football team that had a home team goal of 10?\n", "response": "SELECT team.team_short_name FROM team INNER JOIN match ON team.team_api_id = match.home_team_api_id WHERE match.home_team_goal = 10;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.balance ( integer | values : 65 , 90 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.shoton ( text ) , match.goal ( text ) , match.shotoff ( text ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.bsd ( real | values : 3.4 , 3.25 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 61 )\nplayer.player_fifa_api_id ( 61 )\nplayer_attributes.balance ( 61 )\nList all the football player with the highest balance score and potential score of 61.\n", "response": "SELECT player.player_name, player_attributes.balance, player_attributes.potential FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.balance = ( SELECT max(balance) FROM player_attributes ) AND player_attributes.potential = ( SELECT max(potential) FROM player_attributes );\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable match , columns = [ match.away_player_11 ( integer | values : 46552 , 38782 ) , match.possession ( text ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_player_x1 ( integer | values : 1 , 2 ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.bsd ( real | values : 3.4 , 3.25 ) ]\ntable player_attributes , columns = [ player_attributes.ball_control ( integer | values : 49 , 48 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Aaron Appindangoye , Abdou Diallo )\nWhat is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye ?\n", "response": "SELECT avg(player_attributes.ball_control) - avg(player_attributes.ball_control) FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Abdou Diallo' AND player.player_name = 'Aaron Appindangoye';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.id ( integer | primary key | values : 31446 , 1513 ) ]\ntable match , columns = [ match.b365h ( real | values : 1.73 , 1.95 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.whd ( real | values : 3.3 , 3.25 ) , match.wha ( real | values : 4.33 , 3.6 ) , match.away_team_goal ( integer | values : 1 , 0 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defenceteamwidth ( integer | values : 45 , 54 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.reactions ( integer | values : 47 , 46 ) , player_attributes.crossing ( integer | values : 49 , 48 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_short_name ( GEN )\nWhat's the long name for the team GEN?\n", "response": "SELECT team.team_long_name FROM team WHERE team.team_short_name = 'GEN';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable match , columns = [ match.bsa ( real | values : 4.2 , 3.6 ) , match.home_player_y10 ( integer | values : 10 , 7 ) , match.home_player_y4 ( integer | values : 3 , 5 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_y6 ( integer | values : 7 , 3 ) , match.home_player_y8 ( integer | values : 7 , 8 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Abdelaziz Barrada , Aaron Lennon )\nWhich player is older, Aaron Lennon or Abdelaziz Barrada?\n", "response": "SELECT player_name FROM player ORDER BY birthday ASC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.height ( integer | values : 182.88 , 170.18 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.b365a ( real | values : 5.0 , 3.6 ) , match.home_player_y11 ( integer | values : 10 , 11 ) , match.home_player_y10 ( integer | values : 10 , 7 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_y6 ( integer | values : 7 , 3 ) , match.home_player_y7 ( integer | values : 7 , 6 ) ]\ntable player_attributes , columns = [ player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhich player is the tallest?\n", "response": "SELECT player.player_name FROM player ORDER BY height DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player_attributes , columns = [ player_attributes.preferred_foot ( text | values : right , left ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.positioning ( integer | values : 45 , 44 ) , player_attributes.gk_positioning ( integer | comment : goalkeep positioning | values : 8 , 7 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) ]\ntable match , columns = [ match.away_player_10 ( integer | values : 38383 , 32690 ) , match.away_player_11 ( integer | values : 46552 , 38782 ) , match.possession ( text ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer_attributes.preferred_foot ( left )\nAmong the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?\n", "response": "SELECT count(player_attributes.player_api_id) FROM player_attributes INNER JOIN match ON player_attributes.player_api_id = match.away_player_11 WHERE player_attributes.preferred_foot = 'left';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable league , columns = [ league.country_id ( integer | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.id ( integer | primary key | values : 1 , 1729 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable match , columns = [ match.country_id ( integer | values : 1 , 1729 ) , match.league_id ( integer | values : 1 , 1729 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defenceaggression ( integer | values : 55 , 44 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.reactions ( integer | values : 47 , 46 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.finishing ( integer | values : 44 , 43 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents :\nleague.name ( Belgium Jupiler League )\ncountry.name ( Belgium )\nWhich country is the Belgium Jupiler League from?\n", "response": "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Belgium Jupiler League';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable league , columns = [ league.country_id ( integer | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.id ( integer | primary key | values : 1 , 1729 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable match , columns = [ match.country_id ( integer | values : 1 , 1729 ) , match.league_id ( integer | values : 1 , 1729 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.gba ( real | values : 4.0 , 3.75 ) , match.b365a ( real | values : 5.0 , 3.6 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) , team_attributes.defenceaggression ( integer | values : 55 , 44 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\nforeign keys :\nleague.country_id = country.id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\ncountry.name ( Germany )\nPlease list the leagues from Germany.\n", "response": "SELECT league.name FROM league INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.b365h ( real | values : 1.73 , 1.95 ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.gba ( real | values : 4.0 , 3.75 ) , match.bsh ( real | values : 1.73 , 1.91 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhich player has the strongest overall strength?\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.overall_rating DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.away_player_11 ( integer | values : 46552 , 38782 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.possession ( text ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_x1 ( integer | values : 1 , 2 ) , match.home_team_goal ( integer | values : 1 , 0 ) ]\ntable player_attributes , columns = [ player_attributes.positioning ( integer | values : 45 , 44 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.gk_positioning ( integer | comment : goalkeep positioning | values : 8 , 7 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nplayer.id ( 1986 )\nplayer_attributes.id ( 1986 )\nAmong the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?\n", "response": "SELECT count(player.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday < '1986-01-01 00:00:00' AND player_attributes.gk_positioning = 8 AND player_attributes.defencedefenderlineclass = 'Cover';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable match , columns = [ match.away_player_11 ( integer | values : 46552 , 38782 ) , match.cross ( text ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.home_player_x1 ( integer | values : 1 , 2 ) ]\ntable player_attributes , columns = [ player_attributes.crossing ( integer | values : 49 , 48 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) ]\ntable team_attributes , columns = [ team_attributes.chancecreationcrossingclass ( text | values : Normal , Lots ) , team_attributes.chancecreationcrossing ( integer | values : 65 , 63 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Ariel Borysiuk , Arouna Kone , Alexis )\nWhich of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.crossing = 49 ORDER BY player_attributes.overall_rating DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.heading_accuracy ( integer | values : 71 , 70 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.free_kick_accuracy ( integer | values : 39 , 38 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.goal ( text ) , match.shoton ( text ) , match.shotoff ( text ) , match.whh ( real | values : 1.7 , 1.83 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.bsa ( real | values : 4.2 , 3.6 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Ariel Borysiuk )\nWhat's the heading accuracy of Ariel Borysiuk?\n", "response": "SELECT player_attributes.heading_accuracy FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Ariel Borysiuk';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.height ( integer | values : 182.88 , 170.18 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.volleys ( integer | values : 44 , 43 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.goal ( text ) , match.shoton ( text ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.gba ( real | values : 4.0 , 3.75 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.home_team_goal ( integer | values : 1 , 0 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 180 , 70 )\nplayer_attributes.id ( 180 )\nteam_attributes.id ( 180 )\nteam_attributes.team_fifa_api_id ( 180 )\nAmong the players whose height is over 180, how many of them have a volley score of over 70?\n", "response": "SELECT count(*) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.dribbling ( integer | values : 51 , 50 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.volleys ( integer | values : 44 , 43 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) ]\ntable match , columns = [ match.goal ( text ) , match.shoton ( text ) , match.shotoff ( text ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.gba ( real | values : 4.0 , 3.75 ) , match.gbd ( real | values : 3.25 , 3.2 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.buildupplaydribbling ( integer | values : 48 , 41 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.buildupplaydribblingclass ( text | values : Little , Normal ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 70 )\nplayer_attributes.dribbling ( 70 )\nPlease list the names of the players whose volley score and dribbling score are over 70.\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.volleys > 70 AND player_attributes.dribbling > 70;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.country_id ( integer | values : 1 , 1729 ) , match.season ( text | values : 2008/2009 , 2009/2010 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable league , columns = [ league.country_id ( integer | values : 1 , 1729 ) , league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.penalties ( integer | values : 48 , 47 ) , player_attributes.reactions ( integer | values : 47 , 46 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents :\nmatch.season ( 2008/2009 )\ncountry.name ( Belgium )\nHow many matches in the 2008/2009 season were held in Belgium?\n", "response": "SELECT count(match.id) FROM match WHERE match.country_id = 1 AND match.season = '2008/2009';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.long_passing ( integer | values : 64 , 63 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.shotoff ( text ) , match.cross ( text ) , match.shoton ( text ) , match.gbd ( real | values : 3.25 , 3.2 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhat is the long passing score of the oldest player?\n", "response": "SELECT max(long_passing) FROM player_attributes;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.country_id ( integer | values : 1 , 1729 ) , match.bsa ( real | values : 4.2 , 3.6 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.penalties ( integer | values : 48 , 47 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents :\nmatch.id ( 2009 )\nleague.name ( Belgium Jupiler League )\ncountry.name ( Belgium )\nplayer_attributes.id ( 2009 )\nHow many matches were held in the Belgium Jupiler League in April, 2009?\n", "response": "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Belgium Jupiler League' AND match.date LIKE '2009-04%';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.season ( text | values : 2008/2009 , 2009/2010 ) , match.league_id ( integer | values : 1 , 1729 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.reactions ( integer | values : 47 , 46 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents :\nmatch.season ( 2008/2009 )\nWhich league had the most matches in the 2008/2009 season?\n", "response": "SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2008/2009' GROUP BY league.name ORDER BY count(match.league_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.bsa ( real | values : 4.2 , 3.6 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 1986 )\nplayer_attributes.id ( 1986 )\nWhat is the average overall rating of the players born before the year 1986?\n", "response": "SELECT avg(player_attributes.overall_rating) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.birthday < '1986-01-01';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable match , columns = [ match.away_player_11 ( integer | values : 46552 , 38782 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.psd ( real | values : 3.82 , 3.52 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.home_player_10 ( integer | values : 38801 , 38423 ) , match.home_player_2 ( integer | values : 67950 , 39580 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Ariel Borysiuk , Paulin Puel )\nHow much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?\n", "response": "SELECT cast((sum(CASE WHEN player.player_name = 'Ariel Borysiuk' THEN player_attributes.overall_rating END) - sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating END)) AS REAL) * 100 / sum(CASE WHEN player.player_name = 'Paulin Puel' THEN player_attributes.overall_rating END) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.player_name = 'Ariel Borysiuk';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team_attributes , columns = [ team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.buildupplayspeedclass ( text | values : Balanced , Fast ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.buildupplaypassing ( integer | values : 50 , 56 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.possession ( text ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.b365h ( real | values : 1.73 , 1.95 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.reactions ( integer | values : 47 , 46 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_long_name ( Heart of Midlothian )\nHow much is the average build up play speed of the Heart of Midlothian team?\n", "response": "SELECT avg(team_attributes.buildupplayspeed) FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Heart of Midlothian';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable match , columns = [ match.corner ( text ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.home_player_5 ( integer | values : 26235 , 37112 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Pietro Marino )\nCalculate the average overall rating of Pietro Marino.\n", "response": "SELECT avg(overall_rating) FROM player_attributes WHERE player_api_id = 505942;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.crossing ( integer | values : 49 , 48 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.cross ( text ) , match.b365d ( real | values : 3.4 , 3.2 ) , match.b365h ( real | values : 1.73 , 1.95 ) , match.vca ( real | values : 4.5 , 3.25 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.gbd ( real | values : 3.25 , 3.2 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.chancecreationcrossingclass ( text | values : Normal , Lots ) , team_attributes.chancecreationcrossing ( integer | values : 65 , 63 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Aaron Lennox )\nWhat is Aaron Lennox's total crossing score?\n", "response": "SELECT sum(crossing) FROM match WHERE home_player_1 = 39890;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team_attributes , columns = [ team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.chancecreationcrossingclass ( text | values : Normal , Lots ) ]\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.vca ( real | values : 4.5 , 3.25 ) , match.goal ( text ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.vch ( real | values : 1.65 , 2.0 ) , match.match_api_id ( integer | values : 483129 , 483130 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.penalties ( integer | values : 48 , 47 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_long_name ( Ajax )\nWhat is Ajax's highest chance creation passing score and what is it classified as?\n", "response": "SELECT team.team_long_name, team_attributes.chancecreationpassingclass, team_attributes.chancecreationpassing FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team.team_long_name = 'Ajax' ORDER BY team_attributes.chancecreationpassing DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.preferred_foot ( text | values : right , left ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) ]\ntable match , columns = [ match.b365h ( real | values : 1.73 , 1.95 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.possession ( text ) , match.lbh ( real | values : 1.8 , 1.9 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Abdou Diallo )\nWhich foot is preferred by Abdou Diallo?\n", "response": "SELECT player_attributes.preferred_foot FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.whh ( real | values : 1.7 , 1.83 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Dorlan Pabon )\nWhat is the highest overall rating received by Dorlan Pabon?\n", "response": "SELECT player_attributes.overall_rating FROM player_attributes WHERE player_attributes.player_name = '<NAME>';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.country_id ( integer | values : 1 , 1729 ) , match.goal ( text ) , match.away_team_goal ( integer | values : 1 , 0 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_team_goal ( integer | values : 1 , 0 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable team_attributes , columns = [ team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.country_id ( integer | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) ]\nforeign keys :\nleague.country_id = country.id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_long_name ( Parma )\ncountry.name ( Italy )\nWhat is the average number of goals made by Parma as the away team while playing in Italy?\n", "response": "SELECT avg(match.away_team_goal) FROM match INNER JOIN team ON match.away_team_api_id = team.team_api_id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.away_player_9 ( integer | values : 106013 , 42153 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.psd ( real | values : 3.82 , 3.52 ) , match.psh ( real | values : 5.1 , 2.48 ) , match.match_api_id ( integer | values : 483129 , 483130 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 77 )\nFor the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 77 AND player_attributes.date = '2016-06-23' ORDER BY player_attributes.date LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.gba ( real | values : 4.0 , 3.75 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Aaron Mooy )\nWhat was the overall rating for Aaron Mooy on 2016/2/4?\n", "response": "SELECT player_attributes.overall_rating FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Aaron Mooy' AND player_attributes.date = '2016-02-04';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) ]\ntable match , columns = [ match.possession ( text ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.home_player_x1 ( integer | values : 1 , 2 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_x2 ( integer | values : 2 , 4 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Francesco Parravicini )\nWhat was the potiential for Francesco Parravicini on 2010/8/30?\n", "response": "SELECT player_attributes.potential FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = '<NAME>' AND player_attributes.date = '2010-08-30';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.attacking_work_rate ( text | values : medium , high ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.possession ( text ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Francesco Migliore )\nHow was Francesco Migliore's attacking work rate on 2015/5/1?\n", "response": "SELECT player_attributes.attacking_work_rate FROM player_attributes INNER JOIN match ON player_attributes.id = match.home_player_1 WHERE match.date = '2015-05-01';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.defensive_work_rate ( text | values : medium , high ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.attacking_work_rate ( text | values : medium , high ) ]\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.possession ( text ) , match.gba ( real | values : 4.0 , 3.75 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Kevin Berigaud )\nTell the defensive work rate for Kevin Berigaud on 2013/2/22.\n", "response": "SELECT defensive_work_rate FROM player_attributes WHERE player_api_id = 505942 AND date = '2013-02-22';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.crossing ( integer | values : 49 , 48 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.cross ( text ) , match.goal ( text ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.shoton ( text ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.chancecreationcrossingclass ( text | values : Normal , Lots ) , team_attributes.chancecreationcrossing ( integer | values : 65 , 63 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Kevin Constant )\nWhen was the first time did Kevin Constant have his highest crossing score? Give the date.\n", "response": "SELECT match.date FROM match INNER JOIN player_attributes ON match.id = player_attributes.id WHERE player_attributes.player_api_id = 39890 ORDER BY player_attributes.crossing DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.buildupplayspeedclass ( text | values : Balanced , Fast ) , team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) ]\ntable match , columns = [ match.match_api_id ( integer | values : 483129 , 483130 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.whd ( real | values : 3.3 , 3.25 ) ]\ntable team , columns = [ team.team_api_id ( integer | values : 1601 , 1773 ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_long_name ( Willem II )\nWhat was the build up play speed class for \"Willem II\" on 2011/2/22?\n", "response": "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Willem II' AND team_attributes.date = '2011-02-22';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.match_api_id ( integer | values : 483129 , 483130 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.league_id ( integer | values : 1 , 1729 ) , match.possession ( text ) , match.away_player_x10 ( integer | values : 4 , 6 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.buildupplaydribblingclass ( text | values : Little , Normal ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.buildupplaydribbling ( integer | values : 48 , 41 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.dribbling ( integer | values : 51 , 50 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_short_name ( LEI )\nHow was the build up play dribbling class for \"LEI\" on 2015/9/10?\n", "response": "SELECT team_attributes.buildupplaydribblingclass FROM team_attributes INNER JOIN match ON team_attributes.team_api_id = match.home_team_api_id AND team_attributes.date = '2015-09-10 00:00:00' AND team_attributes.buildupplaydribblingclass = 'Little';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.possession ( text ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable team_attributes , columns = [ team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.buildupplaypassingclass ( text | values : Mixed , Long ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.buildupplaypassing ( integer | values : 50 , 56 ) , team_attributes.buildupplayspeedclass ( text | values : Balanced , Fast ) ]\ntable team , columns = [ team.team_api_id ( integer | values : 1601 , 1773 ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_long_name ( FC Lorient )\nTell the build Up play passing class for \"FC Lorient\" on 2010/2/22.\n", "response": "SELECT buildupplaypassingclass FROM team_attributes WHERE team_api_id = 1601 AND date = '2010-02-22 00:00:00';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.away_player_11 ( integer | values : 46552 , 38782 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable team_attributes , columns = [ team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) ]\ntable team , columns = [ team.team_api_id ( integer | values : 1601 , 1773 ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_api_id ( integer | values : 2625 , 2752 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_long_name ( PEC Zwolle )\nState the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.\n", "response": "SELECT chancecreationpassingclass FROM team_attributes WHERE team_api_id = '1601' AND date = '2013-09-20';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.cross ( text ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.home_team_goal ( integer | values : 1 , 0 ) ]\ntable team , columns = [ team.team_api_id ( integer | values : 1601 , 1773 ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable team_attributes , columns = [ team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.chancecreationcrossingclass ( text | values : Normal , Lots ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationcrossing ( integer | values : 65 , 63 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.crossing ( integer | values : 49 , 48 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.reactions ( integer | values : 47 , 46 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_long_name ( Hull City )\nWhat was the chance creation crossing class for \"Hull City\" on 2010/2/22?\n", "response": "SELECT team_attributes.chancecreationcrossingclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'Hull City' AND team_attributes.date = '2010-02-22';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.psa ( real | values : 1.76 , 2.96 ) ]\ntable team_attributes , columns = [ team_attributes.defenceaggressionclass ( text | values : Press , Double ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defenceaggression ( integer | values : 55 , 44 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.aggression ( integer | values : 71 , 63 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.crossing ( integer | values : 49 , 48 ) , player_attributes.reactions ( integer | values : 47 , 46 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_long_name ( Hannover 96 )\nmatch.id ( 96 )\nplayer_attributes.aggression ( 96 )\nFor the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?\n", "response": "SELECT team_attributes.defenceaggressionclass FROM team_attributes INNER JOIN match ON team_attributes.team_api_id = match.away_team_api_id WHERE match.id = 96 AND team_attributes.date = '2015-09-10';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.away_player_11 ( integer | values : 46552 , 38782 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.home_player_x1 ( integer | values : 1 , 2 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Marko Arnautovic )\nWhat was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?\n", "response": "SELECT avg(player_attributes.overall_rating) FROM player_attributes INNER JOIN match ON player_attributes.player_api_id = match.away_player_11 WHERE strftime('%Y', match.date) = '2007' AND strftime('%m', match.date) = '02' AND strftime('%d', match.date) = '22';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.away_player_11 ( integer | values : 46552 , 38782 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_player_x1 ( integer | values : 1 , 2 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) ]\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nplayer.player_name ( Landon Donovan , Jordan Bowery )\nWhat percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?\n", "response": "SELECT ( SELECT player_attributes.overall_rating FROM player_attributes WHERE player_attributes.player_api_id = 3879 ) - ( SELECT player_attributes.overall_rating FROM player_attributes WHERE player_attributes.player_api_id = 401 ) AS RESULT;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.height ( integer | values : 182.88 , 170.18 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.b365h ( real | values : 1.73 , 1.95 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.home_player_y10 ( integer | values : 10 , 7 ) , match.home_player_y6 ( integer | values : 7 , 3 ) , match.home_player_y11 ( integer | values : 10 , 11 ) , match.home_player_y8 ( integer | values : 7 , 8 ) ]\ntable player_attributes , columns = [ player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.balance ( integer | values : 65 , 90 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nList down 5 tallest players' name.\n", "response": "SELECT player.player_name FROM player ORDER BY height DESC LIMIT 5;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.weight ( integer | values : 187 , 146 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.lbh ( real | values : 1.8 , 1.9 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.bsh ( real | values : 1.73 , 1.91 ) ]\ntable player_attributes , columns = [ player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.stamina ( integer | values : 54 , 79 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhat are the player api id of 10 heaviest players?\n", "response": "SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 10;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.home_player_y1 ( integer | values : 1 , 3 ) , match.bwd ( real | values : 3.35 , 3.3 ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.home_player_y2 ( integer | values : 3 , 0 ) , match.home_player_y3 ( integer | values : 3 , 5 ) , match.iwd ( real | values : 3.2 , 3.1 ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.stamina ( integer | values : 54 , 79 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 35 )\nList down the name of players who are 35 years old and above.\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.age > 35;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable match , columns = [ match.home_team_goal ( integer | values : 1 , 0 ) , match.goal ( text ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.gba ( real | values : 4.0 , 3.75 ) , match.match_api_id ( integer | values : 483129 , 483130 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.gk_positioning ( integer | comment : goalkeep positioning | values : 8 , 7 ) , player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.gk_kicking ( integer | comment : goalkeep kicking | values : 10 , 9 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nplayer.player_name ( Aaron Lennon )\nHow many home team goal have been scored by Aaron Lennon?\n", "response": "SELECT count(match.home_team_goal) FROM match WHERE match.home_team_goal = 1 AND match.home_player_1 = 3879;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.away_team_goal ( integer | values : 1 , 0 ) , match.goal ( text ) , match.away_player_x1 ( integer | values : 1 , 2 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.away_player_x2 ( integer | values : 2 , 4 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.gk_kicking ( integer | comment : goalkeep kicking | values : 10 , 9 ) , player_attributes.gk_positioning ( integer | comment : goalkeep positioning | values : 8 , 7 ) , player_attributes.gk_handling ( integer | comment : goalkeep handling | values : 11 , 10 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nplayer.player_name ( Filipe Ferreira , Daan Smith , Ferreira , Filipe )\nSum up the away team goal scored by both Daan Smith and Filipe Ferreira.\n", "response": "SELECT SUM(away_team_goal) FROM match WHERE away_player_x1 = 3879 AND away_player_x2 = 401;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.goal ( text ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.home_team_goal ( integer | values : 1 , 0 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_y10 ( integer | values : 10 , 7 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.gk_kicking ( integer | comment : goalkeep kicking | values : 10 , 9 ) , player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.gk_positioning ( integer | comment : goalkeep positioning | values : 8 , 7 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nplayer.id ( 30 )\nmatch.id ( 30 )\nCalculate the total home team goal scored by players whose age are 30 years old and below.\n", "response": "SELECT sum(match.home_team_goal) FROM match INNER JOIN player ON match.home_player_y1 = player.player_api_id WHERE player.weight < 30;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.height ( integer | values : 182.88 , 170.18 ) , player.player_api_id ( integer | values : 2625 , 2752 ) ]\ntable player_attributes , columns = [ player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.home_player_10 ( integer | values : 38801 , 38423 ) , match.home_player_y10 ( integer | values : 10 , 7 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_y11 ( integer | values : 10 , 11 ) , match.home_player_11 ( integer | values : 94289 , 26502 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nmatch.home_player_y10 ( 10 )\nmatch.home_player_y11 ( 10 )\nState 10 names of the strongest players.\n", "response": "SELECT player.player_name FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id GROUP BY player.player_api_id ORDER BY sum(player_attributes.strength) DESC LIMIT 10;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) ]\ntable match , columns = [ match.psa ( real | values : 1.76 , 2.96 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.bsh ( real | values : 1.73 , 1.91 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.gbd ( real | values : 3.25 , 3.2 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhat is the name of players with the highest potential?\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.potential DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable match , columns = [ match.away_player_11 ( integer | values : 46552 , 38782 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_player_x1 ( integer | values : 1 , 2 ) , match.possession ( text ) , match.home_player_x2 ( integer | values : 2 , 4 ) , match.home_team_goal ( integer | values : 1 , 0 ) ]\ntable player_attributes , columns = [ player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.attacking_work_rate ( text | values : medium , high ) , player_attributes.aggression ( integer | values : 71 , 63 ) , player_attributes.short_passing ( integer | values : 61 , 60 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents : None\nWho are the players that tend to be attacking when their mates were doing attack moves? List down their name.\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.attacking_work_rate = 'high' GROUP BY player.player_name ORDER BY COUNT(player_attributes.attacking_work_rate) DESC;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) ]\ntable match , columns = [ match.goal ( text ) , match.lbd ( real | values : 3.3 , 3.2 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.bwh ( real | values : 1.75 , 1.8 ) , match.home_player_4 ( integer | values : 38312 , 67959 ) , match.home_player_y1 ( integer | values : 1 , 3 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\ncountry.id ( 1 )\nAmong the players with finishing rate of 1, pick the eldest player and state the player's name.\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.finishing = 1 ORDER BY player_attributes.date DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable match , columns = [ match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_x1 ( integer | values : 1 , 2 ) , match.home_player_6 ( integer | values : 36393 , 46004 ) , match.home_player_x4 ( integer | values : 6 , 8 ) , match.home_player_x6 ( integer | values : 2 , 6 ) , match.home_player_x5 ( integer | values : 8 , 6 ) ]\ntable league , columns = [ league.country_id ( integer | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.vision ( integer | values : 54 , 53 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nleague.country_id = country.id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\ncountry.name ( Belgium )\nState the name of players who came from Belgium.\n", "response": "SELECT player.player_name FROM player INNER JOIN league ON league.id = player.league_id WHERE league.country_id = 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player_attributes , columns = [ player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable player , columns = [ player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable match , columns = [ match.vch ( real | values : 1.65 , 2.0 ) , match.vcd ( real | values : 3.4 , 3.25 ) , match.vca ( real | values : 4.5 , 3.25 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.country_id ( integer | values : 1 , 1729 ) , match.home_player_y1 ( integer | values : 1 , 3 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.country_id ( integer | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nleague.country_id = country.id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 90 )\nmatch.id ( 90 )\nLocate players with vision scores of 90 and above, state the country of these players.\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.vision > 90;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.weight ( integer | values : 187 , 146 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable match , columns = [ match.lbh ( real | values : 1.8 , 1.9 ) , match.b365h ( real | values : 1.73 , 1.95 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_y6 ( integer | values : 7 , 3 ) , match.home_player_x1 ( integer | values : 1 , 2 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable league , columns = [ league.country_id ( integer | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.stamina ( integer | values : 54 , 79 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nleague.country_id = country.id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nWhich country's players have the heaviest average weights?\n", "response": "SELECT country.name FROM country INNER JOIN player_attributes ON country.id = player_attributes.country_id ORDER BY player_attributes.strength DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) ]\ntable match , columns = [ match.bsa ( real | values : 4.2 , 3.6 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.sjh ( real | values : 1.9 , 1.95 ) , match.vch ( real | values : 1.65 , 2.0 ) , match.sjd ( real | values : 3.3 , 4.0 ) ]\ntable team_attributes , columns = [ team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.buildupplayspeedclass ( text | values : Balanced , Fast ) , team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.acceleration ( integer | values : 60 , 79 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.stamina ( integer | values : 54 , 79 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam_attributes.buildupplayspeedclass ( Slow )\nList down the long name for slow speed class team.\n", "response": "SELECT team.team_long_name FROM team INNER JOIN team_attributes ON team.team_api_id = team_attributes.team_api_id WHERE team_attributes.buildupplayspeedclass = 'Slow';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.team_short_name ( text | values : GEN , BAC ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\ntable team_attributes , columns = [ team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.chancecreationcrossingclass ( text | values : Normal , Lots ) , team_attributes.chancecreationcrossing ( integer | values : 65 , 63 ) , team_attributes.chancecreationpositioningclass ( text | values : Organised , Free Form ) ]\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.possession ( text ) , match.shoton ( text ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.shotoff ( text ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.positioning ( integer | values : 45 , 44 ) , player_attributes.reactions ( integer | values : 47 , 46 ) , player_attributes.aggression ( integer | values : 71 , 63 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam_attributes.chancecreationpassingclass ( Safe )\nWhat are the short name of team who played safe while creating chance of passing?\n", "response": "SELECT team.team_short_name FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team_attributes.chancecreationpassingclass = 'Safe';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.height ( integer | values : 182.88 , 170.18 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable match , columns = [ match.b365h ( real | values : 1.73 , 1.95 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.country_id ( integer | values : 1 , 1729 ) , match.home_player_y10 ( integer | values : 10 , 7 ) , match.home_player_y6 ( integer | values : 7 , 3 ) ]\ntable league , columns = [ league.country_id ( integer | values : 1 , 1729 ) , league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) ]\ntable player_attributes , columns = [ player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.vision ( integer | values : 54 , 53 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nleague.country_id = country.id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\ncountry.name ( Italy )\nWhat is the average heights of Italy players?\n", "response": "SELECT avg(player.height) FROM player INNER JOIN country ON player.country_id = country.id WHERE country.name = 'Italy';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.height ( integer | values : 182.88 , 170.18 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.home_player_x10 ( integer | values : 4 , 6 ) , match.home_player_3 ( integer | values : 38788 , 67958 ) , match.home_player_x6 ( integer | values : 2 , 6 ) , match.home_player_4 ( integer | values : 38312 , 67959 ) , match.home_player_x8 ( integer | values : 6 , 2 ) ]\ntable player_attributes , columns = [ player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.vision ( integer | values : 54 , 53 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 180 )\nplayer_attributes.id ( 180 )\nteam_attributes.id ( 180 )\nteam_attributes.team_fifa_api_id ( 180 )\nPlease provide the names of top three football players who are over 180 cm tall in alphabetical order.\n", "response": "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 0, 3;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable match , columns = [ match.home_player_1 ( integer | values : 39890 , 38327 ) , match.home_player_y1 ( integer | values : 1 , 3 ) , match.home_player_10 ( integer | values : 38801 , 38423 ) , match.home_player_y11 ( integer | values : 10 , 11 ) , match.home_player_y2 ( integer | values : 3 , 0 ) , match.home_player_11 ( integer | values : 94289 , 26502 ) ]\ntable league , columns = [ league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.id ( integer | primary key | values : 1 , 1729 ) , league.country_id ( integer | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nleague.country_id = country.id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nHow many football players born after the 1990s have the first name \"Aaron\"?\n", "response": "SELECT count(player_api_id) FROM player WHERE dob > '1990-01-01' AND firstname = 'Aaron';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.jumping ( integer | values : 58 , 85 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) ]\ntable match , columns = [ match.shoton ( text ) , match.home_player_6 ( integer | values : 36393 , 46004 ) , match.home_player_y10 ( integer | values : 10 , 7 ) , match.home_player_y11 ( integer | values : 10 , 11 ) , match.home_player_11 ( integer | values : 94289 , 26502 ) , match.home_player_y6 ( integer | values : 7 , 3 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 23 )\nWhat is the difference between players 6 and 23's jumping scores?\n", "response": "SELECT jumping FROM player_attributes WHERE player_fifa_api_id = 6 AND player_api_id = 23;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player_attributes , columns = [ player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.preferred_foot ( text | values : right , left ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) ]\ntable match , columns = [ match.away_player_11 ( integer | values : 46552 , 38782 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.psd ( real | values : 3.82 , 3.52 ) , match.psh ( real | values : 5.1 , 2.48 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.possession ( text ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer_attributes.preferred_foot ( right )\nPlease provide top three football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.\n", "response": "SELECT player.player_api_id FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.potential < 70 AND player_attributes.preferred_foot = 'right' ORDER BY player_attributes.potential LIMIT 3;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.goal ( text ) , match.cross ( text ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_team_goal ( integer | values : 1 , 0 ) , match.away_team_goal ( integer | values : 1 , 0 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable player_attributes , columns = [ player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.preferred_foot ( text | values : right , left ) , player_attributes.crossing ( integer | values : 49 , 48 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.chancecreationcrossingclass ( text | values : Normal , Lots ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.chancecreationcrossing ( integer | values : 65 , 63 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer_attributes.preferred_foot ( left )\nHow many players had the highest potential score for crossing that preferred to use their left foots while attacking?\n", "response": "SELECT count(player_attributes.potential) FROM player_attributes INNER JOIN match ON player_attributes.player_api_id = match.away_player_11 WHERE player_attributes.preferred_foot = 'left' AND player_attributes.crossing = 49;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player_attributes , columns = [ player_attributes.stamina ( integer | values : 54 , 79 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable match , columns = [ match.bsa ( real | values : 4.2 , 3.6 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.bsh ( real | values : 1.73 , 1.91 ) , match.gbd ( real | values : 3.25 , 3.2 ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 80 )\nplayer.player_fifa_api_id ( 80 )\nWhat percentage of players have a strength and stamina score of more than 80?\n", "response": "SELECT cast(count(CASE WHEN strength > 80 AND stamina > 80 THEN 1 ELSE NULL END) AS REAL) * 100 / count(id) FROM player_attributes;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.country_id ( integer | values : 1 , 1729 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.bsa ( real | values : 4.2 , 3.6 ) ]\ntable league , columns = [ league.country_id ( integer | values : 1 , 1729 ) , league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.reactions ( integer | values : 47 , 46 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.finishing ( integer | values : 44 , 43 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents :\nleague.name ( Poland Ekstraklasa )\ncountry.name ( Poland )\nIn what country did the Poland Ekstraklasa take place?\n", "response": "SELECT country.name FROM league INNER JOIN country ON league.country_id = country.id WHERE league.name = 'Poland Ekstraklasa';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.date ( text | values : 2008-08-17 00:00:00 , 2008-08-16 00:00:00 ) , match.goal ( text ) , match.home_team_goal ( integer | values : 1 , 0 ) , match.away_team_goal ( integer | values : 1 , 0 ) , match.id ( integer | primary key | values : 4769 , 4770 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.country_id ( integer | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_short_name ( text | values : GEN , BAC ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) ]\nforeign keys :\nleague.country_id = country.id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nmatch.id ( 2008 , 24 )\nWhat was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?\n", "response": "SELECT home_team_goal, away_team_goal FROM match WHERE league_id = 1 AND date = '2008-09-24';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.acceleration ( integer | values : 60 , 79 ) , player_attributes.agility ( integer | values : 59 , 78 ) , player_attributes.sprint_speed ( integer | values : 64 , 78 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) ]\ntable match , columns = [ match.bsa ( real | values : 4.2 , 3.6 ) , match.card ( text | values : <card /> ) , match.psa ( real | values : 1.76 , 2.96 ) , match.bsd ( real | values : 3.4 , 3.25 ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.bsh ( real | values : 1.73 , 1.91 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.player_name ( Alexis Blin , Alexis )\nWhat are Alexis Blin's sprint speed, agility, and acceleration scores?\n", "response": "SELECT player_attributes.sprint_speed, player_attributes.agility, player_attributes.acceleration FROM player_attributes INNER JOIN player ON player_attributes.player_api_id = player.player_api_id WHERE player.player_name = 'Alexis Blin';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable team_attributes , columns = [ team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.buildupplayspeedclass ( text | values : Balanced , Fast ) , team_attributes.buildupplayspeed ( integer | values : 60 , 52 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) ]\ntable player_attributes , columns = [ player_attributes.balance ( integer | values : 65 , 90 ) , player_attributes.acceleration ( integer | values : 60 , 79 ) , player_attributes.sprint_speed ( integer | values : 64 , 78 ) , player_attributes.agility ( integer | values : 59 , 78 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) ]\ntable match , columns = [ match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.sjh ( real | values : 1.9 , 1.95 ) , match.whh ( real | values : 1.7 , 1.83 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.psa ( real | values : 1.76 , 2.96 ) ]\ntable player , columns = [ player.id ( integer | primary key | values : 3879 , 401 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) , player.birthday ( text | values : 1992-02-29 00:00:00 , 1989-12-15 00:00:00 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nteam.team_long_name ( KSV Cercle Brugge )\nteam_attributes.buildupplayspeedclass ( Balanced , Slow , Fast )\nDoes the KSV Cercle Brugge team have a slow, balanced or fast speed class?\n", "response": "SELECT team_attributes.buildupplayspeedclass FROM team_attributes INNER JOIN team ON team_attributes.team_api_id = team.team_api_id WHERE team.team_long_name = 'KSV Cercle Brugge';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.season ( text | values : 2008/2009 , 2009/2010 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.penalties ( integer | values : 48 , 47 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents : None\nIn the 2015\u20132016 season, how many games were played in the Italian Serie A league?\n", "response": "SELECT count(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Italian Serie A' AND season = '2015/2016';\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.league_id ( integer | values : 1 , 1729 ) , match.goal ( text ) , match.home_team_goal ( integer | values : 1 , 0 ) , match.country_id ( integer | values : 1 , 1729 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.gbh ( real | values : 1.78 , 1.85 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.country_id ( integer | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) ]\ntable country , columns = [ country.id ( integer | primary key | values : 1 , 1729 ) , country.name ( text | values : Belgium , England ) ]\ntable team , columns = [ team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable team_attributes , columns = [ team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.chancecreationshooting ( integer | values : 55 , 64 ) , team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) ]\nforeign keys :\nleague.country_id = country.id\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents :\nleague.name ( Netherlands Eredivisie )\ncountry.name ( Netherlands )\nWhat was the highest score of the home team in the Netherlands Eredivisie league?\n", "response": "SELECT match.home_team_goal FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Netherlands Eredivisie' ORDER BY match.home_team_goal DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.weight ( integer | values : 187 , 146 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.curve ( integer | values : 45 , 44 ) , player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) ]\ntable match , columns = [ match.goal ( text ) , match.lbh ( real | values : 1.8 , 1.9 ) , match.shotoff ( text ) , match.shoton ( text ) , match.gbh ( real | values : 1.78 , 1.85 ) , match.gba ( real | values : 4.0 , 3.75 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nPlease state the finishing rate and curve score of the player who has the heaviest weight.\n", "response": "SELECT player.player_name, player_attributes.finishing, player_attributes.curve FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player.weight DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable match , columns = [ match.season ( text | values : 2008/2009 , 2009/2010 ) , match.league_id ( integer | values : 1 , 1729 ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.home_team_api_id ( integer | values : 9987 , 10000 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) ]\ntable league , columns = [ league.id ( integer | primary key | values : 1 , 1729 ) , league.name ( text | values : Belgium Jupiler League , England Premier League ) , league.country_id ( integer | values : 1 , 1729 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\ntable team_attributes , columns = [ team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable player_attributes , columns = [ player_attributes.date ( text | values : 2016-02-18 00:00:00 , 2015-11-19 00:00:00 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.vision ( integer | values : 54 , 53 ) , player_attributes.reactions ( integer | values : 47 , 46 ) ]\nforeign keys :\nleague.country_id = country.id\nmatched contents : None\nWhich league had the most games in the 2015\u20132016 season?\n", "response": "SELECT league.name FROM league INNER JOIN match ON league.id = match.league_id WHERE match.season = '2015/2016' GROUP BY league.name ORDER BY count(match.league_id) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable team , columns = [ team.team_long_name ( text | values : KRC Genk , Beerschot AC ) , team.id ( integer | primary key | values : 31446 , 1513 ) , team.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 673 , 675 ) , team.team_api_id ( integer | values : 1601 , 1773 ) , team.team_short_name ( text | values : GEN , BAC ) ]\ntable match , columns = [ match.away_team_goal ( integer | values : 1 , 0 ) , match.goal ( text ) , match.id ( integer | primary key | values : 4769 , 4770 ) , match.match_api_id ( integer | values : 483129 , 483130 ) , match.away_team_api_id ( integer | values : 9993 , 9994 ) , match.home_team_goal ( integer | values : 1 , 0 ) ]\ntable team_attributes , columns = [ team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.chancecreationpassing ( integer | values : 60 , 54 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.chancecreationpassingclass ( text | values : Normal , Risky ) ]\ntable player_attributes , columns = [ player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.finishing ( integer | values : 44 , 43 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.potential ( integer | values : 71 , 66 ) , player_attributes.interceptions ( integer | values : 70 , 41 ) , player_attributes.penalties ( integer | values : 48 , 47 ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nteam_attributes.team_api_id = team.team_api_id\nteam_attributes.team_fifa_api_id = team.team_fifa_api_id\nmatch.away_team_api_id = team.team_api_id\nmatch.home_team_api_id = team.team_api_id\nmatched contents : None\nPlease provide the full name of the away team that scored the most goals.\n", "response": "SELECT team.team_long_name FROM match INNER JOIN team ON match.away_team_api_id = team.team_api_id GROUP BY team.team_long_name ORDER BY sum(match.away_team_goal) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.weight ( integer | values : 187 , 146 ) , player.height ( integer | values : 182.88 , 170.18 ) ]\ntable player_attributes , columns = [ player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.home_player_1 ( integer | values : 39890 , 38327 ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.home_player_5 ( integer | values : 26235 , 37112 ) , match.home_player_2 ( integer | values : 67950 , 39580 ) , match.home_player_8 ( integer | values : 67898 , 39631 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencedefenderlineclass ( text | values : Cover , Offside Trap ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents : None\nPlease name one player whose overall strength is the greatest.\n", "response": "SELECT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id ORDER BY player_attributes.strength DESC LIMIT 1;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable player , columns = [ player.height ( integer | values : 182.88 , 170.18 ) , player.id ( integer | primary key | values : 3879 , 401 ) , player.weight ( integer | values : 187 , 146 ) , player.player_api_id ( integer | values : 2625 , 2752 ) , player.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 2 , 6 ) , player.player_name ( text | values : Aaron Appindangoye , Aaron Cresswell ) ]\ntable player_attributes , columns = [ player_attributes.overall_rating ( integer | values : 67 , 62 ) , player_attributes.strength ( integer | values : 76 , 56 ) , player_attributes.id ( integer | primary key | values : 1 , 2 ) , player_attributes.player_api_id ( integer | values : 505942 , 155782 ) , player_attributes.player_fifa_api_id ( integer | comment : player federation international football association api id | values : 218353 , 189615 ) , player_attributes.potential ( integer | values : 71 , 66 ) ]\ntable match , columns = [ match.gbh ( real | values : 1.78 , 1.85 ) , match.gbd ( real | values : 3.25 , 3.2 ) , match.bsa ( real | values : 4.2 , 3.6 ) , match.lbh ( real | values : 1.8 , 1.9 ) , match.psa ( real | values : 1.76 , 2.96 ) , match.whh ( real | values : 1.7 , 1.83 ) ]\ntable team_attributes , columns = [ team_attributes.id ( integer | primary key | values : 1 , 2 ) , team_attributes.date ( text | values : 2010-02-22 00:00:00 , 2014-09-19 00:00:00 ) , team_attributes.team_api_id ( integer | values : 9930 , 8485 ) , team_attributes.team_fifa_api_id ( integer | comment : team federation international football association api id | values : 434 , 77 ) , team_attributes.defencepressure ( integer | values : 50 , 47 ) , team_attributes.defencepressureclass ( text | values : Medium , Deep ) ]\ntable country , columns = [ country.name ( text | values : Belgium , England ) , country.id ( integer | primary key | values : 1 , 1729 ) ]\nforeign keys :\nplayer_attributes.player_api_id = player.player_api_id\nplayer_attributes.player_fifa_api_id = player.player_fifa_api_id\nmatch.away_player_11 = player.player_api_id\nmatch.away_player_10 = player.player_api_id\nmatch.away_player_9 = player.player_api_id\nmatch.away_player_8 = player.player_api_id\nmatch.away_player_7 = player.player_api_id\nmatch.away_player_6 = player.player_api_id\nmatch.away_player_5 = player.player_api_id\nmatch.away_player_4 = player.player_api_id\nmatch.away_player_3 = player.player_api_id\nmatch.away_player_2 = player.player_api_id\nmatch.away_player_1 = player.player_api_id\nmatch.home_player_11 = player.player_api_id\nmatch.home_player_10 = player.player_api_id\nmatch.home_player_9 = player.player_api_id\nmatch.home_player_8 = player.player_api_id\nmatch.home_player_7 = player.player_api_id\nmatch.home_player_6 = player.player_api_id\nmatch.home_player_5 = player.player_api_id\nmatch.home_player_4 = player.player_api_id\nmatch.home_player_3 = player.player_api_id\nmatch.home_player_2 = player.player_api_id\nmatch.home_player_1 = player.player_api_id\nmatched contents :\nplayer.id ( 180 , 70 )\nplayer_attributes.id ( 180 )\nteam_attributes.id ( 180 )\nteam_attributes.team_fifa_api_id ( 180 )\nWhat is the percentage of players that are under 180 cm who have an overall strength of more than 70?\n", "response": "SELECT cast(count(CASE WHEN player_attributes.overall_rating < 180 AND player_attributes.strength > 70 THEN 1 ELSE NULL END) AS REAL) * 100 / count(player_attributes.player_api_id) FROM player_attributes;\t", "n_examples": 0, "db_id": "european_football_2"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nAre there more in-patient or outpatient who were male? What is the deviation in percentage?\n", "response": "SELECT count(DISTINCT CASE WHEN patient.sex = 'M' THEN patient.id END) AS male , count(DISTINCT CASE WHEN patient.sex = 'F' THEN patient.id END) AS female FROM patient;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhat is the percentage of female patient were born after 1930?\n", "response": "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient WHERE patient.birthday > '1930-01-01';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.admission ( text | values : + , - ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\ntable laboratory , columns = [ laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.pic ( integer | values : 320 , 513 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor patient born between Year 1930 to 1940, how many percent of them were inpatient?\n", "response": "SELECT count(*) FROM patient WHERE patient.birthday BETWEEN '1930-01-01' AND '1940-12-31' AND patient.admission = '+';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.thrombosis ( integer | values : 1 , 0 ) ]\ntable laboratory , columns = [ laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( SLE )\nexamination.diagnosis ( SLE )\nWhat is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?\n", "response": "SELECT count(DISTINCT examination.id) / count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SLE';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.id ( 30609 )\nlaboratory.id ( 30609 )\nWhat is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.\n", "response": "SELECT DISTINCT laboratory.date FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.id = 30609;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) ]\ntable examination , columns = [ examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.id ( 163109 )\nexamination.id ( 163109 )\nState the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.\n", "response": "SELECT patient.sex, patient.birthday, examination.`examination date`, examination.symptoms FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = '163109';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ldh ( integer | comment : lactate dehydrogenase | values : 567 , 579 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nList the patient ID, sex and birthday of patient with LDH beyond normal range.\n", "response": "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh > 500;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable examination , columns = [ examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) , examination.rvvt ( text | comment : measure of degree of coagulation | values : - , + ) , examination.lac ( text | comment : measure of degree of coagulation | values : - , + ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nState the ID and age of patient with positive degree of coagulation.\n", "response": "SELECT patient.id , patient.birthday FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.kct > 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable examination , columns = [ examination.thrombosis ( integer | values : 1 , 0 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( thrombosis )\nFor patients with severe degree of thrombosis, list their ID, sex and dieseas the patient is diagnosed with.\n", "response": "SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.thrombosis = 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable laboratory , columns = [ laboratory.`t-cho` ( integer | comment : total cholesterol | values : 165 , 134 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nList all patients who were born in 1937 whose total cholesterol was beyond the normal range.\n", "response": "SELECT * FROM patient WHERE substr(birthday, 1, 4) = '1937' AND `t-cho` > 165;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.alb ( real | comment : albumin | values : 3.3 , 3.4 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.iga ( integer | values : 145 , 188 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nlaboratory.alb ( 3.5 )\nexamination.`acl igg` ( 3.5 )\nFor patient with albumin level lower than 3.5, list their ID, sex and diagnosis.\n", "response": "SELECT patient.id, patient.sex, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.alb < 3.5;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.`u-pro` ( text | comment : proteinuria | values : - , 0 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.tp ( real | comment : total protein | values : 4.5 , 5.1 ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.thrombosis ( integer | values : 1 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nWhat is the percentage of female patient had total protein not within the normal range?\n", "response": "SELECT sum(iif(patient.sex = 'F', 1, 0)) * 100 / count(patient.id) AS perfemale FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.diagnosis = 'MCTD' AND examination.`examination date` BETWEEN '1997-05-27' AND '1992-12-21';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) ]\ntable laboratory , columns = [ laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.`acl iga` ( 50 )\nFor in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?\n", "response": "SELECT avg(examination.`acl igg`) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE round((strftime('%J', examination.`examination date`) - strftime('%J', patient.birthday)) / 365) > 50;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.admission ( text | values : + , - ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nHow many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON examination.id = laboratory.id WHERE patient.sex = 'F' AND examination.`examination date` = '1997-05-27' AND laboratory.ssb = 'negative';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.admission ( text | values : + , - ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhat was the age of the youngest patient when they initially arrived at the hospital?\n", "response": "SELECT birthday FROM patient ORDER BY birthday LIMIT 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( thrombosis )\nHow many of the patients with the most serious thrombosis cases examined in 1997 are women?\n", "response": "SELECT count(patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`examination date` = '1997-05-27' AND examination.thrombosis = 1 AND patient.sex = 'F';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.tg ( integer | comment : triglyceride | values : 185 , 205 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nWhat is the age gap between the youngest and oldest patient with a normal triglyceride recorded?\n", "response": "SELECT max(patient.birthday) - min(patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg = 185;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) ]\ntable examination , columns = [ examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.thrombosis ( integer | values : 1 , 0 ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhat are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.\n", "response": "SELECT examination.diagnosis FROM examination WHERE examination.`examination date` = ( SELECT min(examination.`examination date`) FROM examination );\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?\n", "response": "SELECT count(DISTINCT patient.sex) FROM patient INNER JOIN examination WHERE patient.sex = 'M' AND examination.`examination date` = '1998-12-31';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\ntable laboratory , columns = [ laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( SjS )\nThe oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?\n", "response": "SELECT min(examination.`examination date`), min(patient.birthday) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'SjS';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ua ( real | comment : uric acid | values : 3.8 , 4.2 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhat is the ratio of male to female patients among all those with abnormal uric acid counts?\n", "response": "SELECT cast(count(CASE WHEN patient.sex = 'M' THEN 1 ELSE NULL END) AS REAL) / count(CASE WHEN patient.sex = 'F' THEN 1 ELSE NULL END) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'RA susp.';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\ntable patient , columns = [ patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\ntable laboratory , columns = [ laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nHow many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?\n", "response": "SELECT count(DISTINCT patient.id) FROM patient LEFT JOIN examination ON patient.id = examination.id WHERE examination.id IS NULL;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) ]\ntable laboratory , columns = [ laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nHow many underage patients were examined during the course of the three-year period from 1990 to 1993?\n", "response": "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`examination date` BETWEEN '1990-01-01' AND '1993-12-31';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.`t-bil` ( real | comment : total bilirubin | values : 0.3 , 0.2 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nHow many male patients have elevated total bilirubin count?\n", "response": "SELECT count(DISTINCT patients.patient) FROM patients INNER JOIN laboratory ON patients.patient = laboratory.id WHERE laboratory.`t-bil` > 0 AND patients.gender = 'M';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhat is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?\n", "response": "SELECT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.date BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY examination.diagnosis ORDER BY count(examination.diagnosis) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhat is the average age of patients examined in the laboratory for the October of the year 1991?\n", "response": "SELECT avg(patient.birthday) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` = '1991-10-01';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) ]\ntable laboratory , columns = [ laboratory.hgb ( real | comment : hemoglobin | values : 6.4 , 6.7 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nHow old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?\n", "response": "SELECT patient.birthday, examination.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON laboratory.id = examination.id ORDER BY laboratory.hgb DESC LIMIT 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.id ( 3605340 )\nWhat was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?\n", "response": "SELECT examination.`acl iga` FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.id = 3605340 AND examination.`examination date` = '1996-12-2';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.`t-cho` ( integer | comment : total cholesterol | values : 165 , 134 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nlaboratory.id ( 2927464 )\nexamination.diagnosis ( Normal )\npatient.id ( 2927464 )\nWas the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?\n", "response": "SELECT examination.diagnosis = 'Normal' FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.id = 2927464 AND examination.`examination date` = '1995-09-04';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( AORTITIS )\nexamination.diagnosis ( Aortitis )\nWhat was the gender of the first AORTITIS diagnosed patient?\n", "response": "SELECT sex FROM patient WHERE diagnosis = 'AORTITIS' ORDER BY `first date` LIMIT 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.id ( integer | values : 14872 , 48473 ) ]\ntable laboratory , columns = [ laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( SLE )\npatient.diagnosis ( SLE )\nFor the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?\n", "response": "SELECT examination.`acl iga` FROM examination WHERE examination.`examination date` = '1994-02-19' AND examination.id = ( SELECT examination.id FROM examination WHERE examination.`examination date` = '1993-11-12' );\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) , laboratory.gpt ( integer | comment : alt glutamic pyruvic transaminase | values : 36 , 31 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nlaboratory.got ( 9 )\nlaboratory.gpt ( 9 )\nWas the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12?\n", "response": "SELECT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` = '1992-06-12';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ua ( real | comment : uric acid | values : 3.8 , 4.2 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nlaboratory.ua ( 8.4 )\nlaboratory.date ( 1991-10-21 )\nexamination.`acl igm` ( 8.4 )\nFor the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?\n", "response": "SELECT strftime('%Y', patient.birthday) - strftime('%Y', examination.`examination date`) AS age FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.admission = '+' AND examination.symptoms = 'URIC ACID' AND examination.`acl igm` = 8.4;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( SJS )\nexamination.diagnosis ( SjS )\nFor the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995?\n", "response": "SELECT sum(laboratory.ssa) , sum(laboratory.ssb) , sum(laboratory.rnp) , sum(laboratory.sm) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON examination.id = laboratory.id WHERE patient.`first date` = '1991-09-11' AND examination.diagnosis = 'SJS' AND strftime('%Y', laboratory.date) = '1995';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( SLE )\nexamination.diagnosis ( SLE )\nFor the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time?\n", "response": "SELECT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.`first date` = '1997-01-27';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) ]\ntable laboratory , columns = [ laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?\n", "response": "SELECT examination.symptoms FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.birthday = '1959-03-01' AND examination.`examination date` = '1993-09-27';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable laboratory , columns = [ laboratory.`t-cho` ( integer | comment : total cholesterol | values : 165 , 134 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?\n", "response": "SELECT 100.0 - (SELECT SUM(centromea) FROM laboratory WHERE date BETWEEN '1981-11-01' AND '1981-12-31') / (SELECT SUM(centromea) FROM laboratory WHERE date BETWEEN '1980-11-01' AND '1980-12-31') FROM patient WHERE birthday = '1959-02-18';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.thrombosis ( integer | values : 1 , 0 ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Behcet )\npatient.diagnosis ( BEHCET )\nLists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.\n", "response": "SELECT DISTINCT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'Behcet' AND strftime('%Y', examination.`examination date`) = '197' AND strftime('%m', examination.`examination date`) = '01' AND strftime('%d', examination.`examination date`) = '01' AND strftime('%Y', examination.`examination date`) = '1997' AND strftime('%m', examination.`examination date`) = '12' AND strftime('%d', examination.`examination date`) = '31';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.gpt ( integer | comment : alt glutamic pyruvic transaminase | values : 36 , 31 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.tp ( real | comment : total protein | values : 4.5 , 5.1 ) , laboratory.alb ( real | comment : albumin | values : 3.3 , 3.4 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nlaboratory.rnp ( 4 )\nlaboratory.gpt ( 30 , 4 )\nexamination.`acl iga` ( 30 , 4 )\nHow many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.\n", "response": "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` BETWEEN '1987-07-06' AND '1996-01-31' AND laboratory.gpt > 30 AND laboratory.alb < 4;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) ]\ntable laboratory , columns = [ laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nHow many female patients born in 1964 were admitted to the hospital? List them by ID.\n", "response": "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1964' AND patient.sex = 'F';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\ntable laboratory , columns = [ laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.thrombosis ( 2 )\nexamination.`acl iga` ( 2 )\nlaboratory.ssb ( 2 )\npatient.diagnosis ( ANA )\nWhat number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`acl iga` = 2 AND examination.`ana pattern` = 'S' AND examination.`acl igm` > 0.2;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.`u-pro` ( text | comment : proteinuria | values : - , 0 ) , laboratory.ua ( real | comment : uric acid | values : 3.8 , 4.2 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.igg ( integer | values : 339 , 771 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nWhat percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?\n", "response": "SELECT count(DISTINCT CASE WHEN laboratory.`u-pro` = '0' THEN patient.id END) / count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.`u-pro` = '0' AND laboratory.ua < 4.2;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( BEHCET )\nexamination.diagnosis ( Behcet )\nWhat percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?\n", "response": "SELECT cast(count(CASE WHEN patient.sex = 'M' THEN patient.id END) AS REAL) * 100 / count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.`first date` = '1981-01-01' AND examination.diagnosis = 'BEHCET';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.`t-bil` ( real | comment : total bilirubin | values : 0.3 , 0.2 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nList all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.\n", "response": "SELECT DISTINCT patient.description FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON examination.id = laboratory.id WHERE strftime('%Y', laboratory.date) = '1991' AND laboratory.`t-bil` BETWEEN 0.2 AND 0.3;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.admission ( text | values : + , - ) ]\ntable examination , columns = [ examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.id ( integer | values : 14872 , 48473 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.`ana pattern` ( P , p )\nExcluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?\n", "response": "SELECT count(patient.sex) FROM patient WHERE patient.sex = 'F' AND patient.birthday BETWEEN '1980-01-01' AND '1989-12-31';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.crp ( text | comment : c-reactive protein | values : 0.6 , 2.7 ) , laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.igg ( integer | values : 339 , 771 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( PSS )\nlaboratory.crp ( 2+ , 1 )\nlaboratory.rnp ( 1 )\nlaboratory.ssa ( 1 )\nexamination.diagnosis ( PSS )\nexamination.`acl iga` ( 1 )\nWhat sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123?\n", "response": "SELECT patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.diagnosis = 'PSS' AND laboratory.crp = 2 AND laboratory.rnp = 1 AND laboratory.ssa = 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.alb ( real | comment : albumin | values : 3.3 , 3.4 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.plt ( integer | comment : platelet | values : 227 , 242 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.id ( integer | values : 14872 , 48473 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( SLE )\nlaboratory.plt ( 400 )\nexamination.diagnosis ( SLE )\nWhat is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?\n", "response": "SELECT avg(laboratory.alb) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.plt > 400 AND examination.diagnosis = 'SLE' AND patient.sex = 'F';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable examination , columns = [ examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( SLE )\nexamination.diagnosis ( SLE )\nWhat is the most common sign of patients with SLE disease?\n", "response": "SELECT examination.symptoms FROM examination WHERE examination.diagnosis = 'SLE' GROUP BY examination.symptoms ORDER BY count(examination.symptoms) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.id ( integer | values : 14872 , 48473 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.id ( 48473 )\nlaboratory.id ( 48473 )\nexamination.id ( 48473 )\nWhen was the medical information on patient number 48473 first documented, and what disease did she have?\n", "response": "SELECT patient.`first date`, patient.diagnosis FROM patient WHERE patient.id = 48473;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( APS )\nexamination.diagnosis ( APS )\nHow many female patients were given an APS diagnosis?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.sex = 'F' AND examination.diagnosis = 'APS';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.`u-pro` ( text | comment : proteinuria | values : - , 0 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.tp ( real | comment : total protein | values : 4.5 , 5.1 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nHow many patients who underwent testing in 1997 had protein levels outside the normal range?\n", "response": "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.`examination date` = '1997-05-27' AND laboratory.`u-pro` > '4.5';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) ]\ntable laboratory , columns = [ laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( SLE )\nexamination.diagnosis ( SLE )\nexamination.symptoms ( thrombocytopenia )\nWhat proportion of patients who had signs of thrombocytopenia had SLE diagnosed?\n", "response": "SELECT cast(sum(examination.thrombosis = 1) AS REAL) * 100 / count(examination.id) FROM examination WHERE examination.diagnosis = 'SLE';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ra ( text | comment : rhuematoid factor | values : - , + ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( RA )\nexamination.diagnosis ( RA )\nWhat percentage of patients who were born in 1980 and were diagnosed with RA are women?\n", "response": "SELECT cast(count(CASE WHEN patient.sex = 'F' AND patient.birthday = '1980-01-01' AND patient.diagnosis = 'RA' THEN patient.id ELSE NULL END) AS REAL) * 100 / count(patient.id) FROM patient WHERE patient.sex = 'F' AND patient.birthday = '1980-01-01' AND patient.diagnosis = 'RA';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( BEHCET )\nexamination.diagnosis ( Behcet )\nHow many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with BEHCET disease did not stay in the hospital for treatment?\n", "response": "SELECT count(DISTINCT patients.patient) FROM patients INNER JOIN examination ON patients.patient = examination.id WHERE patients.sex = 'M' AND examination.`examination date` BETWEEN '1995-01-01' AND '1997-12-31' AND examination.diagnosis != 'BEHCET';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.wbc ( real | comment : white blood cell | values : 5.0 , 10.4 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nlaboratory.wbc ( 3.5 )\nexamination.`acl igg` ( 3.5 )\nHow many patients who were female got white blood cells that were below 3.5?\n", "response": "SELECT count(DISTINCT patient.sex) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'F' AND laboratory.wbc < 3.5;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\ntable laboratory , columns = [ laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.id ( 821298 )\nexamination.id ( 821298 )\nHow long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?\n", "response": "SELECT strftime('%J', examination.`examination date`) - strftime('%J', patient.`first date`) AS time FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.id = 821298;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ua ( real | comment : uric acid | values : 3.8 , 4.2 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.igg ( integer | values : 339 , 771 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nlaboratory.id ( 57266 )\npatient.id ( 57266 )\nexamination.diagnosis ( Normal )\nWas the patient with the number 57266's uric acid within a normal range?\n", "response": "SELECT CASE WHEN laboratory.ua >= 3.8 AND laboratory.ua <= 4.2 THEN 'Yes' ELSE 'No' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.id = 57266;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.gpt ( integer | comment : alt glutamic pyruvic transaminase | values : 36 , 31 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nlaboratory.id ( 48473 )\nexamination.id ( 48473 )\npatient.id ( 48473 )\nWhen is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.\n", "response": "SELECT examination.`examination date`, examination.`acl igg`, examination.`acl igm` FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.got > 30;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) ]\ntable laboratory , columns = [ laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nList all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.\n", "response": "SELECT * FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON laboratory.id = examination.id WHERE examination.`acl igg` BETWEEN 1.3 AND 4.3 AND strftime('%Y', examination.`examination date`) = '1994';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.gpt ( integer | comment : alt glutamic pyruvic transaminase | values : 36 , 31 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nProvide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.\n", "response": "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON laboratory.id = examination.id WHERE patient.sex = 'M' AND laboratory.gpt > 30 AND laboratory.gpt < 40;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) , laboratory.gpt ( integer | comment : alt glutamic pyruvic transaminase | values : 36 , 31 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nPlease provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.\n", "response": "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`dna-ii` > 30;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ldh ( integer | comment : lactate dehydrogenase | values : 567 , 579 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) , examination.rvvt ( text | comment : measure of degree of coagulation | values : - , + ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nWhat is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.\n", "response": "SELECT avg(cast(replace(substr(laboratory.ldh, 4), ',', '') AS REAL)) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'Normal' AND laboratory.sm = '1' AND laboratory.dna = '41.9';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ldh ( integer | comment : lactate dehydrogenase | values : 567 , 579 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nProvide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.\n", "response": "SELECT patient.id, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh BETWEEN 100 AND 300;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.alp ( integer | comment : alkaliphophatase | values : 166 , 154 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable patient , columns = [ patient.admission ( text | values : + , - ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nFor patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient?\n", "response": "SELECT DISTINCT patient.admission FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.alp BETWEEN 154 AND 166;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.alp ( integer | comment : alkaliphophatase | values : 166 , 154 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nName the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?\n", "response": "SELECT id FROM patient WHERE birthday = '1982-04-01' AND sex = 'M' AND description = '1994-02-14';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.tp ( real | comment : total protein | values : 4.5 , 5.1 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`u-pro` ( text | comment : proteinuria | values : - , 0 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nList ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.\n", "response": "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 5.1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.tp ( real | comment : total protein | values : 4.5 , 5.1 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.igm ( integer | values : 46 , 132 ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nFor all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.\n", "response": "SELECT max(laboratory.tp) - min(laboratory.tp) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'F';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) ]\ntable laboratory , columns = [ laboratory.alb ( real | comment : albumin | values : 3.3 , 3.4 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nSort in descending order all patients by birthday for male patient with albumin not within range.\n", "response": "SELECT * FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON laboratory.id = examination.id WHERE patient.sex = 'M' AND laboratory.alb NOT BETWEEN 3.3 AND 3.4 ORDER BY patient.birthday DESC;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) ]\ntable laboratory , columns = [ laboratory.alb ( real | comment : albumin | values : 3.3 , 3.4 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nFor all patient born in 1982, state if their albumin is within normal range.\n", "response": "SELECT CASE WHEN laboratory.alb >= 3.3 AND laboratory.alb <= 3.4 THEN 'within normal range' ELSE 'not within normal range' END FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE strftime('%Y', patient.birthday) = '1982';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ua ( real | comment : uric acid | values : 3.8 , 4.2 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`u-pro` ( text | comment : proteinuria | values : - , 0 ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nWhat is the percentage of the female patient whose uric acid (UA) beyond the normal range?\n", "response": "SELECT cast(sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.sex) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ua > 4.2;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ua ( real | comment : uric acid | values : 3.8 , 4.2 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nFor all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?\n", "response": "SELECT avg(laboratory.ua) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.diagnosis = 'RA susp.';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.un ( integer | comment : urea nitrogen | values : 29 , 36 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nProvide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?\n", "response": "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.un BETWEEN 29 AND 36;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ra ( text | comment : rhuematoid factor | values : - , + ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) , examination.rvvt ( text | comment : measure of degree of coagulation | values : - , + ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( RA )\nexamination.diagnosis ( Normal , RA )\nProvide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index.\n", "response": "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'RA' AND examination.symptoms = 'Normal';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.cre ( real | comment : creatinine | values : 0.8 , 0.9 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nHow many male patients are are with creatinine index out of the normal range?\n", "response": "SELECT count(DISTINCT patient.sex) FROM patient INNER JOIN examination WHERE patient.sex = 'M' AND examination.`acl igm` > 4.6 AND examination.`acl igg` < 1.3;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.cre ( real | comment : creatinine | values : 0.8 , 0.9 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nAre there more male patients with creatinine not within the normal range than female? True or False?\n", "response": "SELECT count(DISTINCT CASE WHEN patient.sex = 'M' THEN patient.id END) AS male , count(DISTINCT CASE WHEN patient.sex = 'F' THEN patient.id END) AS female FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cre NOT BETWEEN 0.8 AND 0.9;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.`t-bil` ( real | comment : total bilirubin | values : 0.3 , 0.2 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhat is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.\n", "response": "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id GROUP BY patient.id, patient.sex, patient.birthday ORDER BY sum(laboratory.`t-bil`) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.`t-bil` ( real | comment : total bilirubin | values : 0.3 , 0.2 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nList and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.\n", "response": "SELECT patient.sex, sum(laboratory.`t-bil`) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id GROUP BY patient.sex HAVING sum(laboratory.`t-bil`) NOT BETWEEN 0.2 AND 0.3;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) ]\ntable laboratory , columns = [ laboratory.`t-cho` ( integer | comment : total cholesterol | values : 165 , 134 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.lac ( text | comment : measure of degree of coagulation | values : - , + ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWho is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.\n", "response": "SELECT patient.id, laboratory.`t-cho` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id ORDER BY laboratory.`t-cho` DESC LIMIT 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) ]\ntable laboratory , columns = [ laboratory.`t-cho` ( integer | comment : total cholesterol | values : 165 , 134 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhat is the average age of the male patient with high cholesterol?\n", "response": "SELECT avg(patient.birthday) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`t-cho` > 165;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.tg ( integer | comment : triglyceride | values : 185 , 205 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nlaboratory.dna ( 100 )\nexamination.diagnosis ( Normal )\nProvide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?\n", "response": "SELECT patient.id, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 100 AND patient.diagnosis = 'Normal';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) ]\ntable laboratory , columns = [ laboratory.tg ( integer | comment : triglyceride | values : 185 , 205 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.thrombosis ( integer | values : 1 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nFor all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?\n", "response": "SELECT count(id) FROM laboratory WHERE tg > 200;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.cpk ( integer | comment : creatinine phosphokinase | values : 9 , 10 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nList all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids.\n", "response": "SELECT DISTINCT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cpk BETWEEN 9 AND 10 AND examination.diagnosis = 'Normal';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.cpk ( integer | comment : creatinine phosphokinase | values : 9 , 10 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nFor patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?\n", "response": "SELECT count(patient.sex) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', patient.birthday) = '1936' AND patient.sex = 'M' AND laboratory.cpk > 9;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.glu ( integer | comment : blood glucose | values : 88 , 134 ) , laboratory.`t-cho` ( integer | comment : total cholesterol | values : 165 , 134 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nProvide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.\n", "response": "SELECT patient.id, patient.sex, strftime('%Y', patient.birthday) - strftime('%Y', patient.description) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu NOT BETWEEN 88 AND 134 AND laboratory.`t-cho` BETWEEN 165 AND 134;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.glu ( integer | comment : blood glucose | values : 88 , 134 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nList each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.\n", "response": "SELECT patient.id , laboratory.glu FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.date BETWEEN '1991-09-11' AND '1991-09-17' AND laboratory.glu BETWEEN 88 AND 134;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) ]\ntable laboratory , columns = [ laboratory.wbc ( real | comment : white blood cell | values : 5.0 , 10.4 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nList the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order.\n", "response": "SELECT patient.id, patient.sex, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.wbc < 5 GROUP BY patient.sex, patient.birthday ORDER BY patient.birthday ASC;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) ]\ntable laboratory , columns = [ laboratory.rbc ( real | comment : red blood cell | values : 2.6 , 2.9 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.thrombosis ( integer | values : 1 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhat are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.\n", "response": "SELECT patient.id, patient.birthday, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc < 2.6;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.rbc ( real | comment : red blood cell | values : 2.6 , 2.9 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital.\n", "response": "SELECT sum(CASE WHEN patient.sex = 'F' THEN 1 ELSE 0 END), sum(CASE WHEN patient.admission = '+' THEN 1 ELSE 0 END), sum(CASE WHEN patient.admission = '-' THEN 1 ELSE 0 END) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE round((strftime('%J', examination.`examination date`) - strftime('%J', patient.birthday)) / 365) > 50;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.hgb ( real | comment : hemoglobin | values : 6.4 , 6.7 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nAmong all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.\n", "response": "SELECT patient.id, patient.sex FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.hgb < 6.4;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.hgb ( real | comment : hemoglobin | values : 6.4 , 6.7 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( SLE )\nexamination.diagnosis ( Normal , SLE )\nAmong the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.\n", "response": "SELECT patient.id, patient.sex FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'SLE' ORDER BY patient.birthday DESC LIMIT 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) ]\ntable laboratory , columns = [ laboratory.hct ( real | comment : hematoclit | values : 20.3 , 21.6 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nName the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.\n", "response": "SELECT patient.id, strftime('%Y', examination.`examination date`) - strftime('%Y', patient.birthday) AS age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON laboratory.id = examination.id WHERE laboratory.hct > 20.3 AND examination.`acl igg` > 4.3;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.hct ( real | comment : hematoclit | values : 20.3 , 21.6 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nFrom laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range.\n", "response": "SELECT avg(laboratory.hct) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE strftime('%Y', examination.`examination date`) = '1991' AND laboratory.hct < 20.3;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.plt ( integer | comment : platelet | values : 227 , 242 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.plt < 200;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) ]\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.plt ( integer | comment : platelet | values : 227 , 242 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nlaboratory.plt ( 50 )\nFor laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.\n", "response": "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE strftime('%Y', laboratory.date) = '1984' AND laboratory.plt < 50;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable laboratory , columns = [ laboratory.pt ( real | comment : prothrombin time | values : 11.3 , 12.0 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?\n", "response": "SELECT cast(sum(CASE WHEN patient.sex = 'F' AND patient.birthday < '1955-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / count(patient.id) FROM patient WHERE patient.sex = 'F' AND patient.birthday < '1955-01-01';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable laboratory , columns = [ laboratory.pt ( real | comment : prothrombin time | values : 11.3 , 12.0 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nList all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal.\n", "response": "SELECT DISTINCT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` > '1992-01-01' AND examination.symptoms = 'PT' AND examination.diagnosis = 'Normal';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\ntable laboratory , columns = [ laboratory.aptt ( integer | comment : activated partial prothrombin time | values : 108 , 84 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?\n", "response": "SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE strftime('%Y', examination.`examination date`) = '1997' AND laboratory.centromea = 'negative';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.thrombosis ( integer | values : 1 , 0 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\ntable laboratory , columns = [ laboratory.aptt ( integer | comment : activated partial prothrombin time | values : 108 , 84 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( thrombosis )\nFor the patients with an abnormal activated partial prothrom bin time, how many of them have a mild thrombosis?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.aptt < 108 AND patient.diagnosis = 'RA susp.' AND patient.sex = 'F';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.fg ( real | comment : fibrinogen | values : 27.0 , 38.6 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.wbc ( real | comment : white blood cell | values : 5.0 , 10.4 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nAmong the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?\n", "response": "SELECT count(DISTINCT examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND patient.race = 'white' AND laboratory.dna = 'anti-dna' AND examination.symptoms = 'AMI';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.fg ( real | comment : fibrinogen | values : 27.0 , 38.6 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.thrombosis ( integer | values : 1 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nHow many patients born after 1980/1/1 have an abnormal fibrinogen level?\n", "response": "SELECT count(*) FROM patient WHERE birthday > '1980-01-01' AND `dna-ii` < 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.`u-pro` ( text | comment : proteinuria | values : - , 0 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nPlease list the disease names of the patients that have a proteinuria level higher than normal.\n", "response": "SELECT DISTINCT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.`u-pro` > 'normal';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.`u-pro` ( text | comment : proteinuria | values : - , 0 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( SLE )\nexamination.diagnosis ( Normal , SLE )\nWhich patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.\n", "response": "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON laboratory.id = examination.id WHERE examination.diagnosis = 'SLE' AND laboratory.`u-pro` = '0';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.igg ( integer | values : 339 , 771 ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) ]\ntable examination , columns = [ examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.symptoms ( Abortion , abortion )\nexamination.diagnosis ( abortion , Normal )\nHow many patients with an Ig G lower than normal has the symptom of abortion?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`acl igg` < 'normal' AND examination.symptoms = 'abortion';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.igg ( integer | values : 339 , 771 ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.igm ( integer | values : 46 , 132 ) ]\ntable examination , columns = [ examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nAmong the patients with a normal Ig G level, how many of them have symptoms?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'Normal' AND examination.symptoms = 'AMI';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.iga ( integer | values : 145 , 188 ) , laboratory.igg ( integer | values : 339 , 771 ) , laboratory.igm ( integer | values : 46 , 132 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nFor the patient who has the highest Ig A within the normal range, what is his or her diagnosis?\n", "response": "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.iga = ( SELECT max(iga) FROM laboratory WHERE patient.diagnosis = 'Normal' );\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.admission ( text | values : + , - ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) ]\ntable laboratory , columns = [ laboratory.igg ( integer | values : 339 , 771 ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nHow many patients with a normal Ig A level came to the hospital after 1990/1/1?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE strftime('%Y', patient.`first date`) = '1990' AND examination.`acl iga` = 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.igg ( integer | values : 339 , 771 ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.igm ( integer | values : 46 , 132 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.id ( integer | values : 14872 , 48473 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?\n", "response": "SELECT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.`acl igm` = 1.6 GROUP BY examination.diagnosis ORDER BY count(examination.diagnosis) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.crp ( text | comment : c-reactive protein | values : 0.6 , 2.7 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.`u-pro` ( text | comment : proteinuria | values : - , 0 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nHow many patients with a normal C-reactive protein don't have their data recorded?\n", "response": "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.crp IS NULL;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.crp ( text | comment : c-reactive protein | values : 0.6 , 2.7 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.`u-pro` ( text | comment : proteinuria | values : - , 0 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nlaboratory.dna ( 18 )\nexamination.`acl iga` ( 18 )\nAmong the patients whose C-reactive protein level is abnormal, how many of them aren't 18 yet?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.crp < 18;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ra ( text | comment : rhuematoid factor | values : - , + ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) , examination.rvvt ( text | comment : measure of degree of coagulation | values : - , + ) , examination.lac ( text | comment : measure of degree of coagulation | values : - , + ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nHow many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation?\n", "response": "SELECT count(*) FROM examination WHERE examination.diagnosis = 'MCTD' AND examination.`acl iga` > 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ra ( text | comment : rhuematoid factor | values : - , + ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nPlease list the diseases of the patients born after 1995-1-1 and have a normal Rhuematoid Factor.\n", "response": "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.birthday > '1995-01-01' AND examination.diagnosis = 'RA susp.';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) ]\ntable laboratory , columns = [ laboratory.rf ( text | comment : raha | values : <20.5 , <20.8 ) , laboratory.ra ( text | comment : rhuematoid factor | values : - , + ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nPlease list the ID of the patient whose RF is normal and who is older than 60.\n", "response": "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rf = 'normal' AND patient.birthday > '1960-01-01';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.rf ( text | comment : raha | values : <20.5 , <20.8 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ra ( text | comment : rhuematoid factor | values : - , + ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.thrombosis ( integer | values : 1 , 0 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( thrombosis , Normal )\nHow many patients with a normal RF don't have thrombosis?\n", "response": "SELECT count(examination.thrombosis) FROM examination WHERE examination.diagnosis = 'Normal' AND examination.rf < 20.5;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.id ( integer | values : 14872 , 48473 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\ntable laboratory , columns = [ laboratory.c3 ( integer | comment : complement 3 | values : 30 , 82 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( ANA )\nHow many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination?\n", "response": "SELECT count(*) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.`ana pattern` = 'P';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.hct ( real | comment : hematoclit | values : 20.3 , 21.6 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.iga ( integer | values : 145 , 188 ) ]\ntable examination , columns = [ examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nAmong the patients whose level of Hematoclit isn't normal, which patient has the highest anti-Cardiolipin antibody concentration? Please list his or her ID.\n", "response": "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`acl iga` = ( SELECT max(examination.`acl iga`) FROM examination WHERE examination.diagnosis = 'MCTD' );\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.thrombosis ( integer | values : 1 , 0 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\ntable laboratory , columns = [ laboratory.c4 ( integer | comment : complement 4 | values : 14 , 26 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nexamination.`acl iga` ( 4 )\nlaboratory.c4 ( 4 )\nlaboratory.sc170 ( 4 )\nAmong the patients have blood clots in veins, how many of them have a normal level of complement 4?\n", "response": "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.diagnosis = 'RA susp.' AND laboratory.c4 = 4;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.admission ( text | values : + , - ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.`u-pro` ( text | comment : proteinuria | values : - , 0 ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nHow many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?\n", "response": "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id WHERE laboratory.rnp = 0 AND examination.diagnosis = 'Normal' AND patient.admission = '+';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.diagnosis ( text | values : RA susp. , PSS ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.rnp ( text | comment : anti-ribonuclear protein | values : 0 , 1 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhich is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth.\n", "response": "SELECT birthday FROM patient ORDER BY birthday DESC LIMIT 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.thrombosis ( integer | values : 1 , 0 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( thrombosis , Normal )\nAmong the patients with normal anti-SM, how many of them have the most severe degree of thrombosis?\n", "response": "SELECT count(DISTINCT patient.id) FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.diagnosis = 'Normal' AND examination.thrombosis = 1;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.\n", "response": "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.sm = 'negative' ORDER BY patient.birthday DESC LIMIT 3;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nPlease list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.\n", "response": "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`examination date` > '1997-01-01' AND examination.`acl igg` = 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.igg ( integer | values : 339 , 771 ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nAmong the patients who has a normal anti-scl70, how many of them are male and have the symptom of vertigo?\n", "response": "SELECT count(*) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`acl iga` = 0 AND examination.symptoms = 'vertigo' AND patient.sex = 'M';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) ]\ntable patient , columns = [ patient.admission ( text | values : + , - ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\ntable examination , columns = [ examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nHow many patients with a normal anti-SSA came to the hospital before 1990?\n", "response": "SELECT count(patient.id) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE laboratory.ssa = 0 AND patient.`first date` < '1990-01-01';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) ]\ntable patient , columns = [ patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\ntable examination , columns = [ examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhich patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.\n", "response": "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ssa = 'negative';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.igg ( integer | values : 339 , 771 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal , SLE )\npatient.diagnosis ( SLE )\nHow many patients have a normal anti-SSB and are diagnosed with SLE in the examination?\n", "response": "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.ssa = 'negative' AND examination.diagnosis = 'SLE';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.iga ( integer | values : 145 , 188 ) ]\ntable examination , columns = [ examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?\n", "response": "SELECT count(DISTINCT examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.ssb = 0 AND examination.symptoms = 'AMI';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nAmong the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?\n", "response": "SELECT sum(CASE WHEN patients.gender = 'F' THEN 1 ELSE 0 END), sum(CASE WHEN patients.gender = 'M' THEN 1 ELSE 0 END) FROM patients INNER JOIN laboratory ON patients.patient = laboratory.id WHERE laboratory.centromea = 0 AND laboratory.ssb = 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.igg ( integer | values : 339 , 771 ) , laboratory.igm ( integer | values : 46 , 132 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.id ( integer | values : 14872 , 48473 ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.\n", "response": "SELECT DISTINCT examination.diagnosis FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.`dna-ii` < 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.igg ( integer | values : 339 , 771 ) , laboratory.igm ( integer | values : 46 , 132 ) ]\ntable examination , columns = [ examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nHow many patients have a normal anti-DNA level, yet their data are not recorded.\n", "response": "SELECT count(*) FROM LABORATORY WHERE dna IS NULL OR dna = '';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.igg ( integer | values : 339 , 771 ) , laboratory.igm ( integer | values : 46 , 132 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable patient , columns = [ patient.admission ( text | values : + , - ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nOf the patients with an abnormal level of anti-DNA-II, how many of them admitted to the hospital?\n", "response": "SELECT count(DISTINCT patient.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.`acl iga` = 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( SLE )\npatient.diagnosis ( SLE )\nWhat is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?\n", "response": "SELECT cast(sum(CASE WHEN laboratory.ssa = 'negative' THEN 1 ELSE 0 END) AS REAL) * 100 / count(laboratory.id) FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.diagnosis = 'SLE';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nHow many male patients have their glutamic oxaloacetic transaminase in the normal range?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got = 34 AND patient.sex = 'M';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nAmong the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?\n", "response": "SELECT patient.`first date` FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got = 34;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) , laboratory.gpt ( integer | comment : alt glutamic pyruvic transaminase | values : 36 , 31 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nPlease list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.\n", "response": "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE `dna-ii` = ( SELECT max(`dna-ii`) FROM laboratory WHERE `dna-ii` BETWEEN 36 AND 39 ) ORDER BY patient.birthday DESC LIMIT 3;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) , laboratory.gpt ( integer | comment : alt glutamic pyruvic transaminase | values : 36 , 31 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nFor the patients with the normal glutamic pylvic transaminase level, how many of them are male?\n", "response": "SELECT count(patient.sex) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`acl igg` = 4.3 AND examination.`acl igm` = 4.6 AND examination.`acl iga` = 3;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ldh ( integer | comment : lactate dehydrogenase | values : 567 , 579 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.got ( integer | comment : ast glutamic oxaloacetic transaminase | values : 34 , 29 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nFor the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?\n", "response": "SELECT patient.`first date`, laboratory.ldh FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.ldh = ( SELECT max(ldh) FROM laboratory WHERE description = 'Lactate dehydrogenase' );\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ldh ( integer | comment : lactate dehydrogenase | values : 567 , 579 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.`first date` ( date | values : 1993-02-10 , 1973-01-01 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhen is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.\n", "response": "SELECT examination.`examination date` FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.ldh = ( SELECT max(ldh) FROM laboratory );\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.admission ( text | values : + , - ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.alp ( integer | comment : alkaliphophatase | values : 166 , 154 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital?\n", "response": "SELECT count(examination.id) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.`acl iga` > 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.alp ( integer | comment : alkaliphophatase | values : 166 , 154 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nAmong the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON laboratory.id = examination.id WHERE examination.`acl igg` = 1.3 AND examination.diagnosis = 'MCTD';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.`u-pro` ( text | comment : proteinuria | values : - , 0 ) , laboratory.tp ( real | comment : total protein | values : 4.5 , 5.1 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.thrombosis ( integer | values : 1 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nPlease list the diagnosis of the patients whose total protein is lower than normal.\n", "response": "SELECT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tp < 4.5;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.tp ( real | comment : total protein | values : 4.5 , 5.1 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( SJS )\nexamination.diagnosis ( Normal , SjS )\nFor the patients who are diagnosed with SJS, how many of them have a normal level of total protein?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'SJS' AND examination.symptoms = 'Normal';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.alb ( real | comment : albumin | values : 3.3 , 3.4 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.date ( date | primary key | values : 1991-09-11 , 1991-09-17 ) ]\ntable examination , columns = [ examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nWhat is the examination date of the patient whose albumin is the highest in the normal range?\n", "response": "SELECT examination.`examination date` FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.alb = ( SELECT max(alb) FROM laboratory ) AND examination.diagnosis = 'Normal';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.alb ( real | comment : albumin | values : 3.3 , 3.4 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.tp ( real | comment : total protein | values : 4.5 , 5.1 ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nHow many male patients have a normal level of both albumin and total protein?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.alb > 3.3 AND laboratory.tp > 4.5;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.ua ( real | comment : uric acid | values : 3.8 , 4.2 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nWhat is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range?\n", "response": "SELECT examination.`acl iga` FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'F' AND examination.`acl iga` = (SELECT max(examination.`acl iga`) FROM examination WHERE patient.sex = 'F' AND examination.diagnosis = 'Normal');\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.cre ( real | comment : creatinine | values : 0.8 , 0.9 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable examination , columns = [ examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhat is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level?\n", "response": "SELECT examination.`acl iga` FROM examination INNER JOIN patient ON examination.id = patient.id WHERE patient.sex = 'M' AND examination.`acl iga` = ( SELECT max(examination.`acl iga`) FROM examination WHERE patient.sex = 'M' );\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.cre ( real | comment : creatinine | values : 0.8 , 0.9 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.iga ( integer | values : 145 , 188 ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) ]\ntable examination , columns = [ examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nPlease list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest.\n", "response": "SELECT patient.id FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.`acl iga` = 0 AND examination.`acl igg` = ( SELECT MAX(examination.`acl igg`) FROM examination );\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.symptoms ( text | values : AMI , CNS lupus ) ]\ntable laboratory , columns = [ laboratory.`t-bil` ( real | comment : total bilirubin | values : 0.3 , 0.2 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( ANA )\nAmong the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.`t-bil` > 0.3 AND laboratory.centromea = 'negative';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.`t-bil` ( real | comment : total bilirubin | values : 0.3 , 0.2 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable examination , columns = [ examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhat is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?\n", "response": "SELECT examination.`acl iga` FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`ana pattern` = 'P' AND examination.`acl iga` = ( SELECT max(examination.`acl iga`) FROM examination WHERE examination.`ana pattern` = 'P' );\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.`t-cho` ( integer | comment : total cholesterol | values : 165 , 134 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable examination , columns = [ examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) , examination.rvvt ( text | comment : measure of degree of coagulation | values : - , + ) , examination.id ( integer | values : 14872 , 48473 ) , examination.lac ( text | comment : measure of degree of coagulation | values : - , + ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nlaboratory.centromea ( negative )\nlaboratory.sc170 ( negative )\nexamination.diagnosis ( Normal )\nFor the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation?\n", "response": "SELECT count(*) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.`acl iga` < 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable examination , columns = [ examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\ntable laboratory , columns = [ laboratory.`t-cho` ( integer | comment : total cholesterol | values : 165 , 134 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( ANA )\nAmong the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?\n", "response": "SELECT count(*) FROM ( SELECT examination.id FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE examination.`ana pattern` = 'P' GROUP BY examination.id HAVING sum(CASE WHEN examination.`ana pattern` = 'P' THEN 1 ELSE 0 END) > 0 ) t3;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.tg ( integer | comment : triglyceride | values : 185 , 205 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.symptoms ( text | values : AMI , CNS lupus ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.thrombosis ( integer | values : 1 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nAmong the patients with the normal level of triglyceride, how many of them have other symptoms observed?\n", "response": "SELECT count(*) FROM examination INNER JOIN laboratory ON examination.id = laboratory.id WHERE laboratory.tg = 185 AND examination.symptoms = 'AMI';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.tg ( integer | comment : triglyceride | values : 185 , 205 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.id ( integer | values : 14872 , 48473 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nWhat is the disease name of the patient who has the highest level of triglyceride within the normal range?\n", "response": "SELECT examination.diagnosis FROM examination INNER JOIN patient ON examination.id = patient.id WHERE examination.`acl iga` = ( SELECT max(`acl iga`) FROM examination );\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.cpk ( integer | comment : creatinine phosphokinase | values : 9 , 10 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.cre ( real | comment : creatinine | values : 0.8 , 0.9 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.thrombosis ( integer | values : 1 , 0 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( thrombosis )\nPlease list the IDs of the patients with no thrombosis and an abnormal level of creatinine phosphokinase.\n", "response": "SELECT DISTINCT patient.id FROM laboratory INNER JOIN examination ON laboratory.id = examination.id WHERE examination.thrombosis = 0 AND laboratory.cpk < 10;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.cpk ( integer | comment : creatinine phosphokinase | values : 9 , 10 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable examination , columns = [ examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) , examination.id ( integer | values : 14872 , 48473 ) , examination.rvvt ( text | comment : measure of degree of coagulation | values : - , + ) , examination.lac ( text | comment : measure of degree of coagulation | values : - , + ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nFor the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.cpk > 0 AND patient.diagnosis = 'RA susp.' AND patient.admission = '+';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.glu ( integer | comment : blood glucose | values : 88 , 134 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nWhen is the birthday of the oldest patient whose blood glucose is abnormal?\n", "response": "SELECT patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.glu = ( SELECT min(glu) FROM laboratory );\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.glu ( integer | comment : blood glucose | values : 88 , 134 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.admission ( text | values : + , - ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.thrombosis ( integer | values : 1 , 0 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( thrombosis , Normal )\nAmong the patients with a normal blood glucose, how many of them don't have thrombosis?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE examination.diagnosis = 'Normal' AND examination.thrombosis = 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.admission ( text | values : + , - ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.wbc ( real | comment : white blood cell | values : 5.0 , 10.4 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.thrombosis ( integer | values : 1 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nHow many patients accepted to the hospital have a normal level of white blood cells?\n", "response": "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.race = 'white' AND laboratory.wbc > 5.0 AND laboratory.ssa = 'negative' AND laboratory.ssb = 'negative';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.wbc ( real | comment : white blood cell | values : 5.0 , 10.4 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssa ( text | comment : anti-ssa | values : 0 , negative ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl igm` ( real | comment : anti-cardiolipin antibody (igm) | values : 1.6 , 4.6 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( SLE )\nexamination.diagnosis ( Normal , SLE )\nHow many patients diagnosed with SLE have a normal white blood cell level?\n", "response": "SELECT count(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'SLE' AND patient.sex = 'F' AND patient.admission = '+' AND patient.birthday = '1934-02-13' AND examination.symptoms = 'CNS lupus' AND examination.thrombosis = '1' AND examination.`acl igg` = '1.3' AND examination.`acl igm` = '1.6';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.rbc ( real | comment : red blood cell | values : 2.6 , 2.9 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.sex ( text | values : F , M ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.ana ( integer | comment : anti-nucleus antibody | values : 256 , 0 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents : None\nPlease list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.\n", "response": "SELECT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.rbc > 2.6 AND laboratory.ssb < 0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.plt ( integer | comment : platelet | values : 227 , 242 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.sc170 ( text | comment : anti-scl70 | values : 16 , 1 ) ]\ntable examination , columns = [ examination.symptoms ( text | values : AMI , CNS lupus ) , examination.id ( integer | values : 14872 , 48473 ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nAmong the patients who have a normal platelet level, how many of them have other symptoms observed?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.diagnosis = 'RA susp.' AND examination.symptoms = 'AMI';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.diagnosis ( text | values : RA susp. , PSS ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.admission ( text | values : + , - ) , patient.sex ( text | values : F , M ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.id ( integer | values : 14872 , 48473 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) , examination.`acl iga` ( integer | comment : anti-cardiolipin antibody (iga) concentration | values : 0 , 3 ) ]\ntable laboratory , columns = [ laboratory.plt ( integer | comment : platelet | values : 227 , 242 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.sm ( text | comment : anti-sm | values : 0 , 1 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\npatient.diagnosis ( MCTD )\nexamination.diagnosis ( Normal , MCTD )\nPlease list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.\n", "response": "SELECT patient.diagnosis, laboratory.plt FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.plt BETWEEN 227 AND 242 AND patient.diagnosis = 'MCTD';\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable patient , columns = [ patient.sex ( text | values : F , M ) , patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.admission ( text | values : + , - ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable laboratory , columns = [ laboratory.pt ( real | comment : prothrombin time | values : 11.3 , 12.0 ) , laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.aptt ( integer | comment : activated partial prothrombin time | values : 108 , 84 ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable examination , columns = [ examination.id ( integer | values : 14872 , 48473 ) , examination.thrombosis ( integer | values : 1 , 0 ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.`examination date` ( date | values : 1997-05-27 , 1992-12-21 ) , examination.`acl igg` ( real | comment : anti-cardiolipin antibody (igg) | values : 1.3 , 4.3 ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( Normal )\nFor the male patients that have a normal prothrombin time, what is their average prothrombin time?\n", "response": "SELECT cast(avg(laboratory.pt) AS REAL) FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE patient.sex = 'M' AND laboratory.pt IS NOT NULL;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable laboratory , columns = [ laboratory.dna ( text | comment : anti-dna | values : 41.9 , 18 ) , laboratory.pt ( real | comment : prothrombin time | values : 11.3 , 12.0 ) , laboratory.centromea ( text | comment : anti-centromere | values : 0 , negative ) , laboratory.`dna-ii` ( integer | comment : anti-dna ) , laboratory.id ( integer | primary key | values : 27654 , 30609 ) , laboratory.ssb ( text | comment : anti-ssb | values : 0 , negative ) ]\ntable patient , columns = [ patient.id ( integer | primary key | values : 2110 , 11408 ) , patient.diagnosis ( text | values : RA susp. , PSS ) , patient.description ( date | values : 1994-02-14 , 1996-12-01 ) , patient.sex ( text | values : F , M ) , patient.admission ( text | values : + , - ) , patient.birthday ( date | values : 1934-02-13 , 1937-05-02 ) ]\ntable examination , columns = [ examination.thrombosis ( integer | values : 1 , 0 ) , examination.id ( integer | values : 14872 , 48473 ) , examination.diagnosis ( text | values : MCTD, AMI , SLE ) , examination.symptoms ( text | values : AMI , CNS lupus ) , examination.kct ( text | comment : measure of degree of coagulation | values : - , + ) , examination.`ana pattern` ( text | comment : pattern observed in the sheet of ana examination | values : P , P,S ) ]\nforeign keys :\nexamination.id = patient.id\nlaboratory.id = patient.id\nmatched contents :\nexamination.diagnosis ( thrombosis , Normal )\nHow many patients with severe thrombosis have a normal prothrombin time?\n", "response": "SELECT count(patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE examination.thrombosis = 1 AND laboratory.pt = 12.0;\t", "n_examples": 0, "db_id": "thrombosis_prediction"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.department ( text ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.link_to_major = major.major_id\nmatched contents :\nmember.first_name ( Angela )\nmember.last_name ( Sanders )\nWhat's Angela Sanders's major?\n", "response": "SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.college ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.college ( College of Engineering )\nzip_code.city ( Many )\nHow many students in the Student_Club are from the College of Engineering?\n", "response": "SELECT count(member.member_id) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN expense ON attendance.link_to_event = expense.link_to_event INNER JOIN major ON expense.link_to_major = major.major_id WHERE major.college = 'College of Engineering';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.department ( text ) , major.major_name ( text ) , major.college ( text ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.department ( Art and Design Department )\nmajor.major_name ( Art )\nzip_code.city ( Art )\nPlease list the full names of the students in the Student_Club that come from the Art and Design Department.\n", "response": "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Art and Design Department';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable income , columns = [ income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.notes ( text ) , income.source ( text | values : Dues , Fundraising ) , income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nincome.link_to_member = member.member_id\nmatched contents :\nevent.event_name ( Women's Soccer )\nHow many students of the Student_Club have attended the event \"Women's Soccer\"?\n", "response": "SELECT count(attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable major , columns = [ major.college ( text ) , major.department ( text ) , major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nevent.event_name ( Women's Soccer )\nPlease list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".\n", "response": "SELECT member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.t_shirt_size ( text | values : Medium , X-Large ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.t_shirt_size ( Medium )\nevent.event_name ( Women's Soccer )\nzip_code.city ( Many )\nAmong the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?\n", "response": "SELECT count(member.member_id) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable income , columns = [ income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.notes ( text ) , income.source ( text | values : Dues , Fundraising ) , income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nincome.link_to_member = member.member_id\nmatched contents : None\nWhat is the event that has the highest attendance of the students from the Student_Club?\n", "response": "SELECT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.position = 'Student_Club' GROUP BY attendance.link_to_event ORDER BY count(attendance.link_to_member) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) ]\ntable zip_code , columns = [ zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable major , columns = [ major.college ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( Vice President , President )\nWhich college is the vice president of the Student_Club from?\n", "response": "SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.first_name ( Maya )\nmember.last_name ( Mclean )\nzip_code.city ( Mclean )\nPlease list the event names of all the events attended by Maya Mclean.\n", "response": "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable budget , columns = [ budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.event_status ( text | values : Closed , Open ) , budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nmember.first_name ( Sacha )\nmember.last_name ( Harrison )\nHow many events of the Student_Club did Sacha Harrison attend in 2019?\n", "response": "SELECT count(event.event_id) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND event.event_date = '2019-08-20';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) , event.event_name ( text | values : March Meeting ) , event.notes ( text ) , event.location ( text | values : MU 215 ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.first_name ( text | values : Angela , Grant ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.event_status ( text | values : Closed , Open ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.type ( Meeting )\nmember.position ( Member )\nbudget.amount ( 10 )\nAmong the events attended by more than 10 members of the Student_Club, how many of them are meetings?\n", "response": "SELECT count(event.event_id) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.position = 'Member' AND attendance.link_to_member > 10;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.type ( text | values : Meeting , Election ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable budget , columns = [ budget.event_status ( text | values : Closed , Open ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.last_name ( text | values : Sanders , Gilmour ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents :\nbudget.amount ( 20 )\nPlease list the names of all the events of the Student_Club that had an attendance of over 20 students.\n", "response": "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE attendance.attendance > 20;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) , event.notes ( text ) , event.location ( text | values : MU 215 ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable budget , columns = [ budget.event_status ( text | values : Closed , Open ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable income , columns = [ income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.notes ( text ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.source ( text | values : Dues , Fundraising ) , income.amount ( integer | values : 50 , 200 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmatched contents :\nevent.type ( Meeting )\nzip_code.zip_code ( 2020 )\nWhat is the average attendance of meetings in 2020?\n", "response": "SELECT avg(attendance.attendance) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_date = '2020-03-10T12:00:00';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.approved ( text | values : true ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.type ( text | values : Meeting , Election ) , event.event_name ( text | values : March Meeting ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents : None\nWhat is the most expensive item that was spent in support of club events?\n", "response": "SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.spent = ( SELECT max(spent) FROM budget );\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) , major.college ( text ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable event , columns = [ event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) , event.location ( text | values : MU 215 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.major_name ( Environmental Engineering )\nmember.position ( Member )\nzip_code.city ( Many )\nHow many members of the Student_Club have majored Environmental Engineering? \n", "response": "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nmember.position ( Member )\nevent.event_name ( Laugh Out Loud )\nList the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.\n", "response": "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.department ( text ) ]\ntable member , columns = [ member.last_name ( text | values : Sanders , Gilmour ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents : None\nList the last name of all the students who majored Law and Constitutional Studies.  \n", "response": "SELECT member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN expense ON attendance.link_to_event = expense.expense_id INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON expense.link_to_major = major.major_id WHERE major.major_name = 'Law and Constitutional Studies';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) ]\ntable zip_code , columns = [ zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.first_name ( Sherri )\nmember.last_name ( Ramsey )\nzip_code.city ( Ramsey )\nWhat county did Sherri Ramsey grew up?\n", "response": "SELECT county FROM zip_code WHERE short_state = 'NY' AND city = 'Ramsey';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.college ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable income , columns = [ income.notes ( text ) , income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nincome.link_to_member = member.member_id\nmember.link_to_major = major.major_id\nmatched contents :\nmember.last_name ( Hewitt )\nmember.first_name ( Tyler )\nWhat college offers the major that Tyler Hewitt took?\n", "response": "SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.source ( text | values : Dues , Fundraising ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.notes ( text ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\ntable member , columns = [ member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.position ( Vice President , President )\nWhat is the amount of the funds that the Vice President received?\n", "response": "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_name ( text | values : March Meeting ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.event_name ( September Meeting )\nevent.type ( Meeting )\nmember.position ( Member )\nbudget.category ( Food )\nHow much did the Student_Club members spend on food in September Meeting?\n", "response": "SELECT budget.spent FROM budget INNER JOIN attendance ON budget.budget_id = attendance.link_to_budget WHERE attendance.link_to_event = 'rec0Si5cQ4rJRVzd6' AND budget.category = 'Food';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable zip_code , columns = [ zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.type ( text | values : Unique , Standard ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.position ( President )\nWhat city and state did the President of the Student_Club grow up?\n", "response": "SELECT city, state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE position = 'President';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable zip_code , columns = [ zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.position ( Member )\nzip_code.state ( Illinois )\nList the full name of the Student_Club members that grew up in Illinois state.\n", "response": "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.event_name ( September Meeting )\nevent.type ( Meeting )\nmember.position ( Member )\nbudget.category ( Advertisement )\nHow much did the Student_Club members spend on advertisement in September Meeting?\n", "response": "SELECT sum(budget.spent) FROM budget INNER JOIN attendance ON budget.budget_id = attendance.link_to_budget WHERE attendance.link_to_event = 'rec0Si5cQ4rJRVzd6' AND budget.category = 'Advertisement';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.department ( text ) , major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.link_to_major = major.major_id\nmatched contents :\nmember.last_name ( Pierce , Guidi )\nWhat department offers the major that Pierce and Guidi took?\n", "response": "SELECT major.department FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Pierce' AND member.last_name = 'Guidi';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.event_name ( October Speaker )\nWhat is the total budgeted amount for all category in \"October Speaker\" event?\n", "response": "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Speaker';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_name ( text | values : March Meeting ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.event_name ( October Meeting )\nevent.type ( Meeting )\nzip_code.zip_code ( 2019 )\nWas each expense in October Meeting on October 8, 2019 approved?\n", "response": "SELECT CASE WHEN expense.approved = 'true' THEN 'Yes' ELSE 'No' END FROM expense WHERE expense.expense_date = '2019-10-08';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nmember.first_name ( Elijah )\nmember.last_name ( Allen )\nCalculate the total average cost that Elijah Allen spent in the events on September and October.\n", "response": "SELECT sum(budget.spent * budget.amount) / count(event.event_id) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date BETWEEN '2020-03-10T12:00:00' AND '2020-01-14T09:30:00' AND member.first_name = 'Elijah' AND member.last_name = 'Allen';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) , budget.event_status ( text | values : Closed , Open ) ]\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.approved ( text | values : true ) ]\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) , event.notes ( text ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.first_name ( text | values : Angela , Grant ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.notes ( text ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents : None\nCalculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.\n", "response": "SELECT sum(budget.spent) - sum(expense.cost) - sum(income.amount) FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget INNER JOIN income ON expense.link_to_member = income.link_to_member INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Student_Club' AND strftime('%Y', event.event_date) = '2019';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.location ( text | values : MU 215 ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) ]\ntable zip_code , columns = [ zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.event_name ( Spring Budget Review )\nevent.type ( Budget )\nzip_code.city ( Springs )\nGive the location for \"Spring Budget Review\".\n", "response": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) , event.notes ( text ) , event.location ( text | values : MU 215 ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.event_status ( text | values : Closed , Open ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nexpense.expense_description ( Posters )\nzip_code.city ( Cost )\nWhat was the cost for the \"Posters\" on 2019/9/4?\n", "response": "SELECT budget.amount FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters' AND expense.expense_date = '2019-09-04';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.event_status ( text | values : Closed , Open ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents :\nbudget.category ( Food )\nevent.type ( Budget )\nWith the biggest budget for the \"Food\", what was the remaining of it?\n", "response": "SELECT budget.remaining FROM budget WHERE budget.category = 'Food' ORDER BY budget.remaining DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.notes ( text ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) ]\ntable income , columns = [ income.notes ( text ) , income.source ( text | values : Dues , Fundraising ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.amount ( integer | values : 50 , 200 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable budget , columns = [ budget.event_status ( text | values : Closed , Open ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nincome.source ( Fundraising )\nWhat was the notes of the fundraising on 2019/9/14?\n", "response": "SELECT income.notes FROM income WHERE income.date_received = '2019-09-14';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.college ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nzip_code.city ( Many )\nHow many majors are there in \"College of Humanities and Social Sciences\"?\n", "response": "SELECT count(major.major_id) FROM major WHERE major.college = 'College of Humanities and Social Sciences';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.last_name ( Jacobs )\nmember.first_name ( Carlo )\nzip_code.city ( Tell , Carlos , Jacob )\nTell the phone number of \"Carlo Jacobs\".\n", "response": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.zip ( integer | values : 55108 , 29440 ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) ]\ntable zip_code , columns = [ zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.first_name ( Adela )\nmember.last_name ( O'Gallagher )\nzip_code.city ( Hometown , Tell )\nTell the hometown county for \"Adela O'Gallagher\".\n", "response": "SELECT zip_code.county FROM zip_code INNER JOIN attendance ON zip_code.zip_code = attendance.link_to_member WHERE attendance.link_to_member = 'rec4BLdZHS2Blfp4v';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) ]\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.event_name ( November Meeting )\nevent.type ( Meeting , Budget )\nzip_code.city ( Many )\nFor all the budgets for \"November Meeting\", how many of them had exceeded the budget?\n", "response": "SELECT count(budget_id) FROM budget WHERE event_status = 'Open' AND amount > remaining;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.event_name ( September Speaker )\nevent.type ( Budget )\nProvide the total number of the budget amount for \"September Speaker\" event.\n", "response": "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.status ( text | values : Open , Planning ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) ]\ntable budget , columns = [ budget.event_status ( text | values : Closed , Open ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.amount ( integer | values : 75 , 150 ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) ]\ntable income , columns = [ income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.amount ( integer | values : 50 , 200 ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nexpense.expense_description ( Post Cards, Posters , Posters )\nWhat is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?\n", "response": "SELECT DISTINCT event.status FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE expense.expense_description = 'Post Cards, Posters' AND expense.expense_date = '2019-08-20';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.department ( text ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.first_name ( Brent )\nmember.last_name ( Thomason )\nzip_code.city ( Brent )\nWhat was Brent Thomason's major?\n", "response": "SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.t_shirt_size ( text | values : Medium , X-Large ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) , major.college ( text ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.link_to_major = major.major_id\nmatched contents :\nmember.t_shirt_size ( Large )\nmember.position ( Member )\nFor all the club members from \"Human Development and Family Studies\" major, how many of them wear large size t-shirt?\n", "response": "SELECT count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Human Development and Family Studies' AND member.t_shirt_size = 'Large';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable zip_code , columns = [ zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.first_name ( Christof )\nmember.last_name ( Nielson )\nWhat's Christof Nielson's zip code type?\n", "response": "SELECT zip_code.type FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Christof' AND member.last_name = 'Nielson';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.position ( text | values : Member , Inactive ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable major , columns = [ major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.department ( text ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( Vice President , President )\nState the major name for the Vice President of the club.\n", "response": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable zip_code , columns = [ zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.type ( text | values : Unique , Standard ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.first_name ( Sacha )\nmember.last_name ( Harrison )\nzip_code.city ( Hometown , Harrison )\nWhere is the hometown state for \"Sacha Harrison\"?\n", "response": "SELECT short_state FROM zip_code WHERE city = 'Hometown' AND state = 'NY';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.department ( text ) , major.major_name ( text ) , major.college ( text ) ]\ntable member , columns = [ member.position ( text | values : Member , Inactive ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( President )\nWhich department was the President of the club in?\n", "response": "SELECT major.department FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'President';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable income , columns = [ income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.notes ( text ) , income.amount ( integer | values : 50 , 200 ) ]\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) , budget.event_status ( text | values : Closed , Open ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents :\nmember.first_name ( Connor )\nmember.last_name ( Hilton )\nincome.source ( Dues )\nState the date Connor Hilton paid his/her dues.\n", "response": "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Connor' AND member.last_name = 'Hilton';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable income , columns = [ income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.source ( text | values : Dues , Fundraising ) , income.amount ( integer | values : 50 , 200 ) , income.notes ( text ) ]\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.approved ( text | values : true ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable event , columns = [ event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nincome.link_to_member = member.member_id\nmatched contents :\nincome.source ( Dues )\nWho was the first one paid his/her dues? Tell the full name.\n", "response": "SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.source = 'Dues' ORDER BY income.date_received ASC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) ]\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.event_status ( text | values : Closed , Open ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) ]\ntable expense , columns = [ expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.approved ( text | values : true ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable zip_code , columns = [ zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.event_name ( October Meeting , Yearly Kickoff )\nevent.type ( Meeting , Budget )\nbudget.category ( Advertisement )\nzip_code.city ( Many )\nHow many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?\n", "response": "SELECT count(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'Yearly Kickoff' AND budget.category = 'Advertisement';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.approved ( text | values : true ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nbudget.category ( Parking )\nevent.event_name ( November Speaker )\nevent.type ( Budget )\nexpense.expense_description ( Parking )\nWhat percentage was the budget for Parking to the total budget for the \"November Speaker\"?\n", "response": "SELECT cast(sum(CASE WHEN budget.category = 'Parking' THEN budget.amount ELSE 0 END) AS REAL) * 100 / sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.approved ( text | values : true ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.type ( text | values : Meeting , Election ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.event_status ( text | values : Closed , Open ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nexpense.expense_description ( Pizza )\nzip_code.city ( Cost )\nWhat is the total cost of the pizzas for all the events?\n", "response": "SELECT sum(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Pizza';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable zip_code , columns = [ zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.type ( text | values : Unique , Standard ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable income , columns = [ income.notes ( text ) , income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nincome.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nzip_code.county ( Orange County )\nzip_code.city ( Virginia , Orange , Many )\nzip_code.state ( Virginia )\nHow many cities are there in Orange County, Virginia?\n", "response": "SELECT count(DISTINCT zip_code.city) FROM zip_code WHERE zip_code.county = 'Orange County' AND zip_code.state = 'Virginia';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.department ( text ) , major.college ( text ) , major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents : None\nList all of the College of Humanities and Social Sciences' departments.\n", "response": "SELECT major.department FROM major WHERE major.college = 'College of Humanities and Social Sciences';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) ]\ntable zip_code , columns = [ zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.type ( text | values : Unique , Standard ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.first_name ( Amy )\nmember.last_name ( Firth )\nzip_code.city ( Hometown , Firth )\nWhere is Amy Firth's hometown?\n", "response": "SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable expense , columns = [ expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.approved ( text | values : true ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents : None\nWhat are the expenses of the budget with the lowest remaining?\n", "response": "SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.remaining IS NOT NULL ORDER BY budget.remaining ASC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable income , columns = [ income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.notes ( text ) , income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nincome.link_to_member = member.member_id\nmatched contents :\nevent.event_name ( October Meeting )\nevent.type ( Meeting )\nmember.position ( Member )\nList all the members who attended the event \"October Meeting\".\n", "response": "SELECT * FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'October Meeting';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.college ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) ]\ntable zip_code , columns = [ zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable event , columns = [ event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) , event.location ( text | values : MU 215 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( Member )\nWhich college do most of the members go to?\n", "response": "SELECT major.college FROM major INNER JOIN member ON major.major_id = member.link_to_major GROUP BY major.college ORDER BY count(major.college) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) ]\ntable zip_code , columns = [ zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.major_name ( text ) , major.department ( text ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.phone ( 809-555-3360 )\nWhat does the person with the phone number \"809-555-3360\" major in?\n", "response": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) , event.location ( text | values : MU 215 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents : None\nWhich event has the highest budget amount?\n", "response": "SELECT budget.budget_id FROM budget INNER JOIN event ON budget.link_to_event = event.event_id GROUP BY budget.budget_id ORDER BY sum(budget.spent) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable income , columns = [ income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nincome.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.position ( Vice President , President )\nList all the expenses incurred by the vice president.\n", "response": "SELECT DISTINCT expense.expense_description FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.position = 'Vice President';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.event_name ( Women's Soccer )\nmember.position ( Member )\nzip_code.city ( Many )\nHow many members attended the \"Women's Soccer\" event?\n", "response": "SELECT count(member.member_id) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable income , columns = [ income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nincome.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.first_name ( Casey )\nmember.last_name ( Mason )\nmember.position ( Member )\nzip_code.city ( Casey , Mason )\nWhen did the member, Casey Mason, received the income?\n", "response": "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Casey' AND member.last_name = 'Mason';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable zip_code , columns = [ zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.type ( text | values : Unique , Standard ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable event , columns = [ event.notes ( text ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nzip_code.state ( Maryland )\nzip_code.city ( Maryland , Many , Hometown )\nmember.position ( Member )\nHow many of the members' hometowns are from Maryland state?\n", "response": "SELECT count(member.zip) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable budget , columns = [ budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nmember.phone ( 954-555-6240 )\nmember.position ( Member )\nHow many events did the member with the phone number \"954-555-6240\" attend?\n", "response": "SELECT count(event_id) FROM ATTENDANCE WHERE link_to_member = '954-555-6240';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable major , columns = [ major.department ( text ) , major.college ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable event , columns = [ event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) , event.location ( text | values : MU 215 ) , event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( Member )\nList all the members of the \"School of Applied Sciences, Technology and Education\" department.\n", "response": "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON major.major_id = member.link_to_major WHERE major.department = 'School of Applied Sciences, Technology and Education';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.type ( text | values : Meeting , Election ) , event.event_name ( text | values : March Meeting ) , event.status ( text | values : Open , Planning ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.location ( text | values : MU 215 ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.event_status ( text | values : Closed , Open ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable income , columns = [ income.notes ( text ) , income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.status ( Closed )\nbudget.event_status ( Closed )\nAmong all the closed events, which event has the highest spend-to-budget ratio?\n", "response": "SELECT event.event_name, budget.spent FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' ORDER BY budget.spent DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.department ( text ) , major.major_name ( text ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( President )\nzip_code.city ( Many )\nHow many student have the position of president?\n", "response": "SELECT count(member_id) FROM member WHERE position = 'President';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) , budget.category ( text | values : Advertisement , Food ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.status ( text | values : Open , Planning ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.approved ( text | values : true ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.type ( Budget )\nWhat is the highest amount of budget spend for an event?\n", "response": "SELECT budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id ORDER BY budget.spent DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) ]\ntable budget , columns = [ budget.event_status ( text | values : Closed , Open ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable income , columns = [ income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.notes ( text ) , income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmatched contents :\nevent.type ( Meeting )\nzip_code.city ( Many )\nzip_code.zip_code ( 2020 )\nHow many meeting events were held in 2020?\n", "response": "SELECT count(event.event_id) FROM event WHERE event.type = 'Meeting' AND event.event_date LIKE '2020%';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable event , columns = [ event.type ( text | values : Meeting , Election ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.status ( text | values : Open , Planning ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nbudget.category ( Food )\nzip_code.city ( Money )\nWhat is the total amount of money spent for food?\n", "response": "SELECT sum(budget.spent) FROM budget WHERE budget.category = 'Food';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.college ( text ) , major.department ( text ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents : None\nList the name of students that have attended more than 7 events.\n", "response": "SELECT member.first_name, member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member WHERE attendance.link_to_event IN ( SELECT event.event_id FROM event GROUP BY event.event_id HAVING count(*) > 7 );\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.college ( text ) , major.department ( text ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.major_name ( Interior Design )\nevent.event_name ( Community Theater )\nzip_code.city ( Interior )\nAmong the students majored in interior design, who have attended the Community Theater event?\n", "response": "SELECT count(member.member_id) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND member.link_to_major = 'recxK3MHQFbR9J5uO';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable zip_code , columns = [ zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.type ( text | values : Unique , Standard ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable major , columns = [ major.college ( text ) , major.major_name ( text ) , major.department ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nzip_code.city ( Georgetown , Carolina )\nzip_code.state ( South Carolina )\nzip_code.county ( Carolina )\nState the name of students from Georgetown, South Carolina.\n", "response": "SELECT member.first_name, member.last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable income , columns = [ income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.source ( text | values : Dues , Fundraising ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.amount ( integer | values : 50 , 200 ) , income.notes ( text ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\ntable event , columns = [ event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) , event.location ( text | values : MU 215 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nincome.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.first_name ( Grant )\nmember.last_name ( Gilmour )\nzip_code.city ( Many , Grant )\nHow many income generated by Grant Gilmour?\n", "response": "SELECT count(*) FROM income WHERE link_to_member = 'rec280Sk7o31iG0Tx';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.source ( text | values : Dues , Fundraising ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.notes ( text ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.department ( text ) , major.major_name ( text ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable event , columns = [ event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.status ( text | values : Open , Planning ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\nforeign keys :\nincome.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents : None\nWhich student was able to generate income more than $40?\n", "response": "SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.type ( text | values : Meeting , Election ) , event.notes ( text ) , event.location ( text | values : MU 215 ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.event_status ( text | values : Closed , Open ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.event_name ( Yearly Kickoff )\nWhat is the total expense for the Yearly Kickoff?\n", "response": "SELECT sum(expense.cost) FROM expense WHERE expense.expense_description = 'Yearly Kickoff';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.last_name ( text | values : Sanders , Gilmour ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) , event.location ( text | values : MU 215 ) ]\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable major , columns = [ major.college ( text ) , major.department ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.link_to_major = major.major_id\nmatched contents :\nevent.event_name ( Yearly Kickoff )\nWhich student has been entrusted to manage the budget for the Yearly Kickoff?\n", "response": "SELECT member.first_name, member.last_name FROM member INNER JOIN budget ON member.member_id = budget.link_to_member WHERE event.event_name = 'Yearly Kickoff';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable income , columns = [ income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.amount ( integer | values : 50 , 200 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.notes ( text ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable major , columns = [ major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.department ( text ) ]\ntable event , columns = [ event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) , event.location ( text | values : MU 215 ) , event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nincome.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents : None\nWhich students manage to generate the highest income. State his/her full name along with the income source.\n", "response": "SELECT member.first_name, member.last_name, income.source FROM member INNER JOIN income ON member.member_id = income.link_to_member ORDER BY income.amount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.notes ( text ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nzip_code.city ( Cost )\nWhich event has the lowest cost?\n", "response": "SELECT budget.spent FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget GROUP BY budget.budget_id ORDER BY budget.spent LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.type ( text | values : Meeting , Election ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.event_status ( text | values : Closed , Open ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.notes ( text ) , income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.event_name ( Yearly Kickoff )\nzip_code.city ( Cost )\nBased on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?\n", "response": "SELECT 100 * sum(t.amount) / sum(t.spent) FROM budget t WHERE t.event_status = 'Open' AND t.event_name = 'Yearly Kickoff';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.department ( text ) , major.college ( text ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.first_name ( text | values : Angela , Grant ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.major_name ( Finance , Physics )\nWhat is the ratio between students majored in finance and physics?\n", "response": "SELECT ( SELECT COUNT(*) FROM member WHERE link_to_major = 'rec06DF6vZ1CyPKpc' ) / ( SELECT COUNT(*) FROM member WHERE link_to_major = 'rec09LedkREyskCNv' ) AS ratio;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable income , columns = [ income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.source ( text | values : Dues , Fundraising ) , income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.notes ( text ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.location ( text | values : MU 215 ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) ]\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.approved ( text | values : true ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable member , columns = [ member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nincome.link_to_member = member.member_id\nmatched contents : None\nIndicate the top source of funds received in September 2019 based on their amount.\n", "response": "SELECT income.source FROM income WHERE income.date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY income.amount DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.last_name ( text | values : Sanders , Gilmour ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.position ( Secretary )\nzip_code.city ( Secretary )\nProvide the full name and email address of the Student_Club's Secretary.\n", "response": "SELECT member.first_name, member.last_name, member.email FROM member WHERE member.position = 'Secretary';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.department ( text ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable event , columns = [ event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) , event.location ( text | values : MU 215 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.major_name ( Physics Teaching , Physics )\nmember.position ( Member )\nzip_code.city ( Many )\nHow many members of the Student_Club have major in 'Physics Teaching'?\n", "response": "SELECT count(DISTINCT member.member_id) FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON major.major_id = member.link_to_major WHERE major.major_name = 'Physics Teaching';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable income , columns = [ income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.notes ( text ) , income.source ( text | values : Dues , Fundraising ) , income.amount ( integer | values : 50 , 200 ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nincome.link_to_member = member.member_id\nmatched contents :\nevent.event_name ( Community Theater )\nmember.position ( Member )\nHow many members did attend the event 'Community Theater' in 2019?\n", "response": "SELECT count(member.member_id) FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND event.event_date = '2019-10-17';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.college ( text ) , major.department ( text ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.location ( text | values : MU 215 ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.first_name ( Luisa )\nmember.last_name ( Guidi )\nProvide the number of events attended by Luisa Guidi. What is her major?\n", "response": "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Luisa' AND member.last_name = 'Guidi';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.event_status ( text | values : Closed , Open ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.last_name ( text | values : Sanders , Gilmour ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nbudget.category ( Food )\nOn average, how much did the Student_Club spend on food for the typical event in the past?\n", "response": "SELECT avg(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'March Meeting';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) , event.location ( text | values : MU 215 ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.amount ( integer | values : 75 , 150 ) , budget.event_status ( text | values : Closed , Open ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.notes ( text ) , income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents :\nbudget.category ( Advertisement )\nName the event with the highest amount spent on advertisement.\n", "response": "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.notes ( text ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.event_name ( Women's Soccer )\nmember.first_name ( Maya )\nmember.last_name ( Mclean )\nzip_code.city ( Mclean )\nDid Maya Mclean attend the 'Women's Soccer' event?\n", "response": "SELECT iif(member.first_name = 'Maya' AND member.last_name = 'Mclean', 'YES', 'NO') FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) , event.event_name ( text | values : March Meeting ) , event.notes ( text ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) ]\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable member , columns = [ member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.type ( Community Service )\nAmong all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'\n", "response": "SELECT ROUND(SUM(CASE WHEN event.type = 'Community Service' THEN 1 ELSE 0 END) / SUM(CASE WHEN event.type = 'Community Service' THEN 1 ELSE 0 END + CASE WHEN event.status = 'Open' THEN 1 ELSE 0 END + CASE WHEN event.status = 'Planning' THEN 1 ELSE 0 END) * 100, 2) FROM event WHERE event.event_date BETWEEN '2019-01-01' AND '2019-12-31';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.type ( text | values : Meeting , Election ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.event_status ( text | values : Closed , Open ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nexpense.expense_description ( Posters )\nevent.event_name ( September Speaker )\nIndicate the cost of posters for 'September Speaker' event.\n", "response": "SELECT expense.cost FROM expense INNER JOIN event ON expense.link_to_event = event.event_id WHERE event.event_name = 'September Speaker';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.t_shirt_size ( text | values : Medium , X-Large ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.zip ( integer | values : 55108 , 29440 ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\ntable major , columns = [ major.college ( text ) , major.department ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( Member )\nWhat is the most popular size of t-shirt ordered by the club members?\n", "response": "SELECT member.t_shirt_size FROM member GROUP BY member.t_shirt_size ORDER BY COUNT(*) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.status ( text | values : Open , Planning ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) ]\ntable budget , columns = [ budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.type ( Budget )\nevent.status ( Closed )\nbudget.event_status ( Closed )\nzip_code.city ( Cost )\nIndicate the name of the closed event whose cost has exceeded the budget the most.\n", "response": "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.spent > budget.remaining ORDER BY budget.spent DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.notes ( text ) , income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.event_name ( October Meeting )\nevent.type ( Meeting )\nIdentify the type of expenses and their total value approved for 'October Meeting' event.\n", "response": "SELECT expense.expense_description, SUM(expense.cost) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' GROUP BY expense.expense_description;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) , event.notes ( text ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.event_name ( April Speaker )\nCalculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount.\n", "response": "SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable event , columns = [ event.type ( text | values : Meeting , Election ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) , event.location ( text | values : MU 215 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents :\nbudget.category ( Food )\nevent.type ( Budget )\nAmong the budgets for Food, which one has the highest budgeted amount?\n", "response": "SELECT budget.amount FROM budget WHERE budget.category = 'Food' ORDER BY budget.spent DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) , event.location ( text | values : MU 215 ) ]\ntable major , columns = [ major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.department ( text ) , major.college ( text ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmatched contents :\nevent.type ( Budget )\nAmong the budgets for Advertising, list out top three which have the most budgeted amount?\n", "response": "SELECT budget.budget_id, budget.amount FROM budget WHERE budget.category = 'Advertisement' ORDER BY budget.amount DESC LIMIT 3;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.event_status ( text | values : Closed , Open ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.location ( text | values : MU 215 ) , event.notes ( text ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nexpense.expense_description ( Parking )\nbudget.category ( Parking )\nzip_code.city ( Cost )\nCalculate the total cost spent for Parking in the list.\n", "response": "SELECT sum(budget.spent) FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE budget.category = 'Parking';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.location ( text | values : MU 215 ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents : None\nMention the total expense used on 8/20/2019.\n", "response": "SELECT sum(expense.cost) FROM expense WHERE expense.expense_date = '2019-08-20';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) , budget.event_status ( text | values : Closed , Open ) ]\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.status ( text | values : Open , Planning ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents :\nexpense.link_to_member ( rec4BLdZHS2Blfp4v )\nmember.member_id ( rec4BLdZHS2Blfp4v )\nmember.position ( Member )\nincome.link_to_member ( rec4BLdZHS2Blfp4v )\nList out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?\n", "response": "SELECT member.first_name, member.last_name, expense.cost FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable expense , columns = [ expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents :\nmember.first_name ( Sacha )\nmember.last_name ( Harrison )\nState what kind of expenses that Sacha Harrison incurred?\n", "response": "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.t_shirt_size ( text | values : Medium , X-Large ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) ]\ntable expense , columns = [ expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.t_shirt_size ( X-Large )\nmember.position ( Member )\nWhat kind of expenses incurred by members who have X-Large in size of tee shirt?\n", "response": "SELECT expense.expense_description FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.t_shirt_size = 'X-Large';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable zip_code , columns = [ zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.last_name ( text | values : Sanders , Gilmour ) ]\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) , budget.event_status ( text | values : Closed , Open ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.notes ( text ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\nforeign keys :\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.position ( Member )\nMention the zip code of member who incurred less than 50USD.\n", "response": "SELECT member.zip FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.amount < 50;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.department ( text ) ]\ntable member , columns = [ member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.last_name ( Cullen )\nmember.first_name ( Phillip )\nzip_code.city ( Cullen , Phillips )\nState the name of major that Phillip Cullen has joined.\n", "response": "SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.college ( text ) , major.department ( text ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( Member )\nmajor.major_name ( Business )\nList out the position of members who joined major of Business.\n", "response": "SELECT member.position FROM member INNER JOIN major ON major.major_id = member.link_to_major WHERE major.major_name = 'Business';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.t_shirt_size ( text | values : Medium , X-Large ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.position ( text | values : Member , Inactive ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) , major.college ( text ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.t_shirt_size ( Medium )\nmember.position ( Member )\nmajor.major_name ( Business )\nzip_code.city ( Many )\nHow many members of Business have the Medium size of tee shirt?\n", "response": "SELECT count(member_id) FROM member WHERE t_shirt_size = 'Medium';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.type ( text | values : Meeting , Election ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.location ( text | values : MU 215 ) ]\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.type ( Budget )\nList out the type of events which have remaining budget more than 30 USD.\n", "response": "SELECT event.type FROM budget INNER JOIN event ON budget.budget_id = event.event_id WHERE budget.remaining > 30 GROUP BY event.type;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable major , columns = [ major.college ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.department ( text ) , major.major_name ( text ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.location ( MU 215 )\nMention the category of events which were held at MU 215.\n", "response": "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.type ( text | values : Meeting , Election ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.amount ( integer | values : 75 , 150 ) ]\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable income , columns = [ income.notes ( text ) , income.source ( text | values : Dues , Fundraising ) , income.amount ( integer | values : 50 , 200 ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.event_date ( 2020-03-24T12:00:00 )\nWhat is the category of event which was taken place in 2020-03-24T12:00:00?\n", "response": "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.position ( text | values : Member , Inactive ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.college ( text ) , major.department ( text ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( Vice President , President )\nState the name of major that Vice President has joined.\n", "response": "SELECT major.major_name FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.position = 'Vice President';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) , major.college ( text ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable event , columns = [ event.notes ( text ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.major_name ( Mathematics )\nmember.position ( Member )\nCalculate the percentage of members who are major Mathematics in the list?\n", "response": "SELECT cast(sum(CASE WHEN major.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / count(member.member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Mathematics';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.location ( text | values : MU 215 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.type ( text | values : Meeting , Election ) , event.event_name ( text | values : March Meeting ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable major , columns = [ major.college ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.department ( text ) , major.major_name ( text ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.location ( MU 215 )\nState the category of events were held at MU 215.\n", "response": "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.status ( text | values : Open , Planning ) , event.event_name ( text | values : March Meeting ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable expense , columns = [ expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nmatched contents :\nincome.amount ( 50 )\nzip_code.city ( Many )\nHow many income are received with an amount of 50?\n", "response": "SELECT count(income_id) FROM income WHERE amount = 50;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.t_shirt_size ( text | values : Medium , X-Large ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable event , columns = [ event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) , event.location ( text | values : MU 215 ) , event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.t_shirt_size ( Large )\nmember.position ( Member )\nzip_code.city ( Many )\nAmong the members, how many of them have an extra large t-shirt size?\n", "response": "SELECT count(member.member_id) FROM member WHERE member.t_shirt_size = 'X-Large';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.college ( text ) , major.department ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) ]\ntable zip_code , columns = [ zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable income , columns = [ income.notes ( text ) , income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\nforeign keys : None\nmatched contents :\nzip_code.city ( Many )\nIn the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?\n", "response": "SELECT count(DISTINCT major.major_name) FROM major INNER JOIN attendance ON major.major_id = attendance.link_to_event WHERE major.department = 'School of Applied Sciences, Technology and Education';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_name ( text ) , major.college ( text ) , major.department ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) ]\ntable member , columns = [ member.last_name ( text | values : Sanders , Gilmour ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.major_name ( Environmental Engineering )\nmember.position ( Member )\nList the last name of members with a major in environmental engineering and include its department and college name.\n", "response": "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Environmental Engineering';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.location ( text | values : MU 215 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.type ( text | values : Meeting , Election ) , event.event_name ( text | values : March Meeting ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.location ( MU 215 )\nevent.type ( Guest Speaker , Budget )\nWhat are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?\n", "response": "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215' AND budget.spent = 0;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) , major.college ( text ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) ]\ntable zip_code , columns = [ zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.type ( text | values : Unique , Standard ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.major_name ( Computer Engineering )\nmember.position ( Member )\nList the city and state of members enrolled under electrical and computer engineering department.\n", "response": "SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.location ( text | values : MU 215 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.type ( text | values : Meeting , Election ) , event.notes ( text ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) ]\ntable member , columns = [ member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.zip ( integer | values : 55108 , 29440 ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable zip_code , columns = [ zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable budget , columns = [ budget.event_status ( text | values : Closed , Open ) , budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.location ( 900 E. Washington St. )\nevent.type ( Social )\nmember.position ( Vice President , President )\nzip_code.city ( Washington )\nzip_code.state ( Washington )\nWhat is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?\n", "response": "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Washington' AND member.position = 'Vice President';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.first_name ( text | values : Angela , Grant ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.college ( text ) , major.department ( text ) ]\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) , event.notes ( text ) , event.location ( text | values : MU 215 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nmember.link_to_major = major.major_id\nmatched contents :\nexpense.expense_description ( Pizza )\nWhat is the last name and position of the student that bought pizza on 09/10/2019?\n", "response": "SELECT member.last_name, member.position FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_date = '2019-10-09' AND expense.expense_description = 'Pizza';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.location ( text | values : MU 215 ) , event.notes ( text ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable budget , columns = [ budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.event_status ( text | values : Closed , Open ) , budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nmember.position ( Member )\nevent.event_name ( Women's Soccer )\nList the last name of the members of the club that attended the women's soccer event.\n", "response": "SELECT member.last_name FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.t_shirt_size ( text | values : Medium , X-Large ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.source ( text | values : Dues , Fundraising ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.notes ( text ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) ]\ntable event , columns = [ event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.status ( text | values : Open , Planning ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents :\nmember.t_shirt_size ( Medium )\nmember.position ( Member )\nincome.amount ( 50 )\nAmong the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?\n", "response": "SELECT ROUND(SUM(income.amount)/SUM(budget.amount)*100,2) FROM member INNER JOIN income ON member.member_id = income.link_to_member INNER JOIN budget ON member.member_id = budget.link_to_member WHERE member.t_shirt_size = 'Medium' AND income.amount = 50;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.city ( text | values : Holtsville , Adjuntas ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.first_name ( text | values : Angela , Grant ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable event , columns = [ event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents :\nzip_code.city ( Post )\nWhich countries have zip codes with post office boxes?\n", "response": "SELECT state FROM zip_code WHERE type = 'Unique';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable zip_code , columns = [ zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.city ( text | values : Holtsville , Adjuntas ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) ]\ntable major , columns = [ major.college ( text ) , major.department ( text ) , major.major_name ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nzip_code.state ( Puerto Rico )\nzip_code.county ( San Juan Municipio , San Juan )\nzip_code.city ( San Juan , Post , Rico )\nWhat are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?\n", "response": "SELECT zip_code.zip_code FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE zip_code.county = 'San Juan Municipio' AND zip_code.type = 'Unique' AND zip_code.state = 'Puerto Rico';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) , event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.notes ( text ) ]\ntable budget , columns = [ budget.event_status ( text | values : Closed , Open ) , budget.category ( text | values : Advertisement , Food ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable member , columns = [ member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents :\nevent.status ( Closed )\nevent.type ( Game )\nbudget.event_status ( Closed )\nList the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.\n", "response": "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.event_status = 'Closed' AND event.event_date BETWEEN '2020-03-10T12:00:00' AND '2020-03-20T09:30:00';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable income , columns = [ income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.first_name ( text | values : Angela , Grant ) ]\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents :\nincome.amount ( 50 )\nmember.position ( Member )\nPlease provide links to events for members who have paid more than 50 dollar.\n", "response": "SELECT attendance.link_to_event FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id WHERE attendance.amount > 50;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.cost ( real | values : 122.06 , 20.2 ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.status ( text | values : Open , Planning ) , event.event_name ( text | values : March Meeting ) , event.notes ( text ) , event.location ( text | values : MU 215 ) ]\ntable income , columns = [ income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.notes ( text ) , income.source ( text | values : Dues , Fundraising ) , income.amount ( integer | values : 50 , 200 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nincome.link_to_member = member.member_id\nmatched contents :\nmember.position ( Member )\nWhich members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.\n", "response": "SELECT attendance.link_to_member, event.event_id FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' AND '2019-11-19';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.college ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable event , columns = [ event.notes ( text ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) ]\nforeign keys :\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.major_id ( rec1N0upiVLy5esTO )\nmember.link_to_major ( rec1N0upiVLy5esTO )\nmember.first_name ( Katy )\nzip_code.city ( Katy )\nPlease indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".\n", "response": "SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.major_name ( text ) , major.department ( text ) ]\ntable member , columns = [ member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.major_name ( Business )\nPlease list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.\n", "response": "SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Agriculture and Applied Sciences';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable income , columns = [ income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.source ( text | values : Dues , Fundraising ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.notes ( text ) ]\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents :\nbudget.amount ( 20 )\nList emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.\n", "response": "SELECT member.email FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.amount > 20 AND income.date_received BETWEEN '2019-09-10' AND '2019-11-19';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.college ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable event , columns = [ event.notes ( text ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( Member )\nzip_code.city ( Many )\nHow many members have education major in the College of Education & Human Services?\n", "response": "SELECT count(DISTINCT member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Education & Human Services';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.status ( text | values : Open , Planning ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.type ( Budget )\nWhat is the percentage of the events that went over budget?\n", "response": "SELECT cast(sum(CASE WHEN event.status = 'Open' THEN 1 ELSE 0 END) AS REAL) * 100 / count(event.event_id) FROM event WHERE event.status = 'Open';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.location ( text | values : MU 215 ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) ]\ntable budget , columns = [ budget.event_status ( text | values : Closed , Open ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmatched contents :\nzip_code.zip_code ( 2019 , 2020 )\nGive the event ID, location, and status of events conducted from November 2019 to March 2020.\n", "response": "SELECT event.event_id, event.location, event.status FROM event WHERE event.event_date BETWEEN '2019-11-01' AND '2020-03-01';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.approved ( text | values : true ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable event , columns = [ event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents : None\nList the expenses that spend more than fifty dollars on average.\n", "response": "SELECT expense.expense_description FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE budget.spent > 50 GROUP BY expense.expense_description ORDER BY budget.spent DESC LIMIT 5;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.t_shirt_size ( text | values : Medium , X-Large ) , member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.t_shirt_size ( Large )\nmember.position ( Member )\nFind the full name of members whose t-shirt size is extra large.\n", "response": "SELECT member.first_name || ' ' || member.last_name FROM member WHERE member.t_shirt_size = 'X-Large';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.first_name ( text | values : Angela , Grant ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable event , columns = [ event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents : None\nCalculate the percentage of zip codes that are PO boxes.\n", "response": "SELECT cast(sum(CASE WHEN zip_code.type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM zip_code WHERE zip_code.type = 'PO Box';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.location ( text | values : MU 215 ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) ]\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) , budget.category ( text | values : Advertisement , Food ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents : None\nList the name and location of events that underspend its budget.\n", "response": "SELECT event.event_name, event.location FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.spent < budget.remaining;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.notes ( text ) ]\ntable expense , columns = [ expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nexpense.expense_description ( Pizza )\nzip_code.city ( Hundred )\nFind the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.\n", "response": "SELECT event.event_name, expense.expense_date FROM expense INNER JOIN event ON expense.link_to_budget = event.event_id WHERE expense.expense_description = 'Pizza' AND expense.cost > 50 AND expense.cost < 100;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.college ( text ) , major.department ( text ) ]\ntable member , columns = [ member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) ]\ntable expense , columns = [ expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( Member )\nzip_code.city ( Hundred )\nWhat is the name and major of members who had to spend more than a hundred dollars on an expense?\n", "response": "SELECT member.first_name, member.last_name, major.major_name FROM member INNER JOIN expense ON member.member_id = expense.link_to_member INNER JOIN budget ON budget.budget_id = expense.link_to_budget INNER JOIN major ON major.major_id = member.link_to_major WHERE budget.spent > 100;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable income , columns = [ income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.amount ( integer | values : 50 , 200 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.location ( text | values : MU 215 ) , event.event_name ( text | values : March Meeting ) , event.notes ( text ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.type ( text | values : Meeting , Election ) ]\ntable zip_code , columns = [ zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.first_name ( text | values : Angela , Grant ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nincome.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmatched contents : None\nIn the events with more than forty incomes, list the city and country in which the event is happening.\n", "response": "SELECT event.location, zip_code.city, zip_code.state FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN income ON attendance.link_to_member = income.link_to_member INNER JOIN zip_code ON zip_code.zip_code = income.link_to_member WHERE income.amount > 40;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.approved ( text | values : true ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.category ( text | values : Advertisement , Food ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nmember.position ( Member )\nAmong the members who incurred expenses in more than one event, who paid the most amount?\n", "response": "SELECT member.first_name, member.last_name FROM expense INNER JOIN attendance ON expense.link_to_member = attendance.link_to_member INNER JOIN event ON attendance.link_to_event = event.event_id WHERE expense.approved = 1 GROUP BY expense.link_to_member HAVING sum(expense.cost) > 1 ORDER BY sum(expense.cost) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.zip ( integer | values : 55108 , 29440 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.first_name ( text | values : Angela , Grant ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.source ( text | values : Dues , Fundraising ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.notes ( text ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents :\nmember.position ( Member )\nWhat is the average amount paid by students in a position other than a member?\n", "response": "SELECT avg(budget.amount) FROM budget INNER JOIN attendance ON budget.link_to_event = attendance.link_to_event WHERE attendance.link_to_member != 'recD078PnS3x2doBe';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.approved ( text | values : true ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.event_status ( text | values : Closed , Open ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nexpense.expense_description ( Parking )\nbudget.category ( Parking )\nzip_code.city ( Cost )\nList the name of events with less than average parking cost.\n", "response": "SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.spent < ( SELECT avg(budget.spent) FROM budget WHERE budget.category = 'Parking' );\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.approved ( text | values : true ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.type ( text | values : Meeting , Election ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.status ( text | values : Open , Planning ) , event.notes ( text ) ]\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.amount ( integer | values : 75 , 150 ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.type ( Game )\nzip_code.city ( Cost )\nWhat is the percentage of the cost for the game events?\n", "response": "SELECT budget.spent / budget.amount * 100 FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Game';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable expense , columns = [ expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.approved ( text | values : true ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nzip_code.city ( Money , Waters )\nWhich budget allowed the most money for water, chips, and cookies?\n", "response": "SELECT budget.budget_id, budget.amount FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Water' OR expense.expense_description = 'Chips' OR expense.expense_description = 'Cookies' ORDER BY budget.spent DESC LIMIT 1;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable expense , columns = [ expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents :\nmember.position ( Member )\nList the full name of the top five members who spend the most money in the descending order of spending.\n", "response": "SELECT member.first_name, member.last_name FROM member INNER JOIN income ON member.member_id = income.link_to_member GROUP BY member.member_id ORDER BY sum(income.amount) DESC LIMIT 0, 5;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.position ( text | values : Member , Inactive ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.approved ( text | values : true ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) , budget.event_status ( text | values : Closed , Open ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents :\nmember.position ( Member )\nGive the full name and contact number of members who had to spend more than average on each expense.\n", "response": "SELECT member.first_name, member.last_name, member.phone FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost > ( SELECT avg(expense.cost) FROM expense );\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable zip_code , columns = [ zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) ]\ntable member , columns = [ member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nzip_code.state ( Vermont , Maine )\nzip_code.city ( Vermont , Maine )\nmember.position ( Member )\nCalculate the difference in the percentage of members in Maine and Vermont.\n", "response": "SELECT cast(sum(CASE WHEN zip_code.state = 'Maine' THEN 1 ELSE 0 END) AS REAL) * 100 / count(*) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maine';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_name ( text ) , major.department ( text ) , major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable event , columns = [ event.notes ( text ) , event.status ( text | values : Open , Planning ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) , event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) ]\ntable zip_code , columns = [ zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.type ( text | values : Unique , Standard ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nattendance.link_to_event = event.event_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.first_name ( Garrett )\nmember.last_name ( Gerke )\nzip_code.city ( Garrett )\nWhat is the major of Garrett Gerke and which department does it belong to?\n", "response": "SELECT major.major_name, major.department FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Garrett' AND member.last_name = 'Gerke';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable budget , columns = [ budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable income , columns = [ income.amount ( integer | values : 50 , 200 ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) ]\ntable event , columns = [ event.notes ( text ) , event.location ( text | values : MU 215 ) , event.type ( text | values : Meeting , Election ) , event.status ( text | values : Open , Planning ) , event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmatched contents :\nmember.position ( Member )\nWrite the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.\n", "response": "SELECT member.first_name, member.last_name, budget.spent FROM member INNER JOIN budget ON member.member_id = budget.link_to_member INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Water' AND budget.category = 'Food';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.department ( text ) , major.college ( text ) ]\ntable member , columns = [ member.last_name ( text | values : Sanders , Gilmour ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable budget , columns = [ budget.remaining ( real | values : 7.19 , 28.86 ) , budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.link_to_major = major.major_id\nmatched contents :\nmajor.major_name ( Elementary Education )\nList the last names of students under the Elementary Education major and include their phone numbers.\n", "response": "SELECT member.last_name, member.phone FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN expense ON attendance.link_to_event = expense.expense_id INNER JOIN major ON expense.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.amount ( integer | values : 75 , 150 ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.type ( text | values : Meeting , Election ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nevent.event_name ( January Speaker )\nWhat category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?\n", "response": "SELECT budget.category , budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.event_status ( text | values : Closed , Open ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) ]\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.type ( text | values : Meeting , Election ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) ]\ntable expense , columns = [ expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.last_name ( text | values : Sanders , Gilmour ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nbudget.category ( Food )\nList the event names which were budgeted for the food.\n", "response": "SELECT event.event_name FROM event INNER JOIN budget ON budget.link_to_event = event.event_id WHERE budget.category = 'Food';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable income , columns = [ income.date_received ( text | values : 2019-10-17 , 2019-09-04 ) , income.amount ( integer | values : 50 , 200 ) , income.income_id ( text | primary key | values : rec0s9ZrO15zhzUeE , rec7f5XMQZexgtQJo ) , income.source ( text | values : Dues , Fundraising ) , income.notes ( text ) , income.link_to_member ( text | values : reccW7q1KkhSKZsea , recTjHY5xXhvkCdVT ) ]\ntable member , columns = [ member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable expense , columns = [ expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.approved ( text | values : true ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.major_name ( text ) , major.college ( text ) , major.department ( text ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nincome.link_to_member = member.member_id\nmember.link_to_major = major.major_id\nmatched contents : None\nWrite the full names of students who received funds on the date of 9/9/2019 and include the amount received.\n", "response": "SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable budget , columns = [ budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.category ( text | values : Advertisement , Food ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.link_to_event ( text | values : recI43CzsZ0Q625ma , recggMW2eyCYceNcy ) , budget.remaining ( real | values : 7.19 , 28.86 ) ]\ntable expense , columns = [ expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable event , columns = [ event.event_name ( text | values : March Meeting ) , event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.type ( text | values : Meeting , Election ) , event.notes ( text ) , event.status ( text | values : Open , Planning ) ]\ntable member , columns = [ member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) , member.zip ( integer | values : 55108 , 29440 ) , member.phone ( text | values : (651) 928-4507 , 403-555-1310 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.first_name ( text | values : Angela , Grant ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\nforeign keys :\nbudget.link_to_event = event.event_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nexpense.expense_description ( Posters )\nevent.type ( Budget )\nWhich budget category does the expense 'Posters' fall to?\n", "response": "SELECT budget.category FROM budget INNER JOIN expense ON budget.budget_id = expense.link_to_budget WHERE expense.expense_description = 'Posters';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.first_name ( text | values : Angela , Grant ) , member.last_name ( text | values : Sanders , Gilmour ) , member.position ( text | values : Member , Inactive ) , member.link_to_major ( text | values : recxK3MHQFbR9J5uO , rec7BxKpjJ7bNph3O ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.zip ( integer | values : 55108 , 29440 ) ]\ntable major , columns = [ major.major_id ( text | primary key | values : rec06DF6vZ1CyPKpc , rec09LedkREyskCNv ) , major.college ( text ) , major.major_name ( text ) , major.department ( text ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nmember.zip = zip_code.zip_code\nmember.link_to_major = major.major_id\nmatched contents :\nmember.position ( Secretary , Member )\nzip_code.city ( Secretary )\nWrite the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.\n", "response": "SELECT member.first_name, member.last_name, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Secretary';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable event , columns = [ event.event_id ( text | primary key | values : rec0Si5cQ4rJRVzd6 , rec0akZnLLpGUloLH ) , event.event_name ( text | values : March Meeting ) , event.event_date ( text | values : 2020-03-10T12:00:00 , 2020-01-14T09:30:00 ) , event.notes ( text ) , event.type ( text | values : Meeting , Election ) , event.location ( text | values : MU 215 ) ]\ntable expense , columns = [ expense.cost ( real | values : 122.06 , 20.2 ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) , expense.link_to_budget ( text | values : recvKTAWAFKkVNnXQ , recy8KY5bUdzF81vv ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.approved ( text | values : true ) ]\ntable budget , columns = [ budget.spent ( real | values : 67.81 , 121.14 ) , budget.amount ( integer | values : 75 , 150 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.event_status ( text | values : Closed , Open ) ]\ntable zip_code , columns = [ zip_code.type ( text | values : Unique , Standard ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.short_state ( text | values : NY , PR ) ]\ntable attendance , columns = [ attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) , attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) ]\nforeign keys :\nattendance.link_to_event = event.event_id\nbudget.link_to_event = event.event_id\nexpense.link_to_budget = budget.budget_id\nmatched contents :\nbudget.category ( Speaker Gifts )\nCalculate the total amount spent on speaker gifts and list the name of the event they were spent on.\n", "response": "SELECT event.event_name, budget.spent FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.zip ( integer | values : 55108 , 29440 ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.position ( text | values : Member , Inactive ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable zip_code , columns = [ zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.type ( text | values : Unique , Standard ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.first_name ( Garrett )\nzip_code.city ( Hometown , Garrett )\nWhere is the hometown of Garrett Girke?\n", "response": "SELECT zip_code.city FROM zip_code INNER JOIN member ON zip_code.zip_code = member.zip WHERE member.first_name = 'Garrett' AND member.last_name = 'Girke';\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable member , columns = [ member.last_name ( text | values : Sanders , Gilmour ) , member.first_name ( text | values : Angela , Grant ) , member.zip ( integer | values : 55108 , 29440 ) , member.position ( text | values : Member , Inactive ) , member.member_id ( text | primary key | values : rec1x5zBFIqoOuPW8 , rec280Sk7o31iG0Tx ) , member.email ( text | values : angela.sanders@lpu.edu , grant.gilmour@lpu.edu ) ]\ntable zip_code , columns = [ zip_code.zip_code ( integer | primary key | values : 501 , 544 ) , zip_code.state ( text | values : New York , Puerto Rico ) , zip_code.city ( text | values : Holtsville , Adjuntas ) , zip_code.short_state ( text | values : NY , PR ) , zip_code.county ( text | values : Suffolk County , Adjuntas Municipio ) , zip_code.type ( text | values : Unique , Standard ) ]\ntable attendance , columns = [ attendance.link_to_member ( text | primary key | values : recD078PnS3x2doBe , recP6DJPyi5donvXL ) , attendance.link_to_event ( text | primary key | values : rec2N69DMcrqN9PJC , rec5XDvJLyxDsGZWc ) ]\ntable expense , columns = [ expense.approved ( text | values : true ) , expense.cost ( real | values : 122.06 , 20.2 ) , expense.link_to_member ( text | values : rec4BLdZHS2Blfp4v , recro8T1MPMwRadVH ) , expense.expense_id ( text | primary key | values : rec017x6R3hQqkLAo , rec1nIjoZKTYayqZ6 ) , expense.expense_date ( text | values : 2019-08-20 , 2019-10-08 ) , expense.expense_description ( text | values : Post Cards, Posters , Water, Cookies ) ]\ntable budget , columns = [ budget.amount ( integer | values : 75 , 150 ) , budget.remaining ( real | values : 7.19 , 28.86 ) , budget.spent ( real | values : 67.81 , 121.14 ) , budget.category ( text | values : Advertisement , Food ) , budget.budget_id ( text | primary key | values : rec0QmEc3cSQFQ6V2 , rec1bG6HSft7XIvTP ) , budget.event_status ( text | values : Closed , Open ) ]\nforeign keys :\nattendance.link_to_member = member.member_id\nexpense.link_to_member = member.member_id\nexpense.link_to_budget = budget.budget_id\nmember.zip = zip_code.zip_code\nmatched contents :\nmember.zip ( 28092 )\nzip_code.zip_code ( 28092 )\nzip_code.state ( North Carolina )\nzip_code.city ( Lincolnton , Hometown , Carolina , North )\nzip_code.county ( Carolina )\nWhich student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.\n", "response": "SELECT member.first_name, member.last_name, member.position FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = 28092;\t", "n_examples": 0, "db_id": "student_club"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable transactions_1k , columns = [ transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\nforeign keys : None\nmatched contents :\nproducts.description ( Premium )\ngasstations.country ( CZE )\ngasstations.segment ( Premium )\nHow many gas stations in CZE has Premium gas?\n", "response": "SELECT count(gasstationid) FROM gasstations WHERE segment = 'Premium' AND country = 'CZE';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.currency ( EUR , CZK )\nWhat is the ratio of costumers who pay in EUR against customers who pay in CZK?\n", "response": "SELECT cast(count(CASE WHEN customers.currency = 'EUR' THEN customers.customerid END) AS REAL) / count(customers.customerid) FROM customers;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\nforeign keys : None\nmatched contents :\ncustomers.segment ( LAM )\ngasstations.gasstationid ( 2012 )\nIn 2012, who had the least consumption in LAM?\n", "response": "SELECT customers.customerid FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE yearmonth.date LIKE '%/2012' GROUP BY yearmonth.customerid ORDER BY sum(yearmonth.consumption) ASC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.segment ( SME )\ngasstations.gasstationid ( 2013 )\nWhat was the average monthly consumption of customers in SME for the year 2013?\n", "response": "SELECT avg(yearmonth.consumption) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'SME' AND strftime('%Y', yearmonth.date) = '2013';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.customerid ( 2011 )\ncustomers.currency ( CZK )\nyearmonth.customerid ( 2011 )\ngasstations.gasstationid ( 2011 )\nWhich customers, paying in CZK, consumed the most gas in 2011?\n", "response": "SELECT customers.customerid, customers.currency, yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.cardid INNER JOIN customers ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '201112' GROUP BY yearmonth.customerid ORDER BY yearmonth.consumption DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.segment ( KAM )\ngasstations.gasstationid ( 2012 )\nHow many customers in KAM had a consumption of less than 30,000 for the year 2012?\n", "response": "SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.consumption < 30000;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ngasstations.gasstationid ( 2012 )\nWhat was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?\n", "response": "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN yearmonth.consumption ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN yearmonth.consumption ELSE 0 END) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date LIKE '%2012%';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.currency ( EUR )\nWhich year recorded the most gas use paid in EUR?\n", "response": "SELECT strftime('%Y', transactions_1k.date) FROM transactions_1k GROUP BY transactions_1k.date ORDER BY count(transactions_1k.date) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.country ( text | values : CZE , SVK ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents : None\nWhich segment had the least consumption?\n", "response": "SELECT customers.segment FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid GROUP BY yearmonth.customerid ORDER BY sum(yearmonth.consumption) ASC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.currency ( CZK )\nWhich year recorded the most consumption of gas paid in CZK?\n", "response": "SELECT strftime('%Y', date) FROM yearmonth WHERE currency = 'CZK' ORDER BY consumption DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable customers , columns = [ customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable transactions_1k , columns = [ transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.segment ( SME )\ngasstations.gasstationid ( 2013 )\nWhat was the gas consumption peak month for SME customers in 2013?\n", "response": "SELECT yearmonth.date, yearmonth.consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'SME' ORDER BY yearmonth.consumption DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.currency ( CZK )\ncustomers.segment ( SME , LAM , KAM )\ngasstations.gasstationid ( 2013 )\nWhat is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?\n", "response": "SELECT cast(sum(yearmonth.consumption) AS REAL) / count(yearmonth.customerid) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment IN ('SME', 'LAM', 'KAM') AND yearmonth.date LIKE '2013%' AND customers.currency = 'CZK';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.customerid ( integer | primary key | values : 3 , 5 ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.currency ( EUR )\ncustomers.segment ( LAM )\ngasstations.gasstationid ( 2012 , 2013 )\nWhich of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?\n", "response": "SELECT gasstations.segment , yearmonth.consumption FROM gasstations INNER JOIN yearmonth ON gasstations.gasstationid = yearmonth.customerid GROUP BY gasstations.segment ORDER BY yearmonth.consumption DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\nyearmonth.customerid ( 6 )\ntransactions_1k.amount ( 6 )\ntransactions_1k.transactionid ( 6 )\ncustomers.customerid ( 6 )\ngasstations.gasstationid ( 2013 )\ngasstations.chainid ( 6 )\nproducts.productid ( 6 )\nHow much did customer 6 consume in total between August and November 2013?\n", "response": "SELECT sum(transactions_1k.amount) FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid WHERE yearmonth.date BETWEEN '2013-08-01' AND '2013-11-30' AND yearmonth.customerid = '6';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable transactions_1k , columns = [ transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\nforeign keys : None\nmatched contents :\ngasstations.segment ( Discount )\nHow many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?\n", "response": "SELECT count(gasstationid) FROM gasstations WHERE country = 'CZE' AND segment = 'Discount';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\nforeign keys : None\nmatched contents :\nyearmonth.customerid ( 7 , 5 )\ntransactions_1k.amount ( 7 , 5 )\ntransactions_1k.transactionid ( 7 , 5 )\ncustomers.customerid ( 7 , 5 )\ngasstations.gasstationid ( 2013 )\ngasstations.chainid ( 7 )\nproducts.productid ( 7 , 5 )\nHow much more was customer 7 consuming in April 2013 than customer 5?\n", "response": "SELECT sum(CASE WHEN yearmonth.date = '201304' THEN transactions_1k.amount ELSE 0 END) - sum(CASE WHEN yearmonth.date = '201305' THEN transactions_1k.amount ELSE 0 END) AS diff FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid WHERE yearmonth.customerid = 7;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.customerid ( integer | primary key | values : 3 , 5 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) , transactions_1k.productid ( integer | values : 2 , 23 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents : None\nIs it true that more SMEs pay in Czech koruna than in euros? If so, how many more?\n", "response": "SELECT sum(CASE WHEN customers.currency = 'CZK' THEN transactions_1k.amount ELSE 0 END) - sum(CASE WHEN customers.currency = 'EUR' THEN transactions_1k.amount ELSE 0 END) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.segment ( LAM )\ngasstations.gasstationid ( 2013 )\nWhich LAM customer used the Euro as their currency and had the highest consumption in October 2013?\n", "response": "SELECT yearmonth.customerid, yearmonth.date, yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid AND yearmonth.date = transactions_1k.date AND yearmonth.time = transactions_1k.time AND yearmonth.transactionid = transactions_1k.transactionid AND yearmonth.cardid = transactions_1k.cardid AND yearmonth.amount = transactions_1k.amount WHERE yearmonth.date = '2013-10-24' AND yearmonth.consumption = ( SELECT max(yearmonth.consumption) FROM yearmonth WHERE yearmonth.customerid = yearmonth.customerid AND yearmonth.date = yearmonth.date AND yearmonth.time = yearmonth.time AND yearmonth.transactionid = yearmonth.transactionid AND yearmonth.cardid = yearmonth.cardid AND yearmonth.amount = yearmonth.amount );\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\nforeign keys : None\nmatched contents :\ncustomers.segment ( KAM )\nWho among KAM's customers consumed the most? How much did it consume?\n", "response": "SELECT customers.segment, sum(transactions_1k.amount) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid WHERE customers.segment = 'KAM' GROUP BY customers.segment ORDER BY sum(transactions_1k.amount) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\nforeign keys : None\nmatched contents :\ncustomers.segment ( KAM )\ngasstations.gasstationid ( 2013 )\nHow much did the KAM customers consume in total in May 2013?\n", "response": "SELECT sum(transactions_1k.amount) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid WHERE customers.segment = 'KAM' AND yearmonth.date = '201305';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\nforeign keys : None\nmatched contents :\ncustomers.segment ( LAM )\nyearmonth.consumption ( 46.73 )\nHow many percent of LAM customer consumed more than 46.73?\n", "response": "SELECT count(*) FROM yearmonth WHERE yearmonth.customerid = 39 AND yearmonth.consumption > 46.73;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\ntable transactions_1k , columns = [ transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\nforeign keys : None\nmatched contents :\ngasstations.segment ( Value for money )\nWhich country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.\n", "response": "SELECT gasstations.country, count(gasstations.gasstationid) FROM gasstations GROUP BY gasstations.country ORDER BY count(gasstations.gasstationid) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.segment ( KAM )\nWhat percentage of KAM customers pay in euros?\n", "response": "SELECT 100 * sum(transactions_1k.price) / sum(transactions_1k.amount) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE customers.segment = 'KAM' AND customers.currency = 'EUR';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\nyearmonth.consumption ( 528.3 )\ngasstations.gasstationid ( 2012 )\nIn February 2012, what percentage of customers consumed more than 528.3?\n", "response": "SELECT cast(count(CASE WHEN yearmonth.consumption > 528.3 THEN 1 ELSE NULL END) AS REAL) * 100 / count(customers.customerid) FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '2012-02';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable transactions_1k , columns = [ transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable customers , columns = [ customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\nforeign keys : None\nmatched contents :\ngasstations.segment ( Premium )\nproducts.description ( Premium )\nWhat percentage of Slovakian gas stations are premium?\n", "response": "SELECT COUNT(gasstations.gasstationid) FROM gasstations WHERE gasstations.segment = 'Premium';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ngasstations.gasstationid ( 2013 )\nWhich client ID consumed the most in September 2013?\n", "response": "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE strftime('%Y-%m', yearmonth.date) = '2013-09' GROUP BY customers.customerid ORDER BY sum(yearmonth.consumption) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ngasstations.gasstationid ( 2013 )\nWhich client segment consumed the least in September 2013?\n", "response": "SELECT customers.segment FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE yearmonth.date = '201309' GROUP BY yearmonth.customerid ORDER BY count(yearmonth.consumption) ASC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.segment ( SME )\ngasstations.gasstationid ( 2012 )\nWhich SME customer consumed the least in June 2012?\n", "response": "SELECT yearmonth.customerid, yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE yearmonth.date LIKE '%2012-06%' GROUP BY yearmonth.customerid ORDER BY count(transactions_1k.transactionid) ASC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable transactions_1k , columns = [ transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ngasstations.gasstationid ( 2012 )\nWhat is the highest monthly consumption in the year 2012?\n", "response": "SELECT max(yearmonth.consumption) FROM yearmonth WHERE yearmonth.date = '201201';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) ]\nforeign keys : None\nmatched contents : None\nWhat is the biggest monthly consumption of the customers who use euro as their currency?\n", "response": "SELECT max(yearmonth.consumption) FROM yearmonth WHERE yearmonth.currency = 'EUR';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable transactions_1k , columns = [ transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\nforeign keys : None\nmatched contents :\ngasstations.gasstationid ( 2013 )\nPlease list the product description of the products consumed in September, 2013.\n", "response": "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE yearmonth.date = '2013-09-01';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable transactions_1k , columns = [ transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable yearmonth , columns = [ yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\nforeign keys : None\nmatched contents :\ngasstations.gasstationid ( 2013 )\nPlease list the countries of the gas stations with transactions taken place in June, 2013.\n", "response": "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date LIKE '6/2013%';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.country ( text | values : CZE , SVK ) ]\ntable transactions_1k , columns = [ transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents : None\nPlease list the chains of the gas stations with transactions in euro.\n", "response": "SELECT gasstations.chainid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE customers.currency = 'EUR';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable transactions_1k , columns = [ transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\nforeign keys : None\nmatched contents : None\nPlease list the product description of the products bought in transactions in euro.\n", "response": "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN customers ON customers.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable transactions_1k , columns = [ transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.productid ( integer | values : 2 , 23 ) ]\ntable yearmonth , columns = [ yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\nforeign keys : None\nmatched contents :\ngasstations.gasstationid ( 2012 )\nWhat is the average total price of the transactions taken place in January, 2012?\n", "response": "SELECT avg(transactions_1k.price) FROM transactions_1k WHERE transactions_1k.date = '2012-01-01';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.customerid ( 1000 )\nyearmonth.customerid ( 1000 )\ntransactions_1k.transactionid ( 1000 )\ngasstations.gasstationid ( 1000 )\nAmong the customers who paid in euro, how many of them have a monthly consumption of over 1000?\n", "response": "SELECT count(DISTINCT customers.customerid) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid WHERE customers.currency = 'EUR' AND yearmonth.consumption > 1000;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable transactions_1k , columns = [ transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\nforeign keys : None\nmatched contents : None\nPlease list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.\n", "response": "SELECT products.description FROM products INNER JOIN transactions_1k ON products.productid = transactions_1k.productid INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.country ( text | values : CZE , SVK ) ]\ntable transactions_1k , columns = [ transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) ]\ntable yearmonth , columns = [ yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\nforeign keys : None\nmatched contents :\ngasstations.chainid ( 11 )\ntransactions_1k.transactionid ( 11 )\ntransactions_1k.amount ( 11 )\nproducts.productid ( 11 )\nPlease list the disparate time of the transactions taken place in the gas stations from chain no. 11.\n", "response": "SELECT DISTINCT transactions_1k.time FROM transactions_1k INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.chainid = 11;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable transactions_1k , columns = [ transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ngasstations.gasstationid ( 1000 )\ntransactions_1k.transactionid ( 1000 )\nyearmonth.customerid ( 1000 )\ncustomers.customerid ( 1000 )\nHow many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?\n", "response": "SELECT count(transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.price > 1000;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable transactions_1k , columns = [ transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) ]\ntable yearmonth , columns = [ yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents : None\nAmong the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?\n", "response": "SELECT count(transactions_1k.transactionid) FROM transactions_1k INNER JOIN gasstations ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE' AND strftime('%Y-%m-%d', transactions_1k.date) > '2012-01-01';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable transactions_1k , columns = [ transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\nforeign keys : None\nmatched contents : None\nWhat is the average total price of the transactions taken place in gas stations in the Czech Republic?\n", "response": "SELECT sum(transactions_1k.price) / count(transactions_1k.transactionid) FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE gasstations.country = 'CZE';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents : None\nFor the customers who paid in the euro, what is their average total price of the transactions?\n", "response": "SELECT avg(transactions_1k.price) FROM transactions_1k INNER JOIN customers ON transactions_1k.customerid = customers.customerid WHERE customers.currency = 'EUR';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable transactions_1k , columns = [ transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\nforeign keys : None\nmatched contents : None\nWhich customer paid the most in 2012/8/25?\n", "response": "SELECT customerid FROM yearmonth WHERE date = '2012-08-25' ORDER BY consumption DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable transactions_1k , columns = [ transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\nforeign keys : None\nmatched contents : None\nWhich country's gas station had the first paid cusomer in 2012/8/25?\n", "response": "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-25';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable transactions_1k , columns = [ transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable yearmonth , columns = [ yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ntransactions_1k.time ( 16:25:00 )\nWhat kind of currency did the customer paid at 16:25:00 in 2012/8/24?\n", "response": "SELECT customers.currency FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid WHERE transactions_1k.time = '16:25:00' AND date(transactions_1k.date) = '2012-08-24';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.country ( text | values : CZE , SVK ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ntransactions_1k.time ( 21:20:00 )\nWhat segment did the customer have at 2012/8/23 21:20:00?\n", "response": "SELECT customers.segment FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '2012-08-23 21:20:00';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable transactions_1k , columns = [ transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ncustomers.currency ( EUR )\nHow many transactions were paid in EUR in the morning of 2012/8/26?\n", "response": "SELECT count(transactions_1k.transactionid) FROM transactions_1k WHERE strftime('%H', date) = '09' AND strftime('%M', date) = '41' AND strftime('%Y', date) = '2012-08-26';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents : None\nFor the earliest customer, what segment did he/she have?\n", "response": "SELECT customers.segment FROM customers ORDER BY customers.customerid LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable transactions_1k , columns = [ transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ntransactions_1k.time ( 12:42:00 )\nFor the deal happened at 2012/8/24 12:42:00, which country was it?\n", "response": "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.date = '2012-08-24' AND transactions_1k.time = '12:42:00';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable transactions_1k , columns = [ transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable yearmonth , columns = [ yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\nforeign keys : None\nmatched contents :\ntransactions_1k.time ( 21:20:00 )\nWhat was the product id of the transaction happened at 2012/8/23 21:20:00?\n", "response": "SELECT transactions_1k.productid FROM transactions_1k WHERE transactions_1k.date = '2012-08-23' AND transactions_1k.time = '21:20:00';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\nyearmonth.consumption ( 124.05 )\ntransactions_1k.price ( 124.05 )\nFor the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?\n", "response": "SELECT transactions_1k.amount, yearmonth.date FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.date = yearmonth.date WHERE yearmonth.customerid = 31543 AND yearmonth.date LIKE '2012-01%';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable transactions_1k , columns = [ transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ngasstations.country ( CZE )\nFor all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?\n", "response": "SELECT count(*) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.gasstationid = gasstations.gasstationid WHERE gasstations.country = 'CZE' AND transactions_1k.time BETWEEN '08:00:00' AND '09:00:00' AND transactions_1k.date = '2012-08-26';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\nyearmonth.consumption ( 214582.17 )\ngasstations.gasstationid ( 2013 )\nThere's one customer spent 214582.17 in the June of 2013, which currency did he/she use?\n", "response": "SELECT customers.currency FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '201112';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ntransactions_1k.cardid ( 667467 )\nWhich country was the card owner of No.667467 in?\n", "response": "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid WHERE transactions_1k.cardid = 667467;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ntransactions_1k.price ( 548.4 )\nyearmonth.consumption ( 548.4 )\nWhat's the nationality of the customer who spent 548.4 in 2012/8/24?\n", "response": "SELECT customers.currency FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date = '2012-08-24' AND yearmonth.consumption = 548.4;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.cardid ( integer | values : 486621 , 550134 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\nforeign keys : None\nmatched contents :\ncustomers.currency ( EUR )\nWhat is the percentage of the customers who used EUR in 2012/8/25?\n", "response": "SELECT yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid AND yearmonth.date = transactions_1k.date AND yearmonth.time = transactions_1k.time AND yearmonth.transactionid = transactions_1k.transactionid AND yearmonth.cardid = transactions_1k.cardid AND yearmonth.amount = transactions_1k.amount WHERE yearmonth.customerid = 39 AND yearmonth.date = '2012-08-25' AND yearmonth.consumption > 0;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ntransactions_1k.amount ( 8 )\ntransactions_1k.transactionid ( 8 )\ntransactions_1k.price ( 634.8 )\ngasstations.gasstationid ( 2013 )\ngasstations.chainid ( 8 )\nproducts.productid ( 8 )\nFor the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?\n", "response": "SELECT (transactions_1k.amount - yearmonth.consumption) / yearmonth.consumption * 100 FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid WHERE yearmonth.date = '2012-08-25';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable transactions_1k , columns = [ transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.country ( text | values : CZE , SVK ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\nforeign keys : None\nmatched contents : None\nWhich gas station has the highest amount of revenue?\n", "response": "SELECT gasstations.gasstationid FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid GROUP BY gasstations.gasstationid ORDER BY sum(transactions_1k.amount) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable transactions_1k , columns = [ transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.amount ( integer | values : 28 , 18 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\nforeign keys : None\nmatched contents :\ngasstations.country ( SVK )\ngasstations.segment ( Premium )\nproducts.description ( Premium )\nWhat is the percentage of \"premium\" against the overall segment in \"SVK\"?\n", "response": "SELECT sum(gasstations.segment) / count(gasstations.segment) FROM gasstations WHERE gasstations.country = 'SVK';\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable products , columns = [ products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) , products.productid ( integer | primary key | values : 1 , 2 ) ]\nforeign keys : None\nmatched contents :\ntransactions_1k.customerid ( 38508 )\nyearmonth.customerid ( 38508 )\ngasstations.gasstationid ( 2012 )\ncustomers.customerid ( 38508 )\nWhat is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?\n", "response": "SELECT sum(transactions_1k.amount) FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.customerid = yearmonth.customerid WHERE yearmonth.date = '201201' AND yearmonth.customerid = 38508;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable transactions_1k , columns = [ transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable gasstations , columns = [ gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\nforeign keys : None\nmatched contents : None\nWhich are the top five best selling products? Please state the full name of them.\n", "response": "SELECT products.description FROM products ORDER BY products.productid DESC LIMIT 5;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.currency ( text | values : EUR , CZK ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable gasstations , columns = [ gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.chainid ( integer | values : 13 , 6 ) ]\nforeign keys : None\nmatched contents : None\nWho is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?\n", "response": "SELECT customers.segment, customers.currency, AVG(transactions_1k.price) FROM customers INNER JOIN transactions_1k ON customers.customerid = transactions_1k.customerid GROUP BY customers.segment, customers.currency ORDER BY AVG(transactions_1k.price) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\ntable transactions_1k , columns = [ transactions_1k.gasstationid ( integer | values : 3704 , 656 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.time ( text | values : 09:41:00 , 10:03:00 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable yearmonth , columns = [ yearmonth.consumption ( real | values : 528.3 , 1598.28 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.customerid ( integer | primary key | values : 39 , 63 ) ]\ntable customers , columns = [ customers.currency ( text | values : EUR , CZK ) , customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) ]\nforeign keys : None\nmatched contents :\ngasstations.chainid ( 2 )\ntransactions_1k.productid ( 2 )\ntransactions_1k.transactionid ( 2 )\ntransactions_1k.amount ( 2 )\nproducts.productid ( 2 )\nWhich country had the gas station that sold the most expensive product id No.2 for one unit?\n", "response": "SELECT gasstations.country FROM gasstations INNER JOIN transactions_1k ON gasstations.gasstationid = transactions_1k.gasstationid INNER JOIN products ON transactions_1k.productid = products.productid GROUP BY gasstations.country ORDER BY sum(transactions_1k.amount) DESC LIMIT 1;\t", "n_examples": 0, "db_id": "debit_card_specializing"}, {"prompt_tokens": 0, "prompt": "database schema :\ntable yearmonth , columns = [ yearmonth.customerid ( integer | primary key | values : 39 , 63 ) , yearmonth.date ( text | primary key | values : 201112 , 201201 ) , yearmonth.consumption ( real | values : 528.3 , 1598.28 ) ]\ntable transactions_1k , columns = [ transactions_1k.customerid ( integer | values : 31543 , 46707 ) , transactions_1k.date ( date | values : 2012-08-24 , 2012-08-23 ) , transactions_1k.productid ( integer | values : 2 , 23 ) , transactions_1k.price ( real | values : 672.64 , 430.72 ) , transactions_1k.amount ( integer | values : 28 , 18 ) , transactions_1k.transactionid ( integer | primary key | values : 1 , 2 ) ]\ntable products , columns = [ products.productid ( integer | primary key | values : 1 , 2 ) , products.description ( text | values : Rucn\u00ed zad\u00e1n\u00ed , Nafta ) ]\ntable customers , columns = [ customers.customerid ( integer | primary key | values : 3 , 5 ) , customers.segment ( text | comment : client segment | values : SME , LAM ) , customers.currency ( text | values : EUR , CZK ) ]\ntable gasstations , columns = [ gasstations.gasstationid ( integer | primary key | values : 44 , 45 ) , gasstations.country ( text | values : CZE , SVK ) , gasstations.chainid ( integer | values : 13 , 6 ) , gasstations.segment ( text | comment : chain segment | values : Value for money , Premium ) ]\nforeign keys : None\nmatched contents :\nyearmonth.customerid ( 5 )\ntransactions_1k.productid ( 5 )\ntransactions_1k.amount ( 5 )\ntransactions_1k.transactionid ( 5 )\nproducts.productid ( 5 )\ncustomers.customerid ( 5 )\ngasstations.gasstationid ( 2012 )\nFor all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.\n", "response": "SELECT yearmonth.customerid, yearmonth.date, yearmonth.consumption FROM yearmonth INNER JOIN transactions_1k ON yearmonth.customerid = transactions_1k.customerid WHERE transactions_1k.productid = 5 AND transactions_1k.amount > 29;\t", "n_examples": 0, "db_id": "debit_card_specializing"}]}